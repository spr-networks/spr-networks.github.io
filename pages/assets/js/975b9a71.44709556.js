"use strict";(self.webpackChunkspr_docs=self.webpackChunkspr_docs||[]).push([[9825],{80633:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=t(85893),s=t(11151);const i={slug:"midnightsun-qualifiers-2024-dragonfly",title:"Dragonfly Pake",authors:["ltsrad"],tags:["dragonfly","sae","cryptography","ctf","wifi"]},r=void 0,o={permalink:"/pages/blog/midnightsun-qualifiers-2024-dragonfly",source:"@site/blog/2024-04-22-ctf-dragonfly.md",title:"Dragonfly Pake",description:"Midnight Sun Qualifiers 2024",date:"2024-04-22T00:00:00.000Z",formattedDate:"April 22, 2024",tags:[{label:"dragonfly",permalink:"/pages/blog/tags/dragonfly"},{label:"sae",permalink:"/pages/blog/tags/sae"},{label:"cryptography",permalink:"/pages/blog/tags/cryptography"},{label:"ctf",permalink:"/pages/blog/tags/ctf"},{label:"wifi",permalink:"/pages/blog/tags/wifi"}],readingTime:6.05,hasTruncateMarker:!1,authors:[{name:"Alex Radocea",url:"https://twitter.com/defendtheworld",key:"ltsrad"}],frontMatter:{slug:"midnightsun-qualifiers-2024-dragonfly",title:"Dragonfly Pake",authors:["ltsrad"],tags:["dragonfly","sae","cryptography","ctf","wifi"]},unlisted:!1,prevItem:{title:"PI5 Hats and More, Unleashing the Power of Modular Router Hardware",permalink:"/pages/blog/pi5-hardware-2024"},nextItem:{title:"SPR Tailscale",permalink:"/pages/blog/spr-tailscale-integration"}},l={authorsImageUrls:[void 0]},d=[{value:"Midnight Sun Qualifiers 2024",id:"midnight-sun-qualifiers-2024",level:2},{value:"A Troubled PAKE",id:"a-troubled-pake",level:2},{value:"Dragonblood",id:"dragonblood",level:2},{value:"The CTF Challenge",id:"the-ctf-challenge",level:2},{value:"Links",id:"links",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"midnight-sun-qualifiers-2024",children:"Midnight Sun Qualifiers 2024"}),"\n",(0,a.jsxs)(n.p,{children:["Over the weekend a ctf team I help with, ",(0,a.jsx)(n.a,{href:"https://hackingforsoju.team/",children:"HackingForSoju"}),", hosted the Midnight Sun CTF Qualifiers.\nThe finals will take place in ",(0,a.jsx)(n.a,{href:"https://conf.midnightsunctf.com/",children:"Stockholm, Sweden on June 14-16"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["I put together a ",(0,a.jsx)(n.a,{href:"https://gist.github.com/lts-rad/a557f5eb2d4456bbe209d524bdfbfd23",children:"challenge"})," around WPA3's Password Authenticated Key Exchange: ",(0,a.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/html/rfc7664",children:"Dragonfly"})]}),"\n",(0,a.jsx)(n.p,{children:"WPA3 has quite a few notes during our our wifi training where we discuss the background to the protocol, because it was so very worrisome from the start."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"trouble",src:t(22498).Z+"",width:"1572",height:"1606"})}),"\n",(0,a.jsx)(n.h2,{id:"a-troubled-pake",children:"A Troubled PAKE"}),"\n",(0,a.jsx)(n.p,{children:"In 2013, when Dan Harkins first proposed Dragonfly many people pointed out that it was\ninferior to existing PAKEs. Arguably it did not steer clear of existing patents, its performance was quite bad,\nand very objectively it suffered terribly from sidechannels. It does not take great skill to spot them."}),"\n",(0,a.jsxs)(n.p,{children:["There's an IETF thread thread sums it up ",(0,a.jsx)(n.a,{href:"https://mailarchive.ietf.org/arch/msg/tls/A_SfHI4BsdAi4miklBs3TvUbu-Y/",children:"here"}),".\nTrevor Perrin, who is behind the Double Ratchet in Signal designed with Moxie Marlinspike, sums up what cryptographers saw."]}),"\n",(0,a.jsx)(n.p,{children:"In response, Dan Harkins goes on the offensive with personal attacks, saying several things of this nature:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'>\n> It makes little sense to use a 1024-bit FFC group in any circumstances\n> because (pardon me, Kevin) - fuck the NSA.\n\n  That certainly is a fashionable pose to strike these days!\n\n  But I brought up binding a 1024-bit FFC to a password because that\'s\nwhat an RFC with your name on it does. So it makes sense to replace\n"the NSA" in your sentence with "Trevor Perrin".\n\n-- Dan Harkins\n'})}),"\n",(0,a.jsx)(n.p,{children:"When the designer of a security algorithm finds it acceptable to behave this way,\nand the decision makers rubber stamp their actions, we should probably take a step back\nas a society and ask if irrational people should be the ones solving and creating the\nmath problems that our security relies on."}),"\n",(0,a.jsx)(n.p,{children:"So when the WiFi consortium used Dragonfly for WPA3 in 2018, many people were actually surprised,\nsince they assumed Dragonfly would never make its way into widespread usage."}),"\n",(0,a.jsx)(n.h2,{id:"dragonblood",children:"Dragonblood"}),"\n",(0,a.jsxs)(n.p,{children:["As WPA3 entered the ecosystem, security experts started looking. In 2019 the world's leading wifi security expert,\nMathy Vanhoef, with Eyal Ronen, demolished Dragonfly ",(0,a.jsx)(n.a,{href:"https://wpa3.mathyvanhoef.com/",children:"https://wpa3.mathyvanhoef.com"}),".\nMany of the attacks were the same as initially outlined by Trevor Perrin as well as many other cryptographers in 2013."]}),"\n",(0,a.jsx)(n.p,{children:"The team also invented some novel mechanisms to attack Brainpool curves in particular. They proved that the\nhardening attempts with computing random values would provide statistical anomalies detectable by calculating timing variance."}),"\n",(0,a.jsx)(n.p,{children:"What's even worse, under EAP-PWD (dragonfly with enterprise wifi), they found that implementaitons also accepted invalid curves, bypassing the password altogether."}),"\n",(0,a.jsx)(n.p,{children:"Hardening was added to eliminate the remaining sidechannels."}),"\n",(0,a.jsx)(n.h2,{id:"the-ctf-challenge",children:"The CTF Challenge"}),"\n",(0,a.jsx)(n.p,{children:"The qualifier's challenge celebrates these timing failures.  Players had to remotely exploit a python implementation of Dragonfly\nthat had the initial hardening only (always running 40 rounds)."}),"\n",(0,a.jsx)(n.p,{children:"The key insight is that the KDF for dragonfly is malleable based on the client's MAC address. Providing different MAC addresses\ncreates unique timing signatures for a given AP MAC address and Password Shared Key."}),"\n",(0,a.jsx)(n.p,{children:"The timing signature can then be compared offline against a password list to find the real password.\nWith a vulnerable implementation this timing sidechannel is actually a lot more effective to exploit\nthan cracking WPA2 keys which are protected with PBKDF2."}),"\n",(0,a.jsx)(n.p,{children:"The easiest timing differences to exploit are that lines [2] and [3] only happen sometimes."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def initiate(self, other_mac, k=40):\n    \"\"\"\n    See algorithm in https://tools.ietf.org/html/rfc7664\n    in section 3.2.1\n    \"\"\"\n    self.other_mac = other_mac\n    found = 0\n    num_valid_points = 0\n    counter = 1\n    n = self.p.bit_length()\n\n    # Find x\n    while counter <= k:\n        base = self.compute_hashed_password(counter)\n        temp = self.key_derivation_function(n, base, b'Dragonfly Hunting And Pecking')\n        if temp >= self.p:\n            counter = counter + 1 [1]\n            continue\n        seed = temp\n        val = self.curve.secure_curve_equation(seed) [2]\n        if self.curve.secure_is_quadratic_residue(val): [3]\n            if num_valid_points < 5:\n                x = seed\n                save = base\n                found = 1\n                num_valid_points += 1\n                logger.debug('Got point after {} iterations'.format(counter))\n\n        counter = counter + 1\n\n    if found == 0:\n        logger.error('No valid point found after {} iterations'.format(k))\n        return False\n    elif found == 1:\n        # https://crypto.stackexchange.com/questions/6777/how-to-calculate-y-value-from-yy-mod-prime-efficiently\n        # https://rosettacode.org/wiki/Tonelli-Shanks_algorithm\n        y = tonelli_shanks(self.curve.curve_equation(x), self.p)\n\n        PE = Point(x, y)\n\n        # check valid point\n        assert self.curve.curve_equation(x) == pow(y, 2, self.p)\n\n        self.PE = PE\n        assert self.curve.valid(self.PE)\n        return True\n"})}),"\n",(0,a.jsx)(n.p,{children:'To expand the timing window, so that players from around the world can exploit this remotely over TCP,\nmany more multiplications were added through a "masking" operation where random values are computed\nalongside the real one at random, raising their cost to hundreds of milliseconds.'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def secure_curve_equation(self, x):\n    """\n    Do not leak hamming weights to power analysis\n    """\n    idx = secrets.randbelow(self.dN)\n    defense = self.defense_masks + []\n    defense[idx] = x\n    for i in range(self.dN):\n        tmp = defense[idx]\n        defense[i] = self.curve_equation(defense[idx])\n    return defense[idx]\n\n\ndef secure_is_quadratic_residue(self, x):\n    """\n    Do not leak hamming weights to power analysis\n    """\n    idx = secrets.randbelow(self.dN)\n    defense = self.defense_masks + []\n    defense[idx] = x\n    for i in range(self.dN):\n        defense[i] = self.is_quadratic_residue(defense[i])\n    return defense[idx]\n\n'})}),"\n",(0,a.jsx)(n.p,{children:"In practice this is good enough for several teams to attack the service simultaneously."}),"\n",(0,a.jsx)(n.p,{children:"To effectively precompute passwords, an attacker can create an offline dictionary that only hashes and\nskips the large number math."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def initiate(self, other_mac, k=40):\n    self.other_mac = other_mac\n    counter = 1\n    counter2 = 1\n    n = self.p.bit_length()\n\n    # Find x\n    while counter <= k:\n        base = self.compute_hashed_password(counter)\n        temp = self.key_derivation_function(n, base, b'Dragonfly Hunting And Pecking')\n        if temp >= self.p:\n            counter = counter + 1\n            continue\n        counter2 += 1\n        counter = counter + 1\n    return counter2\n"})}),"\n",(0,a.jsx)(n.p,{children:"The provided challenge also had a terrible way to convert a binary number which really slowed things down,\nand also had an off by one error probably."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Convert returned_bits to the non-negative integer c (see Appendix C.2.1).\nC = 0\nfor i in range(n):\n    if int(binary_repr[i]) == 1:\n        C += pow(2, n-i)\n"})}),"\n",(0,a.jsx)(n.p,{children:"versus"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"X = int(binary_repr, 2)<<1\n"})}),"\n",(0,a.jsx)(n.p,{children:"My solution normalized the remote timings to compare them with the offline compute."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def normalize_array(arr):\n    """Normalize an array to be between 0 and 1."""\n    return (arr - arr.min()) / (arr.max() - arr.min())\n\ndef calc_mse(psk, timings, guess_timings):\n    y_actual = normalize_array(np.array(timings))\n    y_predicted = normalize_array(np.array(guess_timings))\n    mse = np.mean((y_actual - y_predicted) ** 2)\n    return mse\n\ndef solve_psk_fast(ap_mac, my_macs, timings):\n    computed = open("compute.txt","rb").readlines()\n    psk = None\n    best_mse = 100\n    for line in computed:\n        p, tmp = line.split(b"|")\n        p = p.strip().decode()\n        guess_timings = json.loads(tmp.strip())\n        mse = calc_mse(p, timings, guess_timings)\n        if mse < best_mse:\n            print("new best",mse,p)\n            best_mse = mse\n            psk = p\n    print(psk)\n    return psk\n'})}),"\n",(0,a.jsx)(n.p,{children:"During the CTF the services were overwhelmed by naive solutions, so we ended up scaling it up,\nbut it was a little bit frustrating for some teams at times.  In the future we'll have to put remote timing attempts behind a queue and/or proof of work."}),"\n",(0,a.jsx)(n.p,{children:"To make the challenge harder, teams were also given a second variant with a larger keyspace. Instead of 60k wordlist, they were asked to attack a random 36-alphabet 5 character password. 7 teams solved it. Hats off to the great work, since you understood something Dan Harkins pretended not to when it was explained to him by so many cryptographers."}),"\n",(0,a.jsx)(n.h2,{id:"links",children:"Links"}),"\n",(0,a.jsxs)(n.p,{children:["If you'd like to learn more about these attacks, the ",(0,a.jsx)(n.a,{href:"https://papers.mathyvanhoef.com/dragonblood.pdf",children:"Dragonblood"})," paper is the one you'll want."]}),"\n",(0,a.jsxs)(n.p,{children:["The up to date constant time implementation of the password element deriviation in hostapd is located here: ",(0,a.jsx)(n.a,{href:"https://w1.fi/cgit/hostap/tree/src/common/sae.c#n283",children:"https://w1.fi/cgit/hostap/tree/src/common/sae.c#n283"}),"."]})]})}function c(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},22498:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/wpa3trouble-d0ed718a7ac2fb3aa54ae6b7f8c6253c.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>r});var a=t(67294);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);