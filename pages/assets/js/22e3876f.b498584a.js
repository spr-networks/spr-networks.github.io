"use strict";(self.webpackChunkspr_docs=self.webpackChunkspr_docs||[]).push([[685],{91890:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>l});var i=n(85893),r=n(11151);const t={sidebar_label:"Docker WiFi Router",sidebar_position:4},o="Docker WiFi Router & Firewall",d={id:"setup_guides/setup_run_spr",title:"Docker WiFi Router & Firewall",description:"In this guide SPR will be setup to manage the host's network, firewall, wired ports, and wireless interfaces.",source:"@site/docs/setup_guides/setup_run_spr.md",sourceDirName:"setup_guides",slug:"/setup_guides/setup_run_spr",permalink:"/pages/docs/setup_guides/setup_run_spr",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Docker WiFi Router",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"SPR VPN",permalink:"/pages/docs/setup_guides/virtual_spr"},next:{title:"Overview",permalink:"/pages/docs/guides/overview"}},a={},l=[{value:"Base System Setup",id:"base-system-setup",level:2},{value:"Download and install Ubuntu Server",id:"download-and-install-ubuntu-server",level:3},{value:"Setup",id:"setup",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Run SPR",id:"run-spr",level:3},{value:"Run SPR dev release",id:"run-spr-dev-release",level:3},{value:"Building the project",id:"building-the-project",level:3},{value:"Additional Notes",id:"additional-notes",level:3},{value:"Sign in to the Web UI",id:"sign-in-to-the-web-ui",level:3}];function c(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"docker-wifi-router--firewall",children:"Docker WiFi Router & Firewall"})}),"\n",(0,i.jsx)(s.p,{children:"In this guide SPR will be setup to manage the host's network, firewall, wired ports, and wireless interfaces."}),"\n",(0,i.jsx)(s.p,{children:"SPR runs with Docker services running prebuilt containers or containers built locally from source."}),"\n",(0,i.jsx)(s.admonition,{type:"tip",children:(0,i.jsxs)(s.p,{children:["We recommend working with ",(0,i.jsx)(s.a,{href:"https://docs.docker.com/engine/install/",children:"upstream docker"})," for full docker compose and buildkit support"]})}),"\n",(0,i.jsx)(s.h2,{id:"base-system-setup",children:"Base System Setup"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.em,{children:"NOTE"})})," This guide shows how to setup and run SPR using Docker. See the ",(0,i.jsx)(s.a,{href:"/docs/setup_guides/pi4b",children:"Raspberry Pi 4 Setup Guide"})," for running SPR using a prebuilt image."]}),"\n",(0,i.jsx)(s.h3,{id:"download-and-install-ubuntu-server",children:"Download and install Ubuntu Server"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsxs)(s.em,{children:[(0,i.jsx)(s.a,{href:"#setup-spr",children:"Skip"})," this step if you already have a base system setup."]})}),"\n",(0,i.jsxs)(s.p,{children:["For Running on a Raspberry Pi you can download the 24.04 Ubuntu image ",(0,i.jsx)(s.a,{href:"https://ubuntu.com/download/raspberry-pi/thank-you?version=24.04&architecture=server-arm64+raspi",children:"here"}),".\nFor other hardware, ",(0,i.jsx)(s.a,{href:"https://ubuntu.com/download/server",children:"download"})," an Ubuntu server installer for your architecture (arm64 or amd64), then boot the device into the installer."]}),"\n",(0,i.jsx)(s.p,{children:"SPR has been tested mainly with Ubuntu however many Linux distributions should work. Upstream docker is recommended for the buildkit features."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Write image to SD-card or USB"})}),"\n",(0,i.jsxs)(s.p,{children:["You can flash the image with a tool such as the ",(0,i.jsx)(s.a,{href:"https://www.raspberrypi.com/software/",children:"Official Raspberry Pi Imager -- https://www.raspberrypi.com/software/"}),". Be sure to select 'Other OS'"]}),"\n",(0,i.jsx)(s.p,{children:"If you prefer to write the image using the command line:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"# On a mac, write the image to the external disk (rdiskX).\n# Be careful to make sure you identify your removable drive correctly.\n$ xzcat ubuntu-24.0-4-preinstalled-server-arm64+raspi.img.xz | dd of=/dev/rdiskX bs=$[1024*1024]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"setup",children:"Setup"}),"\n",(0,i.jsxs)(s.p,{children:["Boot the system and login, the default credentials are ",(0,i.jsx)(s.code,{children:"ubuntu/ubuntu"})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Fetch the SPR repository"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"# On the booted system\ngit clone https://github.com/spr-networks/super\ncd super\n"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Prepare the Ubuntu Install for SPR"})," ",(0,i.jsx)(s.a,{href:"https://github.com/spr-networks/super/blob/main/base/setup.sh",children:"base/setup.sh"})]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"#if using a flash drive\nsudo base/setup.sh\n#or if using an sdcard the following script reduces disk usage\n# base/setup-sdcard.sh #this setup will reduce writes from log files\nreboot\n"})}),"\n",(0,i.jsx)(s.h3,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(s.p,{children:["Inside the super directory, copy ",(0,i.jsx)(s.code,{children:"base/template_configs/"})," to ",(0,i.jsx)(s.code,{children:"configs/"})]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"cd super\ncp -R base/template_configs configs\n./configs/scripts/gen_coredhcp_yaml.sh > configs/dhcp/coredhcp.yml\n./configs/scripts/gen_watchdog.sh  > configs/watchdog/watchdog.conf\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Verify the main config ",(0,i.jsx)(s.code,{children:"configs/base/config.sh"})," is correct. Ensure that ",(0,i.jsx)(s.code,{children:"WANIF"})," matches the name of the outbound interface if not using the builtin ethernet port."]}),"\n",(0,i.jsxs)(s.p,{children:["Also, consider disabling ",(0,i.jsx)(s.code,{children:"UPSTREAM_SERVICES_ENABLE=1"})," if you do not want the API and SSH exposed to the WAN port."]}),"\n",(0,i.jsx)(s.h3,{id:"run-spr",children:"Run SPR"}),"\n",(0,i.jsx)(s.p,{children:"Start the services :"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"docker compose up -d\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Testing containers are built and published to GitHub's Container Registry,\nand can be run without building on the device. If you would instead like to build everything\nfrom source, proceed to the ",(0,i.jsx)(s.a,{href:"#building-the-project",children:"next section"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"To see logs:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"docker compose logs -f\n"})}),"\n",(0,i.jsx)(s.h3,{id:"run-spr-dev-release",children:"Run SPR dev release"}),"\n",(0,i.jsxs)(s.p,{children:["If you want to get the latest features and updates you can switch to the dev release of SPR by setting the ",(0,i.jsx)(s.code,{children:"RELEASE_VERSION"})," and ",(0,i.jsx)(s.code,{children:"RELEASE_CHANNEL"})," environment variables:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:'export RELEASE_VERSION="latest" RELEASE_CHANNEL="-dev"\ndocker compose up -d\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Setting the ",(0,i.jsx)(s.code,{children:"RELEASE_VERSION"})," variable can also be used to run specific versions:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:'export RELEASE_VERSION="v0.1.28"\ndocker compose up -d\n'})}),"\n",(0,i.jsx)(s.h3,{id:"building-the-project",children:"Building the project"}),"\n",(0,i.jsx)(s.p,{children:"SPR can be built and deployed with containers or even be built on device."}),"\n",(0,i.jsx)(s.p,{children:"For also developing on-device, systems should have 32-64GB of writable storage and 8GB of RAM. With less RAM, building from ram disks should be disabled (see the README)."}),"\n",(0,i.jsx)(s.p,{children:"Network setup:"}),"\n",(0,i.jsxs)(s.p,{children:["Because SPR uses ",(0,i.jsx)(s.code,{children:"nftables"})," exclusively, and docker is made to work with ",(0,i.jsx)(s.code,{children:"iptables"}),"\nwhich the SPR install disables for docker, a fixup script is needed for docker containers to have access."]}),"\n",(0,i.jsx)(s.p,{children:"The script installs minimal docker forwarding rules. Once SPR is running this\nis no longer needed. However, is SPR fails to run and you need to build with docker,\nyou may need to run this script again."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"#fix forwarding rules for Docker\nsudo ./base/docker_nftables_setup.sh\n"})}),"\n",(0,i.jsx)(s.p,{children:"And build."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"sudo ./build_docker_compose.sh --load\n"})}),"\n",(0,i.jsxs)(s.p,{children:["If something went wrong with with a cached stage, it is possible to specify ",(0,i.jsx)(s.code,{children:"--no-cache"}),".\nFor example: ",(0,i.jsx)(s.code,{children:"sudo ./build_docker_compose.sh --no-cache --load"})]}),"\n",(0,i.jsxs)(s.p,{children:["A specific service can also be built by passing it as an argument (",(0,i.jsx)(s.code,{children:"./build_docker_compose.sh api --load"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"To run the local build:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"docker compose up -d\n"})}),"\n",(0,i.jsx)(s.h3,{id:"additional-notes",children:"Additional Notes"}),"\n",(0,i.jsxs)(s.p,{children:["Check dns-Corefile to tweak DNS server configuration as well as the hostapd settings in ",(0,i.jsx)(s.code,{children:"configs/dns/"}),". Some of these settings are now available in the UI as well."]}),"\n",(0,i.jsx)(s.p,{children:"It is possible to use SPR's DNS server for the host system's DNS requests too, by updating the resolv.conf file."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:'sudo echo -e "nameserver 127.0.0.1" > /etc/resolv.conf\n'})}),"\n",(0,i.jsx)(s.h3,{id:"sign-in-to-the-web-ui",children:"Sign in to the Web UI"}),"\n",(0,i.jsxs)(s.p,{children:["You can follow along with the ",(0,i.jsx)(s.a,{href:"/pages/docs/setup_guides/install",children:"Install Guide"})]}),"\n",(0,i.jsx)("div",{children:(0,i.jsx)("video",{width:"100%",height:"100%",playsInline:!0,controls:!0,src:"/pages/video/guides/install.mp4",type:"video/mp4"})}),"\n",(0,i.jsxs)(s.p,{children:["Connect to the IP of the device from the wired WAN interface in a browser, SPR is using mDNS and you should be able to reach it @ ",(0,i.jsx)(s.a,{href:"http://spr.local",children:"http://spr.local"}),". If that does not work, check ",(0,i.jsx)(s.a,{href:"http://192.168.2.1",children:"http://192.168.2.1"})," which is the default subnet SPR installs with."]}),"\n",(0,i.jsx)(s.p,{children:"A setup screen should show up asking you to set up interfaces and assign a username and password."})]})}function h(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11151:(e,s,n)=>{n.d(s,{Z:()=>d,a:()=>o});var i=n(67294);const r={},t=i.createContext(r);function o(e){const s=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);