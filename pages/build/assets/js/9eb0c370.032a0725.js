"use strict";(self.webpackChunkspr_docs=self.webpackChunkspr_docs||[]).push([[2318],{98716:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=t(85893),a=t(11151);const r={slug:"barely-ap-surfaces",title:"Attack Surface Reduction Research (Part 1)",authors:"ltsrad",tags:["Python","Scapy","WiFi","Linux"]},o=void 0,s={permalink:"/pages/blog/barely-ap-surfaces",source:"@site/blog/2023-10-23-barely-attack-surface-experiments.md",title:"Attack Surface Reduction Research (Part 1)",description:"Reducing Attack Surfaces (Part 1)",date:"2023-10-23T00:00:00.000Z",tags:[{inline:!0,label:"Python",permalink:"/pages/blog/tags/python"},{inline:!0,label:"Scapy",permalink:"/pages/blog/tags/scapy"},{inline:!0,label:"WiFi",permalink:"/pages/blog/tags/wi-fi"},{inline:!0,label:"Linux",permalink:"/pages/blog/tags/linux"}],readingTime:2.595,hasTruncateMarker:!0,authors:[{name:"Alex Radocea",url:"https://twitter.com/defendtheworld",key:"ltsrad",page:null}],frontMatter:{slug:"barely-ap-surfaces",title:"Attack Surface Reduction Research (Part 1)",authors:"ltsrad",tags:["Python","Scapy","WiFi","Linux"]},unlisted:!1,prevItem:{title:"Loading up nexmon on a RPI4 with SPR",permalink:"/pages/blog/spr-nexmon"},nextItem:{title:"One Weird Trick to fix your CTF Payloads",permalink:"/pages/blog/scapy-revfrag"}},l={authorsImageUrls:[void 0]},c=[{value:"Reducing Attack Surfaces (Part 1)",id:"reducing-attack-surfaces-part-1",level:2},{value:"Targeting the Whole WiFi Stack",id:"targeting-the-whole-wifi-stack",level:2},{value:"Developing a Shim Explained",id:"developing-a-shim-explained",level:2},{value:"Interested in working with us? Please reach out",id:"interested-in-working-with-us-please-reach-out",level:2}];function d(e){const n={a:"a",h2:"h2",li:"li",ol:"ol",p:"p",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"reducing-attack-surfaces-part-1",children:"Reducing Attack Surfaces (Part 1)"}),"\n",(0,i.jsx)(n.p,{children:"SPR lets users create adaptive, micro-segmented networks for connecting and managing devices.\nIn addition to fine-grained network visibility we also build hardened software and\nwork to avoid common security flaws. As SPR has matured we've started taking on further efforts\nto eliminate attack surfaces."}),"\n",(0,i.jsx)(n.p,{children:"When it comes to native code: we introduce none. As in, we have not written new native code for SPR anywhere.\nWe have one BPF filter, and its otherwise golang all the way down. We also do not run standard native services\nwhere we can avoid them. We have replaced traditional C code for services such as DNS and DHCP with golang implementations, namely CoreDNS and CoreDHCP."}),"\n",(0,i.jsx)(n.p,{children:"The remaining native code targets that we have in SPR are as follows:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The Linux kernel. For example: ethernet, the tcp/ip stack, nftables, the mac80211 framework and vendor drivers"}),"\n",(0,i.jsx)(n.li,{children:"802.11 Firmware, Ethernet Firmware"}),"\n",(0,i.jsx)(n.li,{children:"Hostapd"}),"\n",(0,i.jsx)(n.li,{children:"PPP Daemon (off by default)"}),"\n",(0,i.jsx)(n.li,{children:"OS Services (Ubuntu)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"targeting-the-whole-wifi-stack",children:"Targeting the Whole WiFi Stack"}),"\n",(0,i.jsxs)(n.p,{children:["We believe the wifi firmware to be today's most insecure target (along with the vendor drivers). Many firmwares are blackbox,\npoorly documented, and opaque to public security research. We want SPR to be immune to attacks like ",(0,i.jsx)(n.a,{href:"https://blog.exodusintel.com/2017/07/26/broadpwn/",children:"Broadpwn"}),"\nand ",(0,i.jsx)(n.a,{href:"https://i.blackhat.com/USA-19/Thursday/us-19-Pi-Exploiting-Qualcomm-WLAN-And-Modem-Over-The-Air-wp.pdf",children:"Qualcomm Exploitation"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["We've previously published ",(0,i.jsx)(n.a,{href:"https://github.com/spr-networks/barely-ap",children:"barely-ap"})," to teach people about WiFi authentication.\nIt can and does work with real wifi chips running in monitor mode to connect clients over the air. We've tested with Android, iOS, and Linux devices."]}),"\n",(0,i.jsx)(n.p,{children:"The plan is to build a series of experiments to host high-speed wifi."}),"\n",(0,i.jsx)(n.p,{children:"In the near term:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Develop a Proof-of-Concept AP with scapy in monitor mode (DONE)"}),"\n",(0,i.jsx)(n.li,{children:"Develop a shim from monitor frames to hostapd running under mac80211_hwsim. This is a work in progress.\nWe would like to see a rust kernel driver/userland daemon for this"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Future:"}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"A full AP written in rust, operating on raw 802.11 frames (not relying on the Linux kernel 802.11 subsystem)"}),"\n",(0,i.jsx)(n.li,{children:"Rust protocol firmware for a wifi chip."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"developing-a-shim-explained",children:"Developing a Shim Explained"}),"\n",(0,i.jsx)(n.p,{children:"By running the card in monitor mode,  protocol parsing in the card firmware is substantially reduced if not altogether eliminated."}),"\n",(0,i.jsx)(n.p,{children:"And with relaying frames over to macsim, hostapd is good to go.\nWhat needs to happen however is making this incredibly fast, and researching rate negotiation and\nwhat calls might need to be made to firmware to enable higher coding rates."}),"\n",(0,i.jsx)(n.p,{children:"By using hostapd and the kernel mac80211 stack, we still maintain some native attack surface, however we get a known working,\nsecurity-tested AP that will be compatible with a wide variety of devices, without the firmware protocol parsing and the vendor driver parsing."}),"\n",(0,i.jsx)(n.p,{children:"For next steps, a proof-of-concept with scapy is actually much too slow. We want to start\nwith a rust userland daemon leveraging iouring. If that doesn't fly then we'll go to a shim in the kernel."}),"\n",(0,i.jsx)(n.h2,{id:"interested-in-working-with-us-please-reach-out",children:"Interested in working with us? Please reach out"}),"\n",(0,i.jsx)(n.p,{children:"We are actively seeking an intern to help develop rust+wifi for SPR."}),"\n",(0,i.jsxs)(n.p,{children:["You can contact us at  spr-wifi [ a-t ] supernetworks.org  or hop on the ",(0,i.jsx)(n.a,{href:"https://discord.gg/EUjTKJPPAX",children:"discord"})]})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>o});var i=t(67294);const a={},r=i.createContext(a);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);