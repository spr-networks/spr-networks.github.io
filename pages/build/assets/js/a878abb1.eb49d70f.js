"use strict";(self.webpackChunkspr_docs=self.webpackChunkspr_docs||[]).push([[8376],{36646:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(85893),r=n(11151);const i={slug:"barely-ap-surfaces",title:"Attack Surface Reduction Research (Part 1)",authors:"ltsrad",tags:["Python","Scapy","WiFi","Linux"]},s=void 0,o={permalink:"/pages/blog/barely-ap-surfaces",source:"@site/blog/2023-10-23-barely-attack-surface-experiments.md",title:"Attack Surface Reduction Research (Part 1)",description:"Reducing Attack Surfaces (Part 1)",date:"2023-10-23T00:00:00.000Z",tags:[{inline:!0,label:"Python",permalink:"/pages/blog/tags/python"},{inline:!0,label:"Scapy",permalink:"/pages/blog/tags/scapy"},{inline:!0,label:"WiFi",permalink:"/pages/blog/tags/wi-fi"},{inline:!0,label:"Linux",permalink:"/pages/blog/tags/linux"}],readingTime:2.595,hasTruncateMarker:!0,authors:[{name:"Alex Radocea",url:"https://twitter.com/defendtheworld",key:"ltsrad",page:null}],frontMatter:{slug:"barely-ap-surfaces",title:"Attack Surface Reduction Research (Part 1)",authors:"ltsrad",tags:["Python","Scapy","WiFi","Linux"]},unlisted:!1,prevItem:{title:"Loading up nexmon on a RPI4 with SPR",permalink:"/pages/blog/spr-nexmon"},nextItem:{title:"One Weird Trick to fix your CTF Payloads",permalink:"/pages/blog/scapy-revfrag"}},c={authorsImageUrls:[void 0]},l=[{value:"Reducing Attack Surfaces (Part 1)",id:"reducing-attack-surfaces-part-1",level:2}];function d(e){const t={h2:"h2",li:"li",p:"p",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"reducing-attack-surfaces-part-1",children:"Reducing Attack Surfaces (Part 1)"}),"\n",(0,a.jsx)(t.p,{children:"SPR lets users create adaptive, micro-segmented networks for connecting and managing devices.\nIn addition to fine-grained network visibility we also build hardened software and\nwork to avoid common security flaws. As SPR has matured we've started taking on further efforts\nto eliminate attack surfaces."}),"\n",(0,a.jsx)(t.p,{children:"When it comes to native code: we introduce none. As in, we have not written new native code for SPR anywhere.\nWe have one BPF filter, and its otherwise golang all the way down. We also do not run standard native services\nwhere we can avoid them. We have replaced traditional C code for services such as DNS and DHCP with golang implementations, namely CoreDNS and CoreDHCP."}),"\n",(0,a.jsx)(t.p,{children:"The remaining native code targets that we have in SPR are as follows:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"The Linux kernel. For example: ethernet, the tcp/ip stack, nftables, the mac80211 framework and vendor drivers"}),"\n",(0,a.jsx)(t.li,{children:"802.11 Firmware, Ethernet Firmware"}),"\n",(0,a.jsx)(t.li,{children:"Hostapd"}),"\n",(0,a.jsx)(t.li,{children:"PPP Daemon (off by default)"}),"\n",(0,a.jsx)(t.li,{children:"OS Services (Ubuntu)"}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>s});var a=n(67294);const r={},i=a.createContext(r);function s(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);